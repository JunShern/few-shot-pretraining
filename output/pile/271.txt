{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": true,
            "reason": "Text contains SAT."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": true,
            "reason": "Text contains ['SAT']."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "271",
    "text": "\"\"\" Two1 command to send bitcoin to another address \"\"\"\n# standart python imports\nimport logging\n\n# 3rd party imports\nimport click\n\n# two1 imports\nfrom two1.blockchain.exceptions import DataProviderError\nfrom two1.wallet.exceptions import WalletBalanceError\nfrom two1.commands.util import decorators\nfrom two1.commands.util import uxstring\nfrom two1.commands.util import exceptions\nfrom two1.commands.util import currency\nfrom two1.commands.util.bitcoin_computer import has_mining_chip\n\n# Creates a ClickLogger\nlogger = logging.getLogger(__name__)\n\n\n@click.command(\"send\")\n@click.argument('address', type=click.STRING)\n@click.argument('amount', type=click.FLOAT)\n@click.argument('denomination', default='', type=click.STRING)\n@click.option('--use-unconfirmed', '-u',\n              is_flag=True,\n              default=False,\n              show_default=True,\n              help=\"Use unconfirmed transactions/UTXOs\")\n@click.option('--verbose', '-v', is_flag=True, default=False,\n              help=\"Show all transaction inputs and outputs.\")\n@click.pass_context\n@decorators.catch_all\ndef send(ctx, address, amount, denomination, use_unconfirmed, verbose):\n    \"\"\"Send a specified address some satoshis.\n\n\\b\nUsage\n-----\nSend 5000 satoshi from your on-chain balance to the Apache Foundation.\n$ 21 send 1BtjAzWGLyAavUkbw3QsyzzNDKdtPXk95D 5000 satoshis\n\nYou can use the following denominations: satoshis, bitcoins, and USD.\n\nBy default, this command uses only confirmed transactions and\nUTXOs to send coins. To use unconfirmed transactions, use the\n--use-unconfirmed flag.\n\"\"\"\n    if denomination == '':\n        confirmed = click.confirm(uxstring.UxString.default_price_denomination, default=True)\n        if not confirmed:\n            raise exceptions.Two1Error(uxstring.UxString.cancel_command)\n        denomination = currency.Price.SAT\n    price = currency.Price(amount, denomination)\n    return _send(ctx.obj['wallet'], address, price.satoshis, verbose, use_unconfirmed)\n\n\ndef _send(wallet, address, satoshis, verbose, use_unconfirmed=False):\n    \"\"\"Send bitcoin to the specified address\"\"\"\n    txids = []\n    try:\n        txids = wallet.send_to(address=address, amount=satoshis, use_unconfirmed=use_unconfirmed)\n        # For now there is only a single txn created, so assume it's 0\n        txid, txn = txids[0][\"txid\"], txids[0][\"txn\"]\n        if verbose:\n            logger.info(uxstring.UxString.send_success_verbose.format(satoshis, address, txid, txn))\n        else:\n            logger.info(uxstring.UxString.send_success.format(satoshis, address, txid))\n    except ValueError as e:\n        # This will trigger if there's a below dust-limit output.\n        raise exceptions.Two1Error(str(e))\n    except WalletBalanceError as e:\n        if wallet.unconfirmed_balance() > satoshis:\n            raise exceptions.Two1Error(uxstring.UxString.send_insufficient_confirmed + str(e))\n        else:\n            balance = min(wallet.confirmed_balance(), wallet.unconfirmed_balance())\n            if has_mining_chip():\n                raise exceptions.Two1Error(uxstring.UxString.send_insufficient_blockchain_21bc.format(\n                    balance, satoshis, address, str(e)))\n            else:\n                raise exceptions.Two1Error(uxstring.UxString.send_insufficient_blockchain_free.format(\n                    balance, satoshis, address, str(e)))\n    except DataProviderError as e:\n        if \"rejected\" in str(e):\n            raise exceptions.Two1Error(uxstring.UxString.send_rejected)\n        else:\n            raise exceptions.Two1Error(str(e))\n    return txids\n"
}