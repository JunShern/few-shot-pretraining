{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 1 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['-', '-', '-', '-', '-', '-', '-', '-', '2', '2', '-', '-', '-', '2', '2', '-', '-', '-', '-']."
        }
    ],
    "doc_id": "4604",
    "text": "Q:\n\nScope between methods\n\nAnother newbie question. I am trying to understand how to use scope effectively to organise my projects using classes to hold the data instead of having everything on the view controller. So, I am working on a couple of versions of a simple project to understand how scope works. \nI have a view controller hooked to a view. In that view there are buttons that when clicked show images. I want to add another button that randomizes the images. I also have a class called \"Cards\" to hold the cards and the methods for creating and shuffling the cards. I have duplicated the project, so I have one that works and one that doesn't. \nFirst project. These are the files:\nview controller h file:\n#import <UIKit/UIKit.h>\n#import \"Cards.h\"\n\n@interface ViewController : UIViewController\n\n- (IBAction)buttonPressed:(id)sender;\n\n@end\n\nview contoller m file:\n#import \"ViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    Cards *instance = [[Cards alloc] init];\n\n    instance.images = [instance createImages];\n\n    NSLog(@\"I've got %lu Images\", (unsigned long)instance.images.count);\n\n    instance.shuffled = [instance shuffleImages];\n\n    NSLog(@\"Image numbers shuffled: %@\", instance.shuffled);\n  }\n\n- (IBAction)buttonPressed:(id)sender {\n\n   //Nothing hooked to this yet\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n\nCards h file:\n#import <UIKit/UIKit.h>\n#import <Foundation/Foundation.h>\n\n@interface Cards : NSObject\n\n// Creating Images\n\n@property NSMutableArray *images;\n\n- (NSMutableArray*) createImages;\n\n//Shuffling Images\n\n@property NSMutableArray *shuffled;\n\n- (NSMutableArray*) shuffleImages;\n\n@end\n\nCards m file:\n#import \"Cards.h\"\n\n@implementation Cards\n\n- (NSMutableArray*) createImages{\n    self.images = [[NSMutableArray alloc] initWithObjects:\n\n                   [UIImage imageNamed:@\"Image1.png\"],\n                   [UIImage imageNamed:@\"Image2.png\"],\n                   [UIImage imageNamed:@\"Image3.png\"],\n                   [UIImage imageNamed:@\"Image4.png\"], nil];\n\n    return self.images;\n}\n\n- (NSMutableArray*) shuffleImages{\n\n    NSUInteger imageCount = [self.images count];\n\n    NSMutableArray *localvar = [[NSMutableArray alloc]init];\n\n    for (int tileID = 0; tileID < imageCount; tileID++){\n        [localvar addObject:[NSNumber\n                             numberWithInt:tileID]];\n    }\n\n    for (NSUInteger i = 0; i < imageCount; ++i) {\n            NSInteger nElements = imageCount - i;\n            NSInteger n = (arc4random() % nElements) + i;\n            [localvar exchangeObjectAtIndex:i\n                                    withObjectAtIndex:n];\n    }\n\n    return localvar;\n}\n\n@end\n\nThis works and I get the expected output on the console:\n2015-12-31 23:43:44.885 VCScope[2138:533369] I've got 4 Images\n2015-12-31 23:43:44.886 VCScope[2138:533369] Image numbers shuffled: (\n    0,\n    2,\n    3,\n    1\n)\n\nSecond project:\nWhat I want to do, is put a button to randomize the images only when the button is pressed and not as part of viewDidLoad. So, in my second project, I have the same files for the view controller.h and for both the Cards.h and Cards.m, but on the view controller.m I move the calling of the method for the shuffling of the cards to a UIButton method, like so:\nnew View controller m file:\n#import \"ViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    Cards *instance = [[Cards alloc] init];\n\n    instance.images = [instance createImages];\n\n    NSLog(@\"I've got %lu Images\", (unsigned long)instance.images.count);\n\n  }\n\n- (IBAction)buttonPressed:(id)sender {\n\n    Cards *instance = [[Cards alloc] init];\n\n    instance.shuffled = [instance shuffleImages];\n\n    NSLog(@\"Image numbers shuffled: %@\", instance.shuffled);\n\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n\nThis outputs to the console the following:\n2015-12-31 23:32:07.495 4StackVCScope[2029:486608] I've got 4 Images\n2015-12-31 23:32:11.924 4StackVCScope[2029:486608] Image numbers: (\n)\n\nSo it's not working and I am guessing it's to do with scope. Can someone throw some light into this? thanks\n\nA:\n\nWelcome to Stack Overflow. You mention you're a \"newbie\", but it would be helpful to know what background you have so I know how much detail is needed here.\nCards *instance = [[Cards alloc] init];\ncreates a fresh Cards instance in a local variable. You are doing this separately inside -viewDidLoad and in -buttonPressed:.\nIf you want one Cards object per ViewController, then the view controller needs to have per-instance storage for it. There are several possible ways to do this. Which one you pick is a question of code style and API design.\nIf the Cards instance is for internal use only, you can declare an ivar in your @implementation block:\n@implementation ViewController {\n    Cards *_cards;\n}\n\n- (void)viewDidLoad { _cards = ... }\n\n- (IBAction)buttonPressed:(id)sender { access _cards }\n\n@end\n\n(Ivars can be declared in the public @interface as well, but I wouldn't recommend that as it leaks implementation details.)\nOr you can use a property in the public interface:\n// in your .h file:\n@interface ViewController\n@property (nonatomic) Cards *cards;\n@end\n\n// in your @implementation:\n- (void)viewDidLoad { self.cards = ... }\n\n- (IBAction)buttonPressed:(id)sender { access self.cards }\n\nA property can also be privately declared in a class extension:\n// in your .m file:\n@interface ViewController ()\n@property (nonatomic) Cards *cards;\n@end\n\n"
}