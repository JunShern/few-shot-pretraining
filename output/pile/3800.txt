{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3800",
    "text": "Q:\n\nUsing PyQt5, How do I make a QComboBox searchable?\n\nI am using PyQt5 to make a GUI. On it, I have a QComboBox that has a dropdown list that has over 400 items. I was wondering if there is any way in which I can type into the QComboBox to search for a matching case? \n\nA:\n\nYou could use a QCompleter for this. For an editable QComboBox a QCompleter is created automatically. This completer performs case insensitive inline completion but you can adjust that if needed, for example\nfrom PyQt5 import QtWidgets\nfrom itertools import product\n\napp = QtWidgets.QApplication([])\n\n# wordlist for testing\nwordlist = [''.join(combo) for combo in product('abc', repeat = 4)]\n\ncombo = QtWidgets.QComboBox()\ncombo.addItems(wordlist)\n\n# completers only work for editable combo boxes. QComboBox.NoInsert prevents insertion of the search text\ncombo.setEditable(True)\ncombo.setInsertPolicy(QtWidgets.QComboBox.NoInsert)\n\n# change completion mode of the default completer from InlineCompletion to PopupCompletion\ncombo.completer().setCompletionMode(QtWidgets.QCompleter.PopupCompletion)\n\ncombo.show()\napp.exec()\n\n"
}