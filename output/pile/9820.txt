{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 11 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "9820",
    "text": "/*\n * Copyright (c) 2000-2012 Apple Inc. All rights reserved.\n *\n * @APPLE_OSREFERENCE_LICENSE_HEADER_START@\n * \n * This file contains Original Code and/or Modifications of Original Code\n * as defined in and that are subject to the Apple Public Source License\n * Version 2.0 (the 'License'). You may not use this file except in\n * compliance with the License. The rights granted to you under the License\n * may not be used to create, or enable the creation or redistribution of,\n * unlawful or unlicensed copies of an Apple operating system, or to\n * circumvent, violate, or enable the circumvention or violation of, any\n * terms of an Apple operating system software license agreement.\n * \n * Please obtain a copy of the License at\n * http://www.opensource.apple.com/apsl/ and read it before using this file.\n * \n * The Original Code and all software distributed under the License are\n * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\n * Please see the License for the specific language governing rights and\n * limitations under the License.\n * \n * @APPLE_OSREFERENCE_LICENSE_HEADER_END@\n */\n/*\n * @OSF_COPYRIGHT@\n */\n/* \n * Mach Operating System\n * Copyright (c) 1991,1990 Carnegie Mellon University\n * All Rights Reserved.\n * \n * Permission to use, copy, modify and distribute this software and its\n * documentation is hereby granted, provided that both the copyright\n * notice and this permission notice appear in all copies of the\n * software, derivative works or modified versions, and any portions\n * thereof, and that both notices appear in supporting documentation.\n * \n * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS \"AS IS\"\n * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR\n * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.\n * \n * Carnegie Mellon requests users of this software to return to\n * \n *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU\n *  School of Computer Science\n *  Carnegie Mellon University\n *  Pittsburgh PA 15213-3890\n * \n * any improvements or extensions that they make and grant Carnegie Mellon\n * the rights to redistribute these changes.\n */\n\n#include <stddef.h>\n\n#include <mach_ldebug.h>\n\n/*\n * Pass field offsets to assembly code.\n */\n#include <kern/ast.h>\n#include <kern/thread.h>\n#include <kern/task.h>\n#include <kern/locks.h>\n#include <kern/host.h>\n#include <kern/misc_protos.h>\n#include <ipc/ipc_space.h>\n#include <ipc/ipc_port.h>\n#include <ipc/ipc_pset.h>\n#include <vm/vm_map.h>\n#include <i386/pmap.h>\n#include <i386/Diagnostics.h>\n#include <i386/mp_desc.h>\n#include <i386/seg.h>\n#include <i386/thread.h>\n#include <i386/cpu_data.h>\n#include <i386/tss.h>\n#include <i386/cpu_capabilities.h>\n#include <i386/cpuid.h>\n#include <i386/pmCPU.h>\n#include <mach/i386/vm_param.h>\n#include <mach/i386/thread_status.h>\n#include <machine/commpage.h>\n#include <pexpert/i386/boot.h>\n\n#if\tCONFIG_DTRACE\n#define NEED_DTRACE_DEFS\n#include <../bsd/sys/lockstat.h>\n#endif\n\n/*\n * genassym.c is used to produce an\n * assembly file which, intermingled with unuseful assembly code,\n * has all the necessary definitions emitted. This assembly file is\n * then postprocessed with sed to extract only these definitions\n * and thus the final assyms.s is created.\n *\n * This convoluted means is necessary since the structure alignment\n * and packing may be different between the host machine and the\n * target so we are forced into using the cross compiler to generate\n * the values, but we cannot run anything on the target machine.\n */\n\n#define DECLARE(SYM,VAL) \\\n\t__asm(\"DEFINITION__define__\" SYM \":\\t .ascii \\\"%0\\\"\" : : \"n\"  ((u_int)(VAL)))\n\nint\tmain(\n\t\tint\t\targc,\n\t\tchar\t\t** argv);\n\nint\nmain(\n\tint\targc,\n\tchar\t**argv)\n{\n\n\tDECLARE(\"AST_URGENT\",\t\tAST_URGENT);\n\tDECLARE(\"AST_BSD\",\t\t\tAST_BSD);\n\n\tDECLARE(\"MAX_CPUS\",\t\t\tMAX_CPUS);\n\n\t/* Simple Lock structure */\n\tDECLARE(\"SLOCK_ILK\",\toffsetof(usimple_lock_data_t, interlock));\n#if\tMACH_LDEBUG\n\tDECLARE(\"SLOCK_TYPE\",\toffsetof(usimple_lock_data_t, lock_type));\n\tDECLARE(\"SLOCK_PC\",\toffsetof(usimple_lock_data_t, debug.lock_pc));\n\tDECLARE(\"SLOCK_THREAD\",\toffsetof(usimple_lock_data_t, debug.lock_thread));\n\tDECLARE(\"SLOCK_DURATIONH\",offsetof(usimple_lock_data_t, debug.duration[0]));\n\tDECLARE(\"SLOCK_DURATIONL\",offsetof(usimple_lock_data_t, debug.duration[1]));\n\tDECLARE(\"USLOCK_TAG\",\tUSLOCK_TAG);\n#endif\t/* MACH_LDEBUG */\n\n\t/* Mutex structure */\n\tDECLARE(\"MUTEX_OWNER\", offsetof(lck_mtx_t, lck_mtx_owner));\n\tDECLARE(\"MUTEX_PTR\",   offsetof(lck_mtx_t, lck_mtx_ptr));\n\tDECLARE(\"MUTEX_STATE\", offsetof(lck_mtx_t, lck_mtx_state));\n\tDECLARE(\"MUTEX_IND\",\tLCK_MTX_TAG_INDIRECT);\n\tDECLARE(\"MUTEX_ASSERT_OWNED\",\tLCK_MTX_ASSERT_OWNED);\n\tDECLARE(\"MUTEX_ASSERT_NOTOWNED\",LCK_MTX_ASSERT_NOTOWNED);\n\tDECLARE(\"GRP_MTX_STAT_UTIL\",\toffsetof(lck_grp_t, lck_grp_stat.lck_grp_mtx_stat.lck_grp_mtx_util_cnt));\n\tDECLARE(\"GRP_MTX_STAT_MISS\",\toffsetof(lck_grp_t, lck_grp_stat.lck_grp_mtx_stat.lck_grp_mtx_miss_cnt));\n\tDECLARE(\"GRP_MTX_STAT_WAIT\",\toffsetof(lck_grp_t, lck_grp_stat.lck_grp_mtx_stat.lck_grp_mtx_wait_cnt));\n\t\n\t/* x86 only */\n\tDECLARE(\"MUTEX_DESTROYED\", LCK_MTX_TAG_DESTROYED);\n\n\t/* Per-mutex statistic element */\n\tDECLARE(\"MTX_ACQ_TSC\",\toffsetof(lck_mtx_ext_t, lck_mtx_stat));\n\n\t/* Mutex group statistics elements */\n\tDECLARE(\"MUTEX_GRP\",\toffsetof(lck_mtx_ext_t, lck_mtx_grp));\n\t\n\t/*\n\t * The use of this field is somewhat at variance with the alias.\n\t */\n\tDECLARE(\"GRP_MTX_STAT_DIRECT_WAIT\",\toffsetof(lck_grp_t, lck_grp_stat.lck_grp_mtx_stat.lck_grp_mtx_held_cnt));\n\n\tDECLARE(\"GRP_MTX_STAT_HELD_MAX\",\toffsetof(lck_grp_t, lck_grp_stat.lck_grp_mtx_stat.lck_grp_mtx_held_max));\n\t/* Reader writer lock types */\n\tDECLARE(\"RW_SHARED\",    LCK_RW_TYPE_SHARED);\n\tDECLARE(\"RW_EXCL\",      LCK_RW_TYPE_EXCLUSIVE);\n\n\tDECLARE(\"TH_RECOVER\",\t\toffsetof(struct thread, recover));\n\tDECLARE(\"TH_CONTINUATION\",\toffsetof(struct thread, continuation));\n\tDECLARE(\"TH_KERNEL_STACK\",\toffsetof(struct thread, kernel_stack));\n\tDECLARE(\"TH_MUTEX_COUNT\",\toffsetof(struct thread, mutex_count));\n\tDECLARE(\"TH_WAS_PROMOTED_ON_WAKEUP\", offsetof(struct thread, was_promoted_on_wakeup));\n\tDECLARE(\"TH_IOTIER_OVERRIDE\",\toffsetof(struct thread, iotier_override));\n\n\tDECLARE(\"TH_SYSCALLS_MACH\",\toffsetof(struct thread, syscalls_mach));\n\tDECLARE(\"TH_SYSCALLS_UNIX\",\toffsetof(struct thread, syscalls_unix));\n\n\tDECLARE(\"TASK_VTIMERS\",\t\t\toffsetof(struct task, vtimers));\n\n\t/* These fields are being added on demand */\n\tDECLARE(\"TH_TASK\",\toffsetof(struct thread, task));\n\tDECLARE(\"TH_AST\",\toffsetof(struct thread, ast));\n\tDECLARE(\"TH_MAP\",\toffsetof(struct thread, map));\n\tDECLARE(\"TH_SPF\",\toffsetof(struct thread, machine.specFlags));\n\tDECLARE(\"TH_PCB_ISS\", \toffsetof(struct thread, machine.iss));\n\tDECLARE(\"TH_PCB_IDS\", \toffsetof(struct thread, machine.ids));\n\tDECLARE(\"TH_PCB_FPS\",\toffsetof(struct thread, machine.ifps));\n#if NCOPY_WINDOWS > 0\n\tDECLARE(\"TH_COPYIO_STATE\", offsetof(struct thread, machine.copyio_state));\n\tDECLARE(\"WINDOWS_CLEAN\", WINDOWS_CLEAN);\n#endif\n\tDECLARE(\"TH_RWLOCK_COUNT\",\toffsetof(struct thread, rwlock_count));\n\n\tDECLARE(\"MAP_PMAP\",\toffsetof(struct _vm_map, pmap));\n\n#define IEL_SIZE\t\t(sizeof(struct i386_exception_link *))\n\tDECLARE(\"IKS_SIZE\",\tsizeof(struct thread_kernel_state));\n\n\t/*\n\t * KSS_* are offsets from the top of the kernel stack (cpu_kernel_stack)\n\t */\n\tDECLARE(\"KSS_RBX\",\toffsetof(struct thread_kernel_state, machine.k_rbx));\n\tDECLARE(\"KSS_RSP\",\toffsetof(struct thread_kernel_state, machine.k_rsp));\n\tDECLARE(\"KSS_RBP\",\toffsetof(struct thread_kernel_state, machine.k_rbp));\n\tDECLARE(\"KSS_R12\",\toffsetof(struct thread_kernel_state, machine.k_r12));\n\tDECLARE(\"KSS_R13\",\toffsetof(struct thread_kernel_state, machine.k_r13));\n\tDECLARE(\"KSS_R14\",\toffsetof(struct thread_kernel_state, machine.k_r14));\n\tDECLARE(\"KSS_R15\",\toffsetof(struct thread_kernel_state, machine.k_r15));\n\tDECLARE(\"KSS_RIP\",\toffsetof(struct thread_kernel_state, machine.k_rip));\n\t\n\tDECLARE(\"DS_DR0\",\toffsetof(struct x86_debug_state32, dr0));\n\tDECLARE(\"DS_DR1\",\toffsetof(struct x86_debug_state32, dr1));\n\tDECLARE(\"DS_DR2\",\toffsetof(struct x86_debug_state32, dr2));\n\tDECLARE(\"DS_DR3\",\toffsetof(struct x86_debug_state32, dr3));\n\tDECLARE(\"DS_DR4\",\toffsetof(struct x86_debug_state32, dr4));\n\tDECLARE(\"DS_DR5\",\toffsetof(struct x86_debug_state32, dr5));\n\tDECLARE(\"DS_DR6\",\toffsetof(struct x86_debug_state32, dr6));\n\tDECLARE(\"DS_DR7\",\toffsetof(struct x86_debug_state32, dr7));\n\n\tDECLARE(\"DS64_DR0\",\toffsetof(struct x86_debug_state64, dr0));\n\tDECLARE(\"DS64_DR1\",\toffsetof(struct x86_debug_state64, dr1));\n\tDECLARE(\"DS64_DR2\",\toffsetof(struct x86_debug_state64, dr2));\n\tDECLARE(\"DS64_DR3\",\toffsetof(struct x86_debug_state64, dr3));\n\tDECLARE(\"DS64_DR4\",\toffsetof(struct x86_debug_state64, dr4));\n\tDECLARE(\"DS64_DR5\",\toffsetof(struct x86_debug_state64, dr5));\n\tDECLARE(\"DS64_DR6\",\toffsetof(struct x86_debug_state64, dr6));\n\tDECLARE(\"DS64_DR7\",\toffsetof(struct x86_debug_state64, dr7));\n\n\tDECLARE(\"FP_VALID\",\toffsetof(struct x86_fx_thread_state,fp_valid));\n\n\tDECLARE(\"SS_FLAVOR\",\toffsetof(x86_saved_state_t, flavor));\n\tDECLARE(\"SS_32\",\tx86_SAVED_STATE32);\n\tDECLARE(\"SS_64\",\tx86_SAVED_STATE64);\n\n#define R_(x)  offsetof(x86_saved_state_t, ss_32.x)\n\tDECLARE(\"R32_CS\",\tR_(cs));\n\tDECLARE(\"R32_SS\",\tR_(ss));\n\tDECLARE(\"R32_DS\",\tR_(ds));\n\tDECLARE(\"R32_ES\",\tR_(es));\n\tDECLARE(\"R32_FS\",\tR_(fs));\n\tDECLARE(\"R32_GS\",\tR_(gs));\n\tDECLARE(\"R32_UESP\",\tR_(uesp));\n\tDECLARE(\"R32_EBP\",\tR_(ebp));\n\tDECLARE(\"R32_EAX\",\tR_(eax));\n\tDECLARE(\"R32_EBX\",\tR_(ebx));\n\tDECLARE(\"R32_ECX\",\tR_(ecx));\n\tDECLARE(\"R32_EDX\",\tR_(edx));\n\tDECLARE(\"R32_ESI\",\tR_(esi));\n\tDECLARE(\"R32_EDI\",\tR_(edi));\n\tDECLARE(\"R32_TRAPNO\",\tR_(trapno));\n\tDECLARE(\"R32_ERR\",\tR_(err));\n\tDECLARE(\"R32_EFLAGS\",\tR_(efl));\n\tDECLARE(\"R32_EIP\",\tR_(eip));\n\tDECLARE(\"R32_CR2\",\tR_(cr2));\n\tDECLARE(\"ISS32_SIZE\",\tsizeof (x86_saved_state32_t));\n\n#define R64_(x)  offsetof(x86_saved_state_t, ss_64.x)\n\tDECLARE(\"R64_FS\",\tR64_(fs));\n\tDECLARE(\"R64_GS\",\tR64_(gs));\n\tDECLARE(\"R64_R8\",\tR64_(r8));\n\tDECLARE(\"R64_R9\",\tR64_(r9));\n\tDECLARE(\"R64_R10\",\tR64_(r10));\n\tDECLARE(\"R64_R11\",\tR64_(r11));\n\tDECLARE(\"R64_R12\",\tR64_(r12));\n\tDECLARE(\"R64_R13\",\tR64_(r13));\n\tDECLARE(\"R64_R14\",\tR64_(r14));\n\tDECLARE(\"R64_R15\",\tR64_(r15));\n\tDECLARE(\"R64_RBP\",\tR64_(rbp));\n\tDECLARE(\"R64_RAX\",\tR64_(rax));\n\tDECLARE(\"R64_RBX\",\tR64_(rbx));\n\tDECLARE(\"R64_RCX\",\tR64_(rcx));\n\tDECLARE(\"R64_RDX\",\tR64_(rdx));\n\tDECLARE(\"R64_RSI\",\tR64_(rsi));\n\tDECLARE(\"R64_RDI\",\tR64_(rdi));\n\tDECLARE(\"R64_CS\",\tR64_(isf.cs));\n\tDECLARE(\"R64_SS\",\tR64_(isf.ss));\n\tDECLARE(\"R64_RSP\",\tR64_(isf.rsp));\n\tDECLARE(\"R64_TRAPNO\",\tR64_(isf.trapno));\n\tDECLARE(\"R64_TRAPFN\",\tR64_(isf.trapfn));\n\tDECLARE(\"R64_ERR\",\tR64_(isf.err));\n\tDECLARE(\"R64_RFLAGS\",\tR64_(isf.rflags));\n\tDECLARE(\"R64_RIP\",\tR64_(isf.rip));\n\tDECLARE(\"R64_CR2\",\tR64_(cr2));\n\tDECLARE(\"ISS64_OFFSET\",\tR64_(isf));\n\tDECLARE(\"ISS64_SIZE\",\tsizeof (x86_saved_state64_t));\n\n#define ISF64_(x)  offsetof(x86_64_intr_stack_frame_t, x)\n\tDECLARE(\"ISF64_TRAPNO\",\tISF64_(trapno));\n\tDECLARE(\"ISF64_TRAPFN\",\tISF64_(trapfn));\n\tDECLARE(\"ISF64_ERR\",\tISF64_(err));\n\tDECLARE(\"ISF64_RIP\",\tISF64_(rip));\n\tDECLARE(\"ISF64_CS\",\tISF64_(cs));\n\tDECLARE(\"ISF64_RFLAGS\",\tISF64_(rflags));\n\tDECLARE(\"ISF64_RSP\",\tISF64_(rsp));\n\tDECLARE(\"ISF64_SS\",\tISF64_(ss));\n\tDECLARE(\"ISF64_SIZE\",\tsizeof(x86_64_intr_stack_frame_t));\n\n\tDECLARE(\"NBPG\",\t\t\tI386_PGBYTES);\n\tDECLARE(\"PAGE_SIZE\",            I386_PGBYTES);\n\tDECLARE(\"PAGE_MASK\",            I386_PGBYTES-1);\n\tDECLARE(\"PAGE_SHIFT\",           12);\n\tDECLARE(\"NKPT\",                 NKPT);\n\tDECLARE(\"VM_MIN_ADDRESS\",\tVM_MIN_ADDRESS);\n\tDECLARE(\"VM_MAX_ADDRESS\",\tVM_MAX_ADDRESS);\n\tDECLARE(\"KERNELBASE\",\t\tVM_MIN_KERNEL_ADDRESS);\n\tDECLARE(\"LINEAR_KERNELBASE\",\tLINEAR_KERNEL_ADDRESS);\n\tDECLARE(\"KERNEL_STACK_SIZE\",\tKERNEL_STACK_SIZE);\n\n\tDECLARE(\"ASM_COMM_PAGE32_BASE_ADDRESS\",  _COMM_PAGE32_BASE_ADDRESS);\n\tDECLARE(\"ASM_COMM_PAGE32_START_ADDRESS\",  _COMM_PAGE32_START_ADDRESS);\n\tDECLARE(\"ASM_COMM_PAGE_SCHED_GEN\",  _COMM_PAGE_SCHED_GEN);\n\n\tDECLARE(\"KERNEL_PML4_INDEX\", KERNEL_PML4_INDEX);\n\tDECLARE(\"IDTSZ\",\tIDTSZ);\n\tDECLARE(\"GDTSZ\",\tGDTSZ);\n\n\tDECLARE(\"KERNEL_DS\",\tKERNEL_DS);\n\tDECLARE(\"USER_CS\",\tUSER_CS);\n\tDECLARE(\"USER_DS\",\tUSER_DS);\n\tDECLARE(\"USER_CTHREAD\",\tUSER_CTHREAD);\n\tDECLARE(\"KERNEL32_CS\",\tKERNEL32_CS);\n\tDECLARE(\"KERNEL64_CS\",  KERNEL64_CS);\n\tDECLARE(\"USER64_CS\",\tUSER64_CS);\n\tDECLARE(\"KERNEL_TSS\",\tKERNEL_TSS);\n\tDECLARE(\"KERNEL_LDT\",\tKERNEL_LDT);\n\tDECLARE(\"SYSENTER_CS\",\tSYSENTER_CS);\n\tDECLARE(\"SYSENTER_TF_CS\",SYSENTER_TF_CS);\n\tDECLARE(\"SYSENTER_DS\",\tSYSENTER_DS);\n\tDECLARE(\"SYSCALL_CS\",\tSYSCALL_CS);\n\n        DECLARE(\"CPU_THIS\",\n\t\toffsetof(cpu_data_t, cpu_this));\n        DECLARE(\"CPU_ACTIVE_THREAD\",\n\t\toffsetof(cpu_data_t, cpu_active_thread));\n        DECLARE(\"CPU_ACTIVE_STACK\",\n\t\toffsetof(cpu_data_t, cpu_active_stack));\n        DECLARE(\"CPU_KERNEL_STACK\",\n\t\toffsetof(cpu_data_t, cpu_kernel_stack));\n        DECLARE(\"CPU_INT_STACK_TOP\",\n\t\toffsetof(cpu_data_t, cpu_int_stack_top));\n        DECLARE(\"CPU_PREEMPTION_LEVEL\",\n\t\toffsetof(cpu_data_t, cpu_preemption_level));\n        DECLARE(\"CPU_HIBERNATE\",\n\t\toffsetof(cpu_data_t, cpu_hibernate));\n        DECLARE(\"CPU_INTERRUPT_LEVEL\",\n\t\toffsetof(cpu_data_t, cpu_interrupt_level));\n\tDECLARE(\"CPU_NESTED_ISTACK\",\n\t    offsetof(cpu_data_t, cpu_nested_istack));\n        DECLARE(\"CPU_NUMBER_GS\",\n\t\toffsetof(cpu_data_t,cpu_number));\n        DECLARE(\"CPU_RUNNING\",\n\t\toffsetof(cpu_data_t,cpu_running));\n\tDECLARE(\"CPU_PENDING_AST\",\n\t\toffsetof(cpu_data_t,cpu_pending_ast));\n\tDECLARE(\"CPU_PROCESSOR\",\n\t\toffsetof(cpu_data_t,cpu_processor));\n        DECLARE(\"CPU_INT_STATE\",\n\t\toffsetof(cpu_data_t, cpu_int_state));\n        DECLARE(\"CPU_INT_EVENT_TIME\",\n\t\toffsetof(cpu_data_t, cpu_int_event_time));\n\n        DECLARE(\"CPU_TASK_CR3\",\n\t\toffsetof(cpu_data_t, cpu_task_cr3));\n        DECLARE(\"CPU_ACTIVE_CR3\",\n\t\toffsetof(cpu_data_t, cpu_active_cr3));\n        DECLARE(\"CPU_KERNEL_CR3\",\n\t\toffsetof(cpu_data_t, cpu_kernel_cr3));\n\tDECLARE(\"CPU_UCR3\",\n\t\toffsetof(cpu_data_t, cpu_ucr3));\n#if\tDEBUG\n\tDECLARE(\"CPU_ENTRY_CR3\",\n\t\toffsetof(cpu_data_t, cpu_entry_cr3));\n\tDECLARE(\"CPU_EXIT_CR3\",\n\t\toffsetof(cpu_data_t, cpu_exit_cr3));\n#endif\n\tDECLARE(\"CPU_TLB_INVALID\",\n\t\toffsetof(cpu_data_t, cpu_tlb_invalid));\n\tDECLARE(\"CPU_PAGEZERO_MAPPED\",\n\t\toffsetof(cpu_data_t, cpu_pagezero_mapped));\n\n\tDECLARE(\"CPU_TASK_MAP\",\n\t\toffsetof(cpu_data_t, cpu_task_map));\n\tDECLARE(\"TASK_MAP_32BIT\",\t\tTASK_MAP_32BIT); \n\tDECLARE(\"TASK_MAP_64BIT\",\t\tTASK_MAP_64BIT);\n\tDECLARE(\"CPU_UBER_USER_GS_BASE\",\n\t\toffsetof(cpu_data_t, cpu_uber.cu_user_gs_base));\n\tDECLARE(\"CPU_UBER_ISF\",\n\t\toffsetof(cpu_data_t, cpu_uber.cu_isf));\n\tDECLARE(\"CPU_UBER_TMP\",\n\t\toffsetof(cpu_data_t, cpu_uber.cu_tmp));\n\n\tDECLARE(\"CPU_NANOTIME\",\n\t\toffsetof(cpu_data_t, cpu_nanotime));\n\n\tDECLARE(\"CPU_DR7\",\n\t\toffsetof(cpu_data_t, cpu_dr7));\n\n\tDECLARE(\"hwIntCnt\", \toffsetof(cpu_data_t,cpu_hwIntCnt));\n\tDECLARE(\"CPU_ACTIVE_PCID\",\n\t\toffsetof(cpu_data_t, cpu_active_pcid));\n\tDECLARE(\"CPU_KERNEL_PCID\",\n\t\toffsetof(cpu_data_t, cpu_kernel_pcid));\n\n\tDECLARE(\"CPU_PCID_COHERENTP\",\n\t\toffsetof(cpu_data_t, cpu_pmap_pcid_coherentp));\n\tDECLARE(\"CPU_PCID_COHERENTP_KERNEL\",\n\t\toffsetof(cpu_data_t, cpu_pmap_pcid_coherentp_kernel));\n\tDECLARE(\"CPU_PMAP_PCID_ENABLED\",\n\t    offsetof(cpu_data_t, cpu_pmap_pcid_enabled));\n\n#ifdef\tPCID_STATS\t\n\tDECLARE(\"CPU_PMAP_USER_RETS\",\n\t    offsetof(cpu_data_t, cpu_pmap_user_rets));\n\tDECLARE(\"CPU_PMAP_PCID_PRESERVES\",\n\t    offsetof(cpu_data_t, cpu_pmap_pcid_preserves));\n\tDECLARE(\"CPU_PMAP_PCID_FLUSHES\",\n\t    offsetof(cpu_data_t, cpu_pmap_pcid_flushes));\n#endif\n\tDECLARE(\"CPU_TLB_INVALID_LOCAL\",\n\t    offsetof(cpu_data_t, cpu_tlb_invalid_local));\n\tDECLARE(\"CPU_TLB_INVALID_GLOBAL\",\n\t\toffsetof(cpu_data_t, cpu_tlb_invalid_global));\n\tDECLARE(\"CPU_ESTACK\",\n\t\toffsetof(cpu_data_t, cd_estack));\n\tDECLARE(\"CPU_DSHADOW\",\n\t\toffsetof(cpu_data_t, cd_shadow));\n\n\tDECLARE(\"enaExpTrace\",\tenaExpTrace);\n\tDECLARE(\"enaUsrFCall\",\tenaUsrFCall);\n\tDECLARE(\"enaUsrPhyMp\",\tenaUsrPhyMp);\n\tDECLARE(\"enaDiagSCs\",\tenaDiagSCs);\n\tDECLARE(\"enaDiagEM\",\tenaDiagEM);\n\tDECLARE(\"enaNotifyEM\",\tenaNotifyEM);\n\tDECLARE(\"dgLock\",\t\toffsetof(struct diagWork, dgLock));\n\tDECLARE(\"dgFlags\",\t\toffsetof(struct diagWork, dgFlags));\n\tDECLARE(\"dgMisc1\",\t\toffsetof(struct diagWork, dgMisc1));\n\tDECLARE(\"dgMisc2\",\t\toffsetof(struct diagWork, dgMisc2));\n\tDECLARE(\"dgMisc3\",\t\toffsetof(struct diagWork, dgMisc3));\n\tDECLARE(\"dgMisc4\",\t\toffsetof(struct diagWork, dgMisc4));\n\tDECLARE(\"dgMisc5\",\t\toffsetof(struct diagWork, dgMisc5));\n\n\tDECLARE(\"TSS_ESP0\",\toffsetof(struct i386_tss, esp0));\n\tDECLARE(\"TSS_SS0\",\toffsetof(struct i386_tss, ss0));\n\tDECLARE(\"TSS_LDT\",\toffsetof(struct i386_tss, ldt));\n\tDECLARE(\"TSS_PDBR\",\toffsetof(struct i386_tss, cr3));\n\tDECLARE(\"TSS_LINK\",\toffsetof(struct i386_tss, back_link));\n\n\tDECLARE(\"K_TASK_GATE\",\tACC_P|ACC_PL_K|ACC_TASK_GATE);\n\tDECLARE(\"K_TRAP_GATE\",\tACC_P|ACC_PL_K|ACC_TRAP_GATE);\n\tDECLARE(\"U_TRAP_GATE\",\tACC_P|ACC_PL_U|ACC_TRAP_GATE);\n\tDECLARE(\"K_INTR_GATE\",\tACC_P|ACC_PL_K|ACC_INTR_GATE);\n\tDECLARE(\"U_INTR_GATE\",  ACC_P|ACC_PL_U|ACC_INTR_GATE);\n\tDECLARE(\"K_TSS\",\tACC_P|ACC_PL_K|ACC_TSS);\n\n\t/*\n\t *\tusimple_lock fields\n\t */\n\tDECLARE(\"USL_INTERLOCK\",\toffsetof(usimple_lock_data_t, interlock));\n\n\tDECLARE(\"INTSTACK_SIZE\",\tINTSTACK_SIZE);\n\tDECLARE(\"KADDR\", offsetof(struct boot_args, kaddr));\n\tDECLARE(\"KSIZE\", offsetof(struct boot_args, ksize));\n\tDECLARE(\"MEMORYMAP\", offsetof(struct boot_args, MemoryMap));\n\tDECLARE(\"DEVICETREEP\", offsetof(struct boot_args, deviceTreeP));\n\n\tDECLARE(\"RNT_TSC_BASE\",\n\t\toffsetof(pal_rtc_nanotime_t, tsc_base));\n\tDECLARE(\"RNT_NS_BASE\",\n\t\toffsetof(pal_rtc_nanotime_t, ns_base));\n\tDECLARE(\"RNT_SCALE\",\n\t\toffsetof(pal_rtc_nanotime_t, scale));\n\tDECLARE(\"RNT_SHIFT\",\n\t\toffsetof(pal_rtc_nanotime_t, shift));\n\tDECLARE(\"RNT_GENERATION\",\n\t\toffsetof(pal_rtc_nanotime_t, generation));\n\n\t/* values from kern/timer.h */\n#ifdef __LP64__\n\tDECLARE(\"TIMER_ALL\", offsetof(struct timer, all_bits));\n#else\n\tDECLARE(\"TIMER_LOW\",\t \toffsetof(struct timer, low_bits));\n\tDECLARE(\"TIMER_HIGH\",\t\toffsetof(struct timer, high_bits));\n\tDECLARE(\"TIMER_HIGHCHK\",\toffsetof(struct timer, high_bits_check));\t\n#endif\n\tDECLARE(\"TIMER_TSTAMP\",\n\t\toffsetof(struct timer, tstamp));\n\n\tDECLARE(\"THREAD_TIMER\",\n\t\toffsetof(struct processor, processor_data.thread_timer));\n\tDECLARE(\"KERNEL_TIMER\",\n\t\toffsetof(struct processor, processor_data.kernel_timer));\n\tDECLARE(\"SYSTEM_TIMER\",\n\t\toffsetof(struct thread, system_timer));\n\tDECLARE(\"USER_TIMER\",\n\t\toffsetof(struct thread, user_timer));\n\tDECLARE(\"SYSTEM_STATE\",\n\t\t\toffsetof(struct processor, processor_data.system_state));\n\tDECLARE(\"USER_STATE\",\n\t\t\toffsetof(struct processor, processor_data.user_state));\n\tDECLARE(\"IDLE_STATE\",\n\t\t\toffsetof(struct processor, processor_data.idle_state));\n\tDECLARE(\"CURRENT_STATE\",\n\t\t\toffsetof(struct processor, processor_data.current_state));\n\n\tDECLARE(\"OnProc\", OnProc);\n\n\n#if\tCONFIG_DTRACE\n\tDECLARE(\"LS_LCK_MTX_LOCK_ACQUIRE\", LS_LCK_MTX_LOCK_ACQUIRE);\n\tDECLARE(\"LS_LCK_MTX_TRY_SPIN_LOCK_ACQUIRE\", LS_LCK_MTX_TRY_SPIN_LOCK_ACQUIRE);\n\tDECLARE(\"LS_LCK_MTX_UNLOCK_RELEASE\", LS_LCK_MTX_UNLOCK_RELEASE);\n\tDECLARE(\"LS_LCK_MTX_TRY_LOCK_ACQUIRE\", LS_LCK_MTX_TRY_LOCK_ACQUIRE);\n\tDECLARE(\"LS_LCK_RW_LOCK_SHARED_ACQUIRE\", LS_LCK_RW_LOCK_SHARED_ACQUIRE);\n\tDECLARE(\"LS_LCK_RW_DONE_RELEASE\", LS_LCK_RW_DONE_RELEASE);\n\tDECLARE(\"LS_LCK_MTX_EXT_LOCK_ACQUIRE\", LS_LCK_MTX_EXT_LOCK_ACQUIRE);\n\tDECLARE(\"LS_LCK_MTX_TRY_EXT_LOCK_ACQUIRE\", LS_LCK_MTX_TRY_EXT_LOCK_ACQUIRE);\n\tDECLARE(\"LS_LCK_MTX_EXT_UNLOCK_RELEASE\", LS_LCK_MTX_EXT_UNLOCK_RELEASE);\n\tDECLARE(\"LS_LCK_RW_LOCK_EXCL_ACQUIRE\", LS_LCK_RW_LOCK_EXCL_ACQUIRE);\n\tDECLARE(\"LS_LCK_RW_LOCK_SHARED_TO_EXCL_UPGRADE\", LS_LCK_RW_LOCK_SHARED_TO_EXCL_UPGRADE);\n\tDECLARE(\"LS_LCK_RW_TRY_LOCK_EXCL_ACQUIRE\", LS_LCK_RW_TRY_LOCK_EXCL_ACQUIRE);\n\tDECLARE(\"LS_LCK_RW_TRY_LOCK_SHARED_ACQUIRE\", LS_LCK_RW_TRY_LOCK_SHARED_ACQUIRE);\n\tDECLARE(\"LS_LCK_MTX_LOCK_SPIN_ACQUIRE\", LS_LCK_MTX_LOCK_SPIN_ACQUIRE);\n#endif\n\n\treturn (0);\n}\n"
}