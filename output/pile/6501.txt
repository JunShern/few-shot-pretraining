{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6501",
    "text": "Q:\n\nHelp required to get full code covered in test class\n\nI am having the trigger and  handler class in the quote Line Item object it's work like, the I am having two same named custom field in the OpportunityLineItem and Quote Line item respectively.so that field is to be updated by the condition of when  issyncing of the quote of the quoteline item to its opportunity is to be true. that custom field name SyncCheck__c.\nMy trigger:\ntrigger customSyncHandlerTrigger on QuoteLineItem (after update) {\n    if (Trigger.isUpdate && Trigger.isAfter) {   \n        CustomSyncHandler.UpdateTrigger(Trigger.New, Trigger.OldMap);\n    }\n}\n\nMy handler class:\npublic class CustomSyncHandler {\n\n    public static void UpdateTrigger (List<QuoteLineItem> InsertedQuote, Map<Id,QuoteLineItem> OldInsertedQuoteMap) {\n\n        Set<Id> ProductIdset = new Set<Id>();\n        Set<Id> QuoteIdset = new Set<Id>();\n        Set<Id> OpportunityIdset = new Set<Id>();\n        List<QuoteLineItem> QuoteLineItemList = new List<QuoteLineItem>();\n        List<OpportunityLineItem> OpportunityLineItemList = new List<OpportunityLineItem>();\n\n        for (QuoteLineItem RecordQuoteItem: InsertedQuote) {\n\n           QuoteLineItem OldQuoteLineItemREC = OldInsertedQuoteMap.get(RecordQuoteItem.Id);\n\n           if (OldQuoteLineItemREC.SyncCheck__c != RecordQuoteItem.SyncCheck__c) {\n\n               ProductIdset.add(RecordQuoteItem.Product2Id);\n               QuoteIdset.add(RecordQuoteItem.QuoteId); \n           }               \n\n        }\n\n        If (QuoteIdset.size()>0) {\n\n            QuoteLineItemList = [SELECT Id, QuoteId, Product2Id, SyncCheck__c, Quote.issyncing, Quote.OpportunityId FROM QuoteLineItem WHERE Product2Id IN :ProductIdset AND Quote.issyncing = True  ];\n        }\n\n        If (QuoteLineItemList.size() > 0) {\n\n            for (QuoteLineItem quoteLineitemvalue: QuoteLineItemList) {                  \n                OpportunityIdset.add(quoteLineitemvalue.Quote.OpportunityId);                       \n            }\n        }\n\n        List<OpportunityLineItem> OpportunityLineitemvalueList = [SELECT Id, Name, OpportunityId, SyncCheck__c, Product2Id FROM OpportunityLineItem WHERE OpportunityId IN :OpportunityIdset AND Product2Id IN :ProductIdset];\n\n        Map<Id, List<OpportunityLineItem>> OpportunityandOppolineitemMap = new Map<Id, List<OpportunityLineItem>>();\n\n        for (OpportunityLineItem OpportunityLIRecord : OpportunityLineitemvalueList) {\n\n            If (!OpportunityandOppolineitemMap.Containskey(OpportunityLIRecord.Id)) {\n\n                OpportunityandOppolineitemMap.put(OpportunityLIRecord.OpportunityId, new List<OpportunityLineItem>());                \n             } \n\n                 OpportunityandOppolineitemMap.get(OpportunityLIRecord.OpportunityId).add(OpportunityLIRecord);\n\n        }\n\n        system.debug('@@@ OpportunityandOppolineitemMap value is'+OpportunityandOppolineitemMap);\n\n        for (QuoteLineItem QuoteLineItemRecord : QuoteLineItemList) { \n\n            if (OpportunityandOppolineitemMap.containsKey(QuoteLineItemRecord.Quote.OpportunityId)) {  \n\n                 for (OpportunityLineItem OpporVar : OpportunityandOppolineitemMap.get(QuoteLineItemRecord.Quote.OpportunityId)) {\n\n                     if (OpporVar.Product2Id == QuoteLineItemRecord.Product2Id) {\n\n                         OpporVar.SyncCheck__c = QuoteLineItemRecord.SyncCheck__c;\n                         OpportunityLineItemList.add(OpporVar);\n\n                     }\n                 }          \n            }        \n        }\n        if (OpportunityLineItemList.size() > 0) {\n\n            Update OpportunityLineItemList;  \n\n        }          \n    }\n}\n\nMy test class :\n@isTest\npublic class TestCustomSyncHandlerTrigger {\n    static testMethod void  UpdateCustomSyncHandler() {\n        Account acc1 = new Account();\n        acc1.Name = 'test account';\n        insert acc1;\n        system.debug('insert acc1 is success');\n\n        Opportunity Opp1 = new Opportunity();\n        Opp1.Name = 'testOpp';\n        Opp1.AccountId = acc1.Id;\n        Opp1.StageName = 'Closed Won';\n        Opp1.CloseDate = system.Today();\n        insert Opp1;        \n        system.debug('insert opp1 success');\n\n        Product2 Pro1 = new Product2();\n        Pro1.Name = 'SLA: Bronze';\n        pro1.isActive = True;\n        Insert pro1;\n        system.debug('insert pro1 is success');        \n\n        Pricebook2 pb = new pricebook2();\n        pb.Name = 'Standard Price Book 2009';\n        pb.description = 'Price Book 2009 Products';\n        pb.isActive = True;\n        insert pb;\n        system.debug('pb value is'+ pb.Id);\n        system.debug('insert pricebook2 is success');\n\n        Id pricebookId = Test.getStandardPricebookId();        \n\n        PricebookEntry StandardPriceBookEntry = new PricebookEntry();\n        StandardPriceBookEntry.Pricebook2Id = pricebookId;\n        StandardPriceBookEntry.Product2Id = pro1.Id;\n        StandardPriceBookEntry.UnitPrice = 10000;\n        StandardPriceBookEntry.IsActive =True;        \n        insert StandardPriceBookEntry;\n        system.debug('insert StandardPriceBookEntry');\n\n        PricebookEntry pbe = new PricebookEntry(pricebook2id=pb.id, product2id=pro1.id, unitprice=10000, isActive = True);\n        insert pbe;\n        system.debug('insert pbe is success');\n\n        Quote Quo1 = new Quote(); \n        Quo1.OpportunityId = Opp1.Id;\n        Quo1.Pricebook2Id = pb.Id;\n        Quo1.Name = 'test Quo1';      \n        insert Quo1;       \n        system.debug('insert Quo1 success');\n\n        QuoteLineItem QLI  = new QuoteLineItem();\n        QLI.Product2Id = pro1.Id;\n        QLI.QuoteId = Quo1.Id;\n        QLI.PricebookEntryId = Pbe.Id;\n        QLI.Quantity = 2;\n        QLI.UnitPrice = 150000.0; \n        insert QLI;    \n        system.debug('insert QLI is success');\n\n        OpportunityLineItem OLI = new OpportunityLineItem();\n        OLI.UnitPrice = 150000;\n        OLI.OpportunityId = Opp1.Id;\n        OLI.PriceBookEntryId = Pbe.Id;\n        OLI.Quantity = 2;\n        insert OLI;\n        system.debug('insert OLI is success');\n\n        List<QuoteLineItem> QuoteLIList = [SELECT Id, Quote.issyncing, Quote.OpportunityId FROM QuoteLineItem WHERE Quote.issyncing = True];\n        for(QuoteLineItem q:QuoteLIList) {\n            system.assertEquals(Opp1.Id, q.Quote.OpportunityId, 'the value of q.Quote.OpportunityId  value is not null');\n        }\n\n        if (QLI.Quote.isSyncing == True ) {\n            if (QLI.Product2id == OLI.Product2id) {\n                QLI.SyncCheck__c = 'check';\n                OLI.SyncCheck__c = QLI.SyncCheck__c;\n                system.assertEquals (OLI.product2Id, QLI.product2id);\n                system.assertEquals (OLI.SyncCheck__c, 'check' );                \n            }\n\n        }\n        Update QLI;               \n    }\n\n}\n\nHere my test class only provide the 53% only it's my knowledge in test class so please help me to get the full code coverage of my class and trigger. For answer's thanks in advance.\n\nA:\n\nthe answer is,\n@isTest\npublic class TestCustomSyncHandlerTrigger {\n    static testMethod void  UpdateCustomSyncHandler() {\n        Account acc1 = new Account();\n        acc1.Name = 'test account';\n        insert acc1;\n        system.debug('insert acc1 is success');\n\n        Opportunity Opp1 = new Opportunity();\n        Opp1.Name = 'testOpp';\n        Opp1.AccountId = acc1.Id;\n        Opp1.StageName = 'Closed Won';\n        Opp1.CloseDate = system.Today();\n        insert Opp1;        \n        system.debug('insert opp1 success');\n\n        Product2 Pro1 = new Product2();\n        Pro1.Name = 'SLA: Bronze';\n        pro1.isActive = True;\n        Insert pro1;\n        system.debug('insert pro1 is success');        \n\n        Pricebook2 pb = new pricebook2();\n        pb.Name = 'Standard Price Book 2009';\n        pb.description = 'Price Book 2009 Products';\n        pb.isActive = True;\n        insert pb;\n        system.debug('pb value is'+ pb.Id);\n        system.debug('insert pricebook2 is success');\n\n        Id pricebookId = Test.getStandardPricebookId();        \n\n        PricebookEntry StandardPriceBookEntry = new PricebookEntry();\n        StandardPriceBookEntry.Pricebook2Id = pricebookId;\n        StandardPriceBookEntry.Product2Id = pro1.Id;\n        StandardPriceBookEntry.UnitPrice = 10000;\n        StandardPriceBookEntry.IsActive =True;        \n        insert StandardPriceBookEntry;\n        system.debug('insert StandardPriceBookEntry');\n\n        PricebookEntry pbe = new PricebookEntry(pricebook2id=pb.id, product2id=pro1.id, unitprice=10000, isActive = True);\n        insert pbe;\n        system.debug('insert pbe is success');\n\n        Quote Quo1 = new Quote(); \n        Quo1.OpportunityId = Opp1.Id;\n        Quo1.Pricebook2Id = pb.Id;\n        Quo1.Name = 'test Quo1';      \n        insert Quo1;       \n        system.debug('insert Quo1 success');\n\n        QuoteLineItem QLI  = new QuoteLineItem();\n        QLI.Product2Id = pro1.Id;\n        QLI.QuoteId = Quo1.Id;\n        QLI.PricebookEntryId = Pbe.Id;\n        QLI.Quantity = 2;\n        QLI.UnitPrice = 150000.0; \n        insert QLI;    \n        system.debug('insert QLI is success');\n\n        List<QuoteLineItem> QuoteLIList = [SELECT Id, Quote.issyncing, Quote.OpportunityId FROM QuoteLineItem WHERE Quote.issyncing = True];\n        for(QuoteLineItem q:QuoteLIList) {\n            system.assertEquals(Opp1.Id, q.Quote.OpportunityId, 'the value of q.Quote.OpportunityId  value is not null');\n        }\n\n        Opp1.SyncedQuoteId = Quo1.Id;\n        Update Opp1;\n        QLI.SyncCheck__c = 'Check value';\n        Update QLI;              \n    }\n\n}\n\n"
}