{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4992",
    "text": "Q:\n\nAS3 - How to get a reference to the container of an aggregated object?\n\nSimple enough.\nIf I have a container class that holds a Sprite object, and I attach a touch listener to said Sprite, is there a reliable and cheap method of getting the object that contains the Sprite when it is touched? I realize I could just inherit the Sprite, but that is not what I want to do.\nFailing that, if I add the event listener to said Sprite object within the class that contains it, is there a way to dispatch an event that would allow me to get the reference to the container that holds the Sprite object that was touched?\nThanks for any help.\nReply to loxxxy:\nWhen I said \"held\", I meant in terms of aggregation. For example:\npublic class Container \n    {\n        [Embed(source = \"img1.jpg\")] private var img:Class;\n\n        private var sprite:Sprite;\n        private var bitmap:Bitmap;\n\n        public function Container() \n        {\n            bitmap = new img();\n            sprite = new Sprite();\n            sprite.addChild(bitmap);\n        }\n\n        public function GetSprite():Sprite\n        {\n            return sprite;\n        }\n\n    }\n\nWhich is perfectly legal code. What I wanted to do was, when the Sprite object is touched outside of the Container class, that I could access other properties within the Container class through said Sprite object. However, a solid workaround would be something like the following, I think:\npublic class Container extends InteractiveDisplayObject\n    {\n        [Embed(source = \"img1.jpg\")] private var img:Class;\n\n        private var bitmap:Bitmap;\n\n        public function Container() \n        {\n            bitmap = new img();\nthis.addChild(bitmap);\n\n        }\n    }\n\nThen, I could access the aggregate objects of the Container class by listening to touch events on the Container class, while making it fully extendable to any other DisplayObject class (TextField, Sprite, etc.).\nThere's a very specific reason I want to do this, I just don't feel it's relevant to the actual question. I'll try this approach when I get some time to test it out, and see how it goes. Thanks!\n\nA:\n\nYou don't really need to dispatch events just for this purpose. \nAdd the event listener to the container & you can get reference to both container & sprite. For eg:\ncontainer.addEventListener(MouseEvent.CLICK, container_touched, false, 0, true);\n\nfunction container_touched(e) { \n\n    trace(e.target.name);            // Output : sprite\n    trace(e.currentTarget.name);     // Output : container\n}\n\nEDIT : \nOr you could have rather exposed the sprite event to others by adding a function like :\npublic function registerCallback( callback:Function) {\n\n    var thisRef = this; \n\n    sprite.addEventListener(MouseEvent.CLICK, function(e) {\n\n         callback(thisRef);\n\n    },false, 0, true);    \n}\n\n"
}