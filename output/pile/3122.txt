{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3122",
    "text": "Q:\n\nRetrofit 2 API Can I use local file path or json string instead of url?\n\nHello I am working on an Android App which uses retrofit API getting response from server. Retrofit Automatically parse the json response and creates objects of POJO class. I am storing that json into sqlite and if internet is not connected call the json from sqllite, facing difficulty have to parse json manually.\nIs there any way I use retrofit library to parse json and make pojo from json string or file path?My code is here to fetch from url:\n@FormUrlEncoded\n@POST(\"getResponse\")\nObservable<UserResponse> getResponse(@Field(\"token\") String token);\n\nI want something like this if internet is not connected.\n@FromStringEncoded\nObservable<UserResponse> getResponseOffline(@Field(\"token\") String token);\n\nThanks.\n\nA:\n\nYou don't mentioned proposes. I use below solution for mocking server in app on very early stage of development when real server doesn't work yet. \nSo you can use interceptors in OkHttp. Like this:\nOkHttpClient.Builder builder = new OkHttpClient.Builder();       \nbuilder.addInterceptor(new MockClient(context));\n\nand MockClient looks like this:\npublic class MockClient implements Interceptor {\n\n    Context context;\n\n    public MockClient(Context context) {\n        this.context = context;\n    }\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n\n        HttpUrl url = chain.request().url();\n        //here determine what to do base on url.\n        //e.g.:\n        switch(url.encodedPath()) {\n           case \"some/path\" :\n            String response = readJsonFieleFromAssestOrAnyOtherStorage();\n            return new Response.Builder()\n                        .code(200)\n                        .message(response)\n                        .request(chain.request())\n                        .protocol(Protocol.HTTP_1_1)\n                                    .body(ResponseBody.create(MediaType.parse(\"application/json\"), response.getBytes()))\n                        .addHeader(\"content-type\", \"application/json\")\n                        .build();\n        }\n    }\n}\n\nA:\n\nSimply use Google's GSON Library that allows you to convert json to POJO and vice versa. Fetch json from sqlite and parse it using gson.\nGson gson=new Gson();\nUserResponse userResponse= gson.fromJson(jsonInStringFromDb,UserResponse.class);\n\nYou can also parse JSON from file using Gson.\nJSON to Java object, read it from a file.\nGson gson = new Gson();\nStaff staff = gson.fromJson(new FileReader(\"D:\\\\file.json\"), Staff.class);\n\n"
}