{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1331",
    "text": "Q:\n\nForce a browser's visibility setting to true\n\nI'm trying to set up some specs against a real (not headless) browser but some of the javascript on the target page only runs if the browser is visible (it doesn't need to be the active app). I've been perusing the W3C Page Visibility API docs and [MDN's] too but I can't see a way to manipulate the setting while running Watir.\nI know there's the option of running the spec on a headless machine but while I'm developing the specs it'd be handy to not have to switch back and forth between browser and terminal to avoid timeouts and failures. I've had a look for Chrome switches that might help and found this very helpful list but it doesn't appear to have the magic bullet either.\nI've also tried browser.execute_script('document.hidden = false'); but that had no effect.\nAny help or insight would be much appreciated.\n\nA:\n\nIt's possible to force this status with a Javascript injection via execute_script.\nTo simulate a visible document:\nObject.defineProperty(document, 'visibilityState', {value: 'visible', writable: true});\nObject.defineProperty(document, 'hidden', {value: false, writable: true});\ndocument.dispatchEvent(new Event(\"visibilitychange\"));\n\nTo simulate an hidden document:\nObject.defineProperty(document, 'visibilityState', {value: 'hidden', writable: true});\nObject.defineProperty(document, 'hidden', {value: true, writable: true});\ndocument.dispatchEvent(new Event(\"visibilitychange\"));\n\nNote that you'll have to run it again if the page is reloaded.\n\n"
}