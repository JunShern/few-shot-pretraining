{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 16 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6764",
    "text": "/*\n * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage sun.security.timestamp;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.X509Extension;\nimport sun.security.util.DerValue;\nimport sun.security.util.DerOutputStream;\nimport sun.security.util.ObjectIdentifier;\nimport sun.security.x509.AlgorithmId;\n\n/**\n * This class provides a timestamp request, as defined in\n * <a href=\"http://www.ietf.org/rfc/rfc3161.txt\">RFC 3161</a>.\n *\n * The TimeStampReq ASN.1 type has the following definition:\n * <pre>\n *\n *     TimeStampReq ::= SEQUENCE {\n *         version           INTEGER { v1(1) },\n *         messageImprint    MessageImprint\n *           -- a hash algorithm OID and the hash value of the data to be\n *           -- time-stamped.\n *         reqPolicy         TSAPolicyId    OPTIONAL,\n *         nonce             INTEGER        OPTIONAL,\n *         certReq           BOOLEAN        DEFAULT FALSE,\n *         extensions        [0] IMPLICIT Extensions OPTIONAL }\n *\n *     MessageImprint ::= SEQUENCE {\n *         hashAlgorithm     AlgorithmIdentifier,\n *         hashedMessage     OCTET STRING }\n *\n *     TSAPolicyId ::= OBJECT IDENTIFIER\n *\n * </pre>\n *\n * @since 1.5\n * @author Vincent Ryan\n * @see Timestamper\n */\n\npublic class TSRequest {\n\n    private int version = 1;\n\n    private AlgorithmId hashAlgorithmId = null;\n\n    private byte[] hashValue;\n\n    private String policyId = null;\n\n    private BigInteger nonce = null;\n\n    private boolean returnCertificate = false;\n\n    private X509Extension[] extensions = null;\n\n    /**\n     * Constructs a timestamp request for the supplied data.\n     *\n     * @param toBeTimeStamped  The data to be timestamped.\n     * @param messageDigest The MessageDigest of the hash algorithm to use.\n     * @throws NoSuchAlgorithmException if the hash algorithm is not supported\n     */\n    public TSRequest(String tSAPolicyID, byte[] toBeTimeStamped, MessageDigest messageDigest)\n        throws NoSuchAlgorithmException {\n\n        this.policyId = tSAPolicyID;\n        this.hashAlgorithmId = AlgorithmId.get(messageDigest.getAlgorithm());\n        this.hashValue = messageDigest.digest(toBeTimeStamped);\n    }\n\n    public byte[] getHashedMessage() {\n        return hashValue.clone();\n    }\n\n    /**\n     * Sets the Time-Stamp Protocol version.\n     *\n     * @param version The TSP version.\n     */\n    public void setVersion(int version) {\n        this.version = version;\n    }\n\n    /**\n     * Sets an object identifier for the Time-Stamp Protocol policy.\n     *\n     * @param policyId The policy object identifier.\n     */\n    public void setPolicyId(String policyId) {\n        this.policyId = policyId;\n    }\n\n    /**\n     * Sets a nonce.\n     * A nonce is a single-use random number.\n     *\n     * @param nonce The nonce value.\n     */\n    public void setNonce(BigInteger nonce) {\n        this.nonce = nonce;\n    }\n\n    /**\n     * Request that the TSA include its signing certificate in the response.\n     *\n     * @param returnCertificate True if the TSA should return its signing\n     *                          certificate. By default it is not returned.\n     */\n    public void requestCertificate(boolean returnCertificate) {\n        this.returnCertificate = returnCertificate;\n    }\n\n    /**\n     * Sets the Time-Stamp Protocol extensions.\n     *\n     * @param extensions The protocol extensions.\n     */\n    public void setExtensions(X509Extension[] extensions) {\n        this.extensions = extensions;\n    }\n\n    public byte[] encode() throws IOException {\n\n        DerOutputStream request = new DerOutputStream();\n\n        // encode version\n        request.putInteger(version);\n\n        // encode messageImprint\n        DerOutputStream messageImprint = new DerOutputStream();\n        hashAlgorithmId.encode(messageImprint);\n        messageImprint.putOctetString(hashValue);\n        request.write(DerValue.tag_Sequence, messageImprint);\n\n        // encode optional elements\n\n        if (policyId != null) {\n            request.putOID(ObjectIdentifier.of(policyId));\n        }\n        if (nonce != null) {\n            request.putInteger(nonce);\n        }\n        if (returnCertificate) {\n            request.putBoolean(true);\n        }\n\n        DerOutputStream out = new DerOutputStream();\n        out.write(DerValue.tag_Sequence, request);\n        return out.toByteArray();\n    }\n}\n"
}