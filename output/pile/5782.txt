{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 1 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['These are the only sources (0.195)']."
        }
    ],
    "doc_id": "5782",
    "text": "There are either too many possible answers, or good answers would be too long for this format. Please add details to narrow the answer set or to isolate an issue that can be answered in a few paragraphs.\nIf this question can be reworded to fit the rules in the help center, please edit the question.\n\nAs this is encryption mode unclear what view will have the ciphertext. From this article it is clear just where to get auth tag.\n\u2013\nuser100552Oct 13 '13 at 18:35\n\nI don't understand what you're asking... you understand the authentication part, but not the encryption? The encryption is based on counter mode (CTR). Directly from wikipedia: \"As the name suggests, GCM mode combines the well-known counter mode of encryption with the new Galois mode of authentication\".\n\u2013\nhunterOct 13 '13 at 23:04\n\n2 Answers\n2\n\nIn addition to information on the wiki, add some explanations and definitions contained in RFC 4106 \"The Use of Galois/Counter Mode (GCM)\" (AES-GCM) can help them better understand the working of the mode.\n\nThe GCM\n\nauthenticated encryption operation has four inputs: a secret key, an\ninitialization vector (IV), a plaintext, and an input for additional\nauthenticated data (AAD). It has two outputs, a ciphertext whose\nlength is identical to the plaintext, and an authentication tag. In\nthe following, we describe how the IV, plaintext, and AAD are formed\nfrom the ESP fields, and how the ESP packet is formed from the\nciphertext and authentication tag.\n\nESP also defines an IV. For clarity, we refer to the AES-GCM IV as a\nnonce in the context of AES-GCM-ESP. The same nonce and key\ncombination MUST NOT be used more than once.\n\nBecause reusing an nonce/key combination destroys the security\nguarantees of AES-GCM mode, it can be difficult to use this mode\nsecurely when using statically configured keys. For safety's sake,\nimplementations MUST use an automated key management system, such as\nthe Internet Key Exchange (IKE) [RFC2409], to ensure that this\nrequirement is met.\n\nESP Payload Data\n\nThe ESP Payload Data is comprised of an eight-octet initialization\nvector (IV), followed by the ciphertext. The payload field, as\ndefined in [RFC2406], along with the ICV associated with the payload.\n\nInitialization Vector (IV)\n\nThe AES-GCM-ESP IV field MUST be eight octets. For a given key, the\nIV MUST NOT repeat. The most natural way to implement this is with a\ncounter, but anything that guarantees uniqueness can be used, such as\na linear feedback shift register (LFSR). Note that the encrypter can\nuse any IV generation method that meets the uniqueness requirement,\nwithout coordinating with the decrypter.\n\nCiphertext\n\nThe plaintext input to AES-GCM is formed by concatenating the\nplaintext data described by the Next Header field with the Padding,\nthe Pad Length, and the Next Header field. The Ciphertext field\nconsists of the ciphertext output from the AES-GCM algorithm. The\nlength of the ciphertext is identical to that of the plaintext.\n\nImplementations that do not seek to hide the length of the plaintext\nSHOULD use the minimum amount of padding required, which will be less\nthan four octets.\n\nIntegrity Check Value (ICV)\n\nThe ICV consists solely of the AES-GCM Authentication Tag.\nImplementations MUST support a full-length 16-octet ICV, and MAY\nsupport 8 or 12 octet ICVs, and MUST NOT support other ICV lengths.\nAlthough ESP does not require that an ICV be present, AES-GCM-ESP\nintentionally does not allow a zero-length ICV. This is because GCM\nprovides no integrity protection whatsoever when used with a zero-\nlength Authentication Tag.\n\nPacket Expansion\n\nThe IV adds an additional eight octets to the packet, and the ICV\nadds an additional 8, 12, or 16 octets. These are the only sources\nof packet expansion, other than the 10-13 octets taken up by the ESP\nSPI, Sequence Number, Padding, Pad Length, and Next Header fields (if\nthe minimal amount of padding is used).\n\nFor more information you can contact to another RFC for examle 5647 which describe AES Galois Counter Mode for the Secure Shell Transport Layer Protocol. (AES-GCM in the TLS)\n\nWhile I appreciate the effort - copying and pasting large portions of an RFC is not really appropriate as an answer - and is not helpful to the community. But then again, neither is asking a question which could be answered by simply reading the RFC.\n\u2013\nhunterOct 13 '13 at 23:17\n\nThe best explanation is in Dan Bernstein's Poly1305 paper, where he provides references to the original works on Carter-Wegman authentication. AES-GCM works by viewing the message as a polynomial and evaluating it at a random point. The sole way to forge is to blindly chose a polynomial which is zero at that point, but you have no information to do so, since the tags are encrypted."
}