{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": true,
            "reason": "Text contains Markdown."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6281",
    "text": "# GeoFirestore for iOS \u2014 Realtime location queries with Firestore\n\nGeoFirestore is an open-source library for Swift that allows you to store and query a set of documents based on their geographic location.\n\nAt its heart, GeoFirestore simply stores locations with string keys. Its main benefit however, is the possibility of querying documents within a given geographic area - all in realtime.\n\nGeoFirestore uses the Firestore database for data storage, allowing query results to be updated in realtime as they change. GeoFirestore selectively loads only the data near certain locations, keeping your applications light and responsive, even with extremely large datasets.\n\nA compatible GeoFirestore client is also available for [Android](https://github.com/imperiumlabs/GeoFirestore-Android).\n\n### Integrating GeoFirestore with your data\n\nGeoFirestore is designed as a lightweight add-on to Firestore. However, to keep things simple, GeoFirestore stores data in its own format and its own location within your Firestore database. This allows your existing data format and security rules to remain unchanged and for you to add GeoFirestore as an easy solution for geo queries without modifying your existing data.\n\n### Example usage\n\nAssume you are building an app to rate bars, and you store all information for a bar (e.g. name, business hours and price range) at `collection(bars).document(bar-id)`. Later, you want to add the possibility for users to search for bars in their vicinity. This is where GeoFirestore comes in. You can store the location for each bar document using GeoFirestore. GeoFirestore then allows you to easily query which bar are nearby.\n\n## Example\n\nTo run the example project, clone the repo, and run `pod repo update` and `pod install` from the Example directory first.\n\n## Downloading GeoFirestore for iOS\n\nIf you're using [CocoaPods](https://cocoapods.org/) add the following to your Podfile:\n\n```\npod 'Geofirestore'\n```\nThen run the following in terminal:\n\n```\npod repo update\npod install\n```\n\n## Getting Started with Firestore\n\nGeoFirestore requires the Firestore database in order to store location data. You can [learn more about Firestore here](https://firebase.google.com/docs/firestore/).\n\n## Using GeoFirestore\n\n### GeoFirestore\n\nA `GeoFirestore` object is used to read and write geo location data to your Firestore database and to create queries. To create a new `GeoFirestore` instance you need to attach it to a Firestore collection reference:\n\n````swift\nimport Firebase\nimport Geofirestore\n\nlet geoFirestoreRef = Firestore.firestore().collection(\"my-collection\")\nlet geoFirestore = GeoFirestore(collectionRef: geoFirestoreRef)\n````\n\n#### Setting location data\n\nTo set the location of a document simply call the `setLocation` method:\n\n````swift\ngeoFirestore.setLocation(location: CLLocation(latitude: 37.7853889, longitude: -122.4056973), forDocumentWithID: \"que8B9fxxjcvbC81h32VRjeBSUW2\") { (error) in\n    if let error = error {\n        print(\"An error occured: \\(error)\")\n    } else {\n        print(\"Saved location successfully!\")\n    }\n}\n````\nAlternatively set the location using a `GeoPoint` :\n\n````swift\ngeoFirestore.setLocation(geopoint: GeoPoint(latitude: 37.7853889, longitude: -122.4056973), forDocumentWithID: \"que8B9fxxjcvbC81h32VRjeBSUW2\") { (error) in\n    if let error = error {\n        print(\"An error occured: \\(error)\")\n    } else {\n        print(\"Saved location successfully!\")\n    }\n}\n````\nTo remove a location and delete the location from your database simply call:\n\n````swift\ngeoFirestore.removeLocation(forDocumentWithID: \"que8B9fxxjcvbC81h32VRjeBSUW2\") \n````\n\n#### Retrieving a location\n\nRetrieving locations happens with callbacks. If the document is not present in GeoFirestore, the callback will be called with `nil`. If an error occurred, the callback is passed the error and the location will be `nil`.\n\n````swift\ngeoFirestore.getLocation(forDocumentWithID: \"que8B9fxxjcvbC81h32VRjeBSUW2\") { (location: CLLocation?, error) in\n    if let error = error {\n        print(\"An error occurred: \\(error)\")\n    } else if let location = location {\n        print(\"Location: [\\(location.coordinate.latitude), \\(location.coordinate.longitude)]\")\n    } else {\n        print(\"GeoFirestore does not contain a location for this document\")\n    }\n}\n````\n\nAlternatively get the location as a `GeoPoint` :\n\n````swift\ngeoFirestore.getLocation(forDocumentWithID: \"que8B9fxxjcvbC81h32VRjeBSUW2\") { (location: GeoPoint?, error) in\n    if let error = error {\n        print(\"An error occurred: \\(error)\")\n    } else if let location = location {\n        print(\"Location: [\\(location.latitude), \\(location.longitude)]\")\n    } else {\n        print(\"GeoFirestore does not contain a location for this document\")\n    }\n}\n````\n### GeoFirestore Queries\n\nGeoFirestore allows you to query all documents within a geographic area using `GFSQuery`\nobjects. As the locations for documents change, the query is updated in realtime and fires events\nletting you know if any relevant documents have moved. `GFSQuery` parameters can be updated\nlater to change the size and center of the queried area.\n\n````swift\n// Query using CLLocation\nlet center = CLLocation(latitude: 37.7832889, longitude: -122.4056973)\n// Query locations at [37.7832889, -122.4056973] with a radius of 600 meters\nvar circleQuery = geoFirestore.query(withCenter: center, radius: 0.6)\n\n// Query using GeoPoint\nlet center2 = GeoPoint(latitude: 37.7832889, longitude: -122.4056973)\n// Query locations at [37.7832889, -122.4056973] with a radius of 600 meters\nvar circleQuery2 = geoFirestore.query(withCenter: center2, radius: 0.6)\n\n// Query location by region\nlet span = MKCoordinateSpanMake(0.001, 0.001)\nlet region = MKCoordinateRegionMake(center.coordinate, span)\nvar regionQuery = geoFirestore.query(inRegion: region)\n````\n#### Receiving events for geo queries\n\nThere are three kinds of events that can occur with a geo query:\n\n1. **Document Entered**: The location of a document now matches the query criteria.\n2. **Document Exited**: The location of a document no longer matches the query criteria.\n3. **Document Moved**: The location of a document changed but the location still matches the query criteria.\n\nDocument entered events will be fired for all documents initially matching the query as well as any time\nafterwards that a document enters the query. Document moved and document exited events are guaranteed to be preceded by a document entered event.\n\nTo observe events for a geo query you can register a callback with `observe:with:`:\n\n````swift\nlet queryHandle = query.observe(.documentEntered, with: { (key, location) in\n    print(\"The document with documentID '\\(key)' entered the search area and is at location '\\(location)'\")\n})\n````\n\nTo cancel one or all callbacks for a geo query, call\n`removeObserver:withHandle:` or `removeAllObservers:`, respectively.\n\n#### Waiting for queries to be \"ready\"\n\nSometimes you want to know when the data for all the initial documents has been\nloaded from the server and the corresponding events for those documents have been\nfired. For example, you may want to hide a loading animation after your data has\nfully loaded. `GFSQuery` offers a method to listen for these ready events:\n\n````swift\nquery.observeReady {\n    print(\"All initial data has been loaded and events have been fired!\")\n}\n````\nNote that locations might change while initially loading the data and document moved and document\nexited events might therefore still occur before the ready event was fired.\n\nWhen the query criteria is updated, the existing locations are re-queried and the\nready event is fired again once all events for the updated query have been\nfired. This includes document exited events for documents that no longer match the query.\n\n#### Updating the query criteria\n\nTo update the query criteria you can use the `center` and `radius` properties on\nthe `GFSQuery` object. Document exited and document entered events will be fired for\ndocuments moving in and out of the old and new search area, respectively. No document moved\nevents will be fired as a result of the query criteria changing; however, document moved\nevents might occur independently.\n\n#### Convenient extensions \n\nTo make it easier to convert between a `GeoPoint`  and a `CLLocation` we have provided some useful extensions: \n\n````swift\nlet cllocation = CLLocation(latitude: 37.7832889, longitude: -122.4056973)\nlet geopoint = GeoPoint(latitude: 37.7832889, longitude: -122.4056973)\n\n// Converting from CLLocation to Geopoint\nlet loc1: GeoPoint = cllocation.geopointValue()\nlet loc2: GeoPoint = GeoPoint.geopointWithLocation(location: cllocation)\n\n// Converting from Geopoint to CLLocation\nlet loc3: CLLocation = geopoint.locationValue()\nlet loc4: CLLocation = CLLocation.locationWithGeopoint(geopoint: geopoint)\n````\n\n## API Reference & Documentation\n\nFull API reference and documentation is available [here](http://imperiumlabs.org/GeoFirestore-iOS/)\n\n## License\n\nGeoFirestore is available under the MIT license. See the LICENSE file for more info.\n\nCopyright (c) 2018 Imperium Labs\n\n\n"
}