{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6013",
    "text": "Q:\n\nWhat exactly does \"import *\" import?\n\nIn Python, what exactly does import * import? Does it import __init__.py found in the containing folder?\nFor example, is it necessary to declare from project.model import __init__, or is from project.model import * sufficient?\n\nA:\n\nThe \"advantage\" of from xyz import * as opposed to other forms of import is that it imports everything (well, almost... [see (a) below] everything) from the designated module under the current module.  This allows using the various objects (variables, classes, methods...) from the imported module without prefixing them with the module's name.  For example\n>>> from math import *\n>>>pi\n3.141592653589793\n>>>sin(pi/2)\n>>>1.0\n\nThis practice (of importing * into the current namespace) is however discouraged because it\n\nprovides the opportunity for namespace collisions  (say if you had a variable name pi prior to the import)\nmay be inefficient, if the number of objects imported is big\ndoesn't explicitly document the origin of the variable/method/class  (it is nice to have this \"self documentation\" of the program for future visit into the code)\n\nTypically we therefore limit this import * practice to ad-hoc tests and the like.  As pointed out by @Denilson-S\u00e1-Maia, some libraries such as (e.g. pygame) have a sub-module where all the most commonly used constants and functions are defined and such sub-modules are effectively designed to be imported with import *.  Other than with these special sub-modules, it is otherwise preferable to ...:\nexplicitly import a few objects only\n>>>from math import pi\n>>>pi\n>>>3.141592653589793\n>>> sin(pi/2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined\n\nor import the module under its own namespace (or an alias thereof, in particular if this is a long name, and the program references its objects many times)\n  >>>import math\n  >>>math.pi\n  >>>3.141592653589793\n  etc..\n\n  >>>import math as m  #bad example math being so short and standard...\n  >>>m.pi\n  >>>3.141592653589793\n  etc..\n\nSee the Python documentation on this topic\n(a) Specifically, what gets imported with from xyz import * ? \n  if xyz module defines an __all__ variable, it will import all the names defined in this sequence, otherwise it will import all names, except these which start with an underscore.\nNote Many libraries have sub-modules.  For example the standard library urllib includes sub-modules like urllib.request, urllib.errors, urllib.response etc.  A common point of confusion is that\nfrom urllib import *\nwould import all these sub-modules. That is NOT the case: one needs to explicitly imports these separately with, say, from urllib.request import * etc.  This incidentally is not specific to import *,  plain import will not import sub-modules either (but of course, the * which is often a shorthand for \"everything\" may mislead people in thinking that all sub-modules and everything else would be imported). \n\nA:\n\nIt import (into the current namespace) whatever names the module (or package) lists in its __all__ attribute -- missing such an attribute, all names that don't start with _.\nIt's mostly intended as a handy shortcut for use only in interactive interpreter sessions: as other answers suggest, don't use it in a program.\nMy recommendation, per Google's Python style guide, is to only ever import modules, not classes or functions (or other names) from within modules.  Strictly following this makes for clarity and precision, and avoids subtle traps that may come when you import \"stuff from within a module\".\nImporting a package (or anything from inside it) intrinsically loads and executes the package's __init__.py -- that file defines the body of the package.  However, it does not bind the name __init__ in your current namespace (so in this sense it doesn't import that name).\n\nA:\n\nYes, it does. It imports everything (that is not a private variable, i.e.: variables whose names start with _ or __), and you should try not to use it according to \"Properly importing modules in Python\" to avoid polluting the local namespace.\nIt is enough, but generally you should either do import project.model, which already imports __init__.py, per \"Understanding python imports\", but can get too wordy if you use it too much, or import project.model as pm or import project.model as model to save a few keystrokes later on when you use it.\nFollow Alex's advice in \"What exactly does \"import *\" import?\"\n\n"
}