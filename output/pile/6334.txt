{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 6 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6334",
    "text": "/* webymsg.c\n * Web Messenger Yahoo!\n * With and without HTTP transport\n *\n * $Id:  $\n *\n * Xplico - Internet Traffic Decoder\n * By Gianluca Costa <g.costa@xplico.org>\n * Copyright 2013 Gianluca Costa. Web: www.xplico.org\n *\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n */\n\n#include <pcap.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <stdio.h>\n\n#include \"proto.h\"\n#include \"dmemory.h\"\n#include \"etypes.h\"\n#include \"log.h\"\n#include \"pei.h\"\n#include \"http.h\"\n#include \"webymsg.h\"\n\nstatic int prot_id;\nstatic int pei_url_id;\nstatic int pei_client_id;\nstatic int pei_host_id;\nstatic int pei_req_header_id;\nstatic int pei_req_body_id;\nstatic int pei_res_header_id;\nstatic int pei_res_body_id;\n\nstatic PktDissector HttpPktDis;  /* this functions create the http pei for all http packets */\n\n\nstatic int WebMsnYahooPei(packet* pkt)\n{\n    http_msg *msg;\n    pei *ppei;\n    pei_component *cmpn;\n    \n    ppei = NULL;\n\n    /* display info */\n    msg = (http_msg *)pkt->data;\n\n    /* pei */\n    PeiNew(&ppei, prot_id);\n    PeiCapTime(ppei, pkt->cap_sec);\n    PeiMarker(ppei, pkt->serial);\n    PeiStackFlow(ppei, pkt->stk);\n    /*   url */\n    PeiNewComponent(&cmpn, pei_url_id);\n    PeiCompCapTime(cmpn, msg->start_cap);\n    PeiCompCapEndTime(cmpn, msg->end_cap);\n    PeiCompAddStingBuff(cmpn, msg->uri);\n    PeiAddComponent(ppei, cmpn);\n    /*   clent */\n    PeiNewComponent(&cmpn, pei_client_id);\n    PeiCompCapTime(cmpn, msg->start_cap);\n    PeiCompCapEndTime(cmpn, msg->end_cap);\n    PeiCompAddStingBuff(cmpn, msg->client);\n    PeiAddComponent(ppei, cmpn);\n    /*   host */\n    PeiNewComponent(&cmpn, pei_host_id);\n    PeiCompCapTime(cmpn, msg->start_cap);\n    PeiCompCapEndTime(cmpn, msg->end_cap);\n    PeiCompAddStingBuff(cmpn, msg->host);\n    PeiAddComponent(ppei, cmpn);\n    /*   req hdr */\n    if (msg->req_hdr_file) {\n        PeiNewComponent(&cmpn, pei_req_header_id);\n        PeiCompCapTime(cmpn, msg->start_cap);\n        PeiCompCapEndTime(cmpn, msg->end_cap);\n        PeiAddComponent(ppei, cmpn);\n        PeiCompAddFile(cmpn, NULL, msg->req_hdr_file, msg->req_hdr_size);\n        if (msg->error && msg->req_body_size == 0 && msg->res_hdr_size == 0) {\n            PeiCompError(cmpn, ELMT_ER_PARTIAL);\n        }\n    }\n    /*   req body */\n    if (msg->req_body_size) {\n        PeiNewComponent(&cmpn, pei_req_body_id);\n        PeiCompCapTime(cmpn, msg->start_cap);\n        PeiCompCapEndTime(cmpn, msg->end_cap);\n        PeiAddComponent(ppei, cmpn);\n        PeiCompAddFile(cmpn, NULL, msg->req_body_file, msg->req_body_size);\n        if (msg->error && msg->res_hdr_size == 0) {\n            PeiCompError(cmpn, ELMT_ER_PARTIAL);\n        }\n    }\n    /*   res hdr */\n    if (msg->res_hdr_size) {\n        PeiNewComponent(&cmpn, pei_res_header_id);\n        PeiCompCapTime(cmpn, msg->start_cap);\n        PeiCompCapEndTime(cmpn, msg->end_cap);\n        PeiAddComponent(ppei, cmpn);\n        PeiCompAddFile(cmpn, NULL, msg->res_hdr_file, msg->res_hdr_size);\n        if (msg->error && msg->res_body_size == 0) {\n            PeiCompError(cmpn, ELMT_ER_PARTIAL);\n        }\n    }\n    /*   res body */\n    if (msg->res_body_size) {\n        PeiNewComponent(&cmpn, pei_res_body_id);\n        PeiCompCapTime(cmpn, msg->start_cap);\n        PeiCompCapEndTime(cmpn, msg->end_cap);\n        PeiAddComponent(ppei, cmpn);\n        PeiCompAddFile(cmpn, NULL, msg->res_body_file, msg->res_body_size);\n        if (msg->error == 2) {\n            PeiCompError(cmpn, ELMT_ER_HOLE);\n        }\n        else if (msg->error != 0) {\n            PeiCompError(cmpn, ELMT_ER_PARTIAL);\n        }\n    }\n    \n    /* insert pei */\n    PeiIns(ppei);\n\n    return 0;\n}\n\n\nstatic packet* WebMsnYahooDissector(packet *pkt)\n{\n    http_msg *msg;\n    bool ins;\n\n    /* display info */\n    msg = (http_msg *)pkt->data;\n    ins = FALSE;\n\n#ifdef XPL_CHECK_CODE\n    if (msg->serial == 0) {\n        LogPrintf(LV_FATAL, \"WebMsnYahoo serial error\");\n        exit(-1);\n    }\n#endif\n    if (msg->uri != NULL) {\n        /* yahoo! web mail */\n        if (strstr(msg->uri, \"&sid=\") != NULL) {\n            if (strstr(msg->uri, \"/pushchannel/\") != NULL || strstr(msg->uri, \"?action=send-message&\") != NULL) {\n                /* send to manipulator */\n                WebMsnYahooPei(pkt);\n                ins = TRUE;\n            }\n        }\n    }\n    \n    if (ins == FALSE && HttpPktDis != NULL) {\n        /* http pei generation and insertion */\n        HttpPktDis(pkt);\n    }\n    else {\n        /* free memory */\n        HttpMsgFree(msg);\n        PktFree(pkt);\n    }\n\n    return NULL;\n}\n\n\nint DissecRegist(const char *file_cfg)\n{\n    proto_dep dep;\n    pei_cmpt peic;\n\n    memset(&dep, 0, sizeof(proto_dep));\n    memset(&peic, 0, sizeof(pei_cmpt));\n\n    /* protocol name */\n    ProtName(\"Yahoo! Web Messenger\", \"webymsg\");\n\n    /* http dependence */\n    dep.name = \"http\";\n    dep.attr = \"http.host\";\n    dep.type = FT_STRING;\n    dep.op = FT_OP_REX;\n    dep.val.str = DMemMalloc(strlen(WMSNHOST_NAME_YAHOO_REX_1)+1);\n    strcpy(dep.val.str, WMSNHOST_NAME_YAHOO_REX_1);\n    ProtDep(&dep);\n    \n    dep.val.str = DMemMalloc(strlen(WMSNHOST_NAME_YAHOO_REX_2)+1);\n    strcpy(dep.val.str, WMSNHOST_NAME_YAHOO_REX_2);\n    ProtDep(&dep);\n    \n\n    /* PEI components */\n    peic.abbrev = \"url\";\n    peic.desc = \"Uniform Resource Locator\";\n    ProtPeiComponent(&peic);\n\n    peic.abbrev = \"client\";\n    peic.desc = \"Client\";\n    ProtPeiComponent(&peic);\n\n    peic.abbrev = \"host\";\n    peic.desc = \"Host\";\n    ProtPeiComponent(&peic);\n\n    peic.abbrev = \"req.header\";\n    peic.desc = \"Request header\";\n    ProtPeiComponent(&peic);\n\n    peic.abbrev = \"req.body\";\n    peic.desc = \"Request body\";\n    ProtPeiComponent(&peic);\n\n    peic.abbrev = \"res.header\";\n    peic.desc = \"Response header\";\n    ProtPeiComponent(&peic);\n\n    peic.abbrev = \"res.body\";\n    peic.desc = \"Response body\";\n    ProtPeiComponent(&peic);\n    \n    /* dissectors registration */\n    ProtDissectors(WebMsnYahooDissector, NULL, NULL, NULL);\n\n    return 0;\n}\n\n\nint DissectInit(void)\n{\n    int http_id;\n\n    prot_id = ProtId(\"webymsg\");\n\n    /* Http pei generator */\n    HttpPktDis = NULL;\n    http_id = ProtId(\"http\");\n    if (http_id != -1) {\n        HttpPktDis = ProtPktDefaultDis(http_id);\n    }\n\n    /* pei id */\n    pei_url_id = ProtPeiComptId(prot_id, \"url\");\n    pei_client_id = ProtPeiComptId(prot_id, \"client\");\n    pei_host_id = ProtPeiComptId(prot_id, \"host\");\n    pei_req_header_id = ProtPeiComptId(prot_id, \"req.header\");\n    pei_req_body_id = ProtPeiComptId(prot_id, \"req.body\");\n    pei_res_header_id = ProtPeiComptId(prot_id, \"res.header\");\n    pei_res_body_id = ProtPeiComptId(prot_id, \"res.body\");\n    \n    return 0;\n}\n"
}