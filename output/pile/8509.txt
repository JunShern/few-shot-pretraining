{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": true,
            "reason": "Text contains SAT."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 2 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8509",
    "text": "/*\n * Intel Sunrisepoint PCH pinctrl/GPIO driver\n *\n * Copyright (C) 2015, Intel Corporation\n * Authors: Mathias Nyman <mathias.nyman@linux.intel.com>\n *          Mika Westerberg <mika.westerberg@linux.intel.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n\n#include <linux/acpi.h>\n#include <linux/module.h>\n#include <linux/platform_device.h>\n#include <linux/pm.h>\n#include <linux/pinctrl/pinctrl.h>\n\n#include \"pinctrl-intel.h\"\n\n#define SPT_PAD_OWN\t0x020\n#define SPT_PADCFGLOCK\t0x0a0\n#define SPT_HOSTSW_OWN\t0x0d0\n#define SPT_GPI_IE\t0x120\n\n#define SPT_COMMUNITY(b, s, e)\t\t\t\t\\\n\t{\t\t\t\t\t\t\\\n\t\t.barno = (b),\t\t\t\t\\\n\t\t.padown_offset = SPT_PAD_OWN,\t\t\\\n\t\t.padcfglock_offset = SPT_PADCFGLOCK,\t\\\n\t\t.hostown_offset = SPT_HOSTSW_OWN,\t\\\n\t\t.ie_offset = SPT_GPI_IE,\t\t\\\n\t\t.gpp_size = 24,\t\t\t\t\\\n\t\t.pin_base = (s),\t\t\t\\\n\t\t.npins = ((e) - (s) + 1),\t\t\\\n\t}\n\n/* Sunrisepoint-LP */\nstatic const struct pinctrl_pin_desc sptlp_pins[] = {\n\t/* GPP_A */\n\tPINCTRL_PIN(0, \"RCINB\"),\n\tPINCTRL_PIN(1, \"LAD_0\"),\n\tPINCTRL_PIN(2, \"LAD_1\"),\n\tPINCTRL_PIN(3, \"LAD_2\"),\n\tPINCTRL_PIN(4, \"LAD_3\"),\n\tPINCTRL_PIN(5, \"LFRAMEB\"),\n\tPINCTRL_PIN(6, \"SERIQ\"),\n\tPINCTRL_PIN(7, \"PIRQAB\"),\n\tPINCTRL_PIN(8, \"CLKRUNB\"),\n\tPINCTRL_PIN(9, \"CLKOUT_LPC_0\"),\n\tPINCTRL_PIN(10, \"CLKOUT_LPC_1\"),\n\tPINCTRL_PIN(11, \"PMEB\"),\n\tPINCTRL_PIN(12, \"BM_BUSYB\"),\n\tPINCTRL_PIN(13, \"SUSWARNB_SUS_PWRDNACK\"),\n\tPINCTRL_PIN(14, \"SUS_STATB\"),\n\tPINCTRL_PIN(15, \"SUSACKB\"),\n\tPINCTRL_PIN(16, \"SD_1P8_SEL\"),\n\tPINCTRL_PIN(17, \"SD_PWR_EN_B\"),\n\tPINCTRL_PIN(18, \"ISH_GP_0\"),\n\tPINCTRL_PIN(19, \"ISH_GP_1\"),\n\tPINCTRL_PIN(20, \"ISH_GP_2\"),\n\tPINCTRL_PIN(21, \"ISH_GP_3\"),\n\tPINCTRL_PIN(22, \"ISH_GP_4\"),\n\tPINCTRL_PIN(23, \"ISH_GP_5\"),\n\t/* GPP_B */\n\tPINCTRL_PIN(24, \"CORE_VID_0\"),\n\tPINCTRL_PIN(25, \"CORE_VID_1\"),\n\tPINCTRL_PIN(26, \"VRALERTB\"),\n\tPINCTRL_PIN(27, \"CPU_GP_2\"),\n\tPINCTRL_PIN(28, \"CPU_GP_3\"),\n\tPINCTRL_PIN(29, \"SRCCLKREQB_0\"),\n\tPINCTRL_PIN(30, \"SRCCLKREQB_1\"),\n\tPINCTRL_PIN(31, \"SRCCLKREQB_2\"),\n\tPINCTRL_PIN(32, \"SRCCLKREQB_3\"),\n\tPINCTRL_PIN(33, \"SRCCLKREQB_4\"),\n\tPINCTRL_PIN(34, \"SRCCLKREQB_5\"),\n\tPINCTRL_PIN(35, \"EXT_PWR_GATEB\"),\n\tPINCTRL_PIN(36, \"SLP_S0B\"),\n\tPINCTRL_PIN(37, \"PLTRSTB\"),\n\tPINCTRL_PIN(38, \"SPKR\"),\n\tPINCTRL_PIN(39, \"GSPI0_CSB\"),\n\tPINCTRL_PIN(40, \"GSPI0_CLK\"),\n\tPINCTRL_PIN(41, \"GSPI0_MISO\"),\n\tPINCTRL_PIN(42, \"GSPI0_MOSI\"),\n\tPINCTRL_PIN(43, \"GSPI1_CSB\"),\n\tPINCTRL_PIN(44, \"GSPI1_CLK\"),\n\tPINCTRL_PIN(45, \"GSPI1_MISO\"),\n\tPINCTRL_PIN(46, \"GSPI1_MOSI\"),\n\tPINCTRL_PIN(47, \"SML1ALERTB\"),\n\t/* GPP_C */\n\tPINCTRL_PIN(48, \"SMBCLK\"),\n\tPINCTRL_PIN(49, \"SMBDATA\"),\n\tPINCTRL_PIN(50, \"SMBALERTB\"),\n\tPINCTRL_PIN(51, \"SML0CLK\"),\n\tPINCTRL_PIN(52, \"SML0DATA\"),\n\tPINCTRL_PIN(53, \"SML0ALERTB\"),\n\tPINCTRL_PIN(54, \"SML1CLK\"),\n\tPINCTRL_PIN(55, \"SML1DATA\"),\n\tPINCTRL_PIN(56, \"UART0_RXD\"),\n\tPINCTRL_PIN(57, \"UART0_TXD\"),\n\tPINCTRL_PIN(58, \"UART0_RTSB\"),\n\tPINCTRL_PIN(59, \"UART0_CTSB\"),\n\tPINCTRL_PIN(60, \"UART1_RXD\"),\n\tPINCTRL_PIN(61, \"UART1_TXD\"),\n\tPINCTRL_PIN(62, \"UART1_RTSB\"),\n\tPINCTRL_PIN(63, \"UART1_CTSB\"),\n\tPINCTRL_PIN(64, \"I2C0_SDA\"),\n\tPINCTRL_PIN(65, \"I2C0_SCL\"),\n\tPINCTRL_PIN(66, \"I2C1_SDA\"),\n\tPINCTRL_PIN(67, \"I2C1_SCL\"),\n\tPINCTRL_PIN(68, \"UART2_RXD\"),\n\tPINCTRL_PIN(69, \"UART2_TXD\"),\n\tPINCTRL_PIN(70, \"UART2_RTSB\"),\n\tPINCTRL_PIN(71, \"UART2_CTSB\"),\n\t/* GPP_D */\n\tPINCTRL_PIN(72, \"SPI1_CSB\"),\n\tPINCTRL_PIN(73, \"SPI1_CLK\"),\n\tPINCTRL_PIN(74, \"SPI1_MISO_IO_1\"),\n\tPINCTRL_PIN(75, \"SPI1_MOSI_IO_0\"),\n\tPINCTRL_PIN(76, \"FLASHTRIG\"),\n\tPINCTRL_PIN(77, \"ISH_I2C0_SDA\"),\n\tPINCTRL_PIN(78, \"ISH_I2C0_SCL\"),\n\tPINCTRL_PIN(79, \"ISH_I2C1_SDA\"),\n\tPINCTRL_PIN(80, \"ISH_I2C1_SCL\"),\n\tPINCTRL_PIN(81, \"ISH_SPI_CSB\"),\n\tPINCTRL_PIN(82, \"ISH_SPI_CLK\"),\n\tPINCTRL_PIN(83, \"ISH_SPI_MISO\"),\n\tPINCTRL_PIN(84, \"ISH_SPI_MOSI\"),\n\tPINCTRL_PIN(85, \"ISH_UART0_RXD\"),\n\tPINCTRL_PIN(86, \"ISH_UART0_TXD\"),\n\tPINCTRL_PIN(87, \"ISH_UART0_RTSB\"),\n\tPINCTRL_PIN(88, \"ISH_UART0_CTSB\"),\n\tPINCTRL_PIN(89, \"DMIC_CLK_1\"),\n\tPINCTRL_PIN(90, \"DMIC_DATA_1\"),\n\tPINCTRL_PIN(91, \"DMIC_CLK_0\"),\n\tPINCTRL_PIN(92, \"DMIC_DATA_0\"),\n\tPINCTRL_PIN(93, \"SPI1_IO_2\"),\n\tPINCTRL_PIN(94, \"SPI1_IO_3\"),\n\tPINCTRL_PIN(95, \"SSP_MCLK\"),\n\t/* GPP_E */\n\tPINCTRL_PIN(96, \"SATAXPCIE_0\"),\n\tPINCTRL_PIN(97, \"SATAXPCIE_1\"),\n\tPINCTRL_PIN(98, \"SATAXPCIE_2\"),\n\tPINCTRL_PIN(99, \"CPU_GP_0\"),\n\tPINCTRL_PIN(100, \"SATA_DEVSLP_0\"),\n\tPINCTRL_PIN(101, \"SATA_DEVSLP_1\"),\n\tPINCTRL_PIN(102, \"SATA_DEVSLP_2\"),\n\tPINCTRL_PIN(103, \"CPU_GP_1\"),\n\tPINCTRL_PIN(104, \"SATA_LEDB\"),\n\tPINCTRL_PIN(105, \"USB2_OCB_0\"),\n\tPINCTRL_PIN(106, \"USB2_OCB_1\"),\n\tPINCTRL_PIN(107, \"USB2_OCB_2\"),\n\tPINCTRL_PIN(108, \"USB2_OCB_3\"),\n\tPINCTRL_PIN(109, \"DDSP_HPD_0\"),\n\tPINCTRL_PIN(110, \"DDSP_HPD_1\"),\n\tPINCTRL_PIN(111, \"DDSP_HPD_2\"),\n\tPINCTRL_PIN(112, \"DDSP_HPD_3\"),\n\tPINCTRL_PIN(113, \"EDP_HPD\"),\n\tPINCTRL_PIN(114, \"DDPB_CTRLCLK\"),\n\tPINCTRL_PIN(115, \"DDPB_CTRLDATA\"),\n\tPINCTRL_PIN(116, \"DDPC_CTRLCLK\"),\n\tPINCTRL_PIN(117, \"DDPC_CTRLDATA\"),\n\tPINCTRL_PIN(118, \"DDPD_CTRLCLK\"),\n\tPINCTRL_PIN(119, \"DDPD_CTRLDATA\"),\n\t/* GPP_F */\n\tPINCTRL_PIN(120, \"SSP2_SCLK\"),\n\tPINCTRL_PIN(121, \"SSP2_SFRM\"),\n\tPINCTRL_PIN(122, \"SSP2_TXD\"),\n\tPINCTRL_PIN(123, \"SSP2_RXD\"),\n\tPINCTRL_PIN(124, \"I2C2_SDA\"),\n\tPINCTRL_PIN(125, \"I2C2_SCL\"),\n\tPINCTRL_PIN(126, \"I2C3_SDA\"),\n\tPINCTRL_PIN(127, \"I2C3_SCL\"),\n\tPINCTRL_PIN(128, \"I2C4_SDA\"),\n\tPINCTRL_PIN(129, \"I2C4_SCL\"),\n\tPINCTRL_PIN(130, \"I2C5_SDA\"),\n\tPINCTRL_PIN(131, \"I2C5_SCL\"),\n\tPINCTRL_PIN(132, \"EMMC_CMD\"),\n\tPINCTRL_PIN(133, \"EMMC_DATA_0\"),\n\tPINCTRL_PIN(134, \"EMMC_DATA_1\"),\n\tPINCTRL_PIN(135, \"EMMC_DATA_2\"),\n\tPINCTRL_PIN(136, \"EMMC_DATA_3\"),\n\tPINCTRL_PIN(137, \"EMMC_DATA_4\"),\n\tPINCTRL_PIN(138, \"EMMC_DATA_5\"),\n\tPINCTRL_PIN(139, \"EMMC_DATA_6\"),\n\tPINCTRL_PIN(140, \"EMMC_DATA_7\"),\n\tPINCTRL_PIN(141, \"EMMC_RCLK\"),\n\tPINCTRL_PIN(142, \"EMMC_CLK\"),\n\tPINCTRL_PIN(143, \"GPP_F_23\"),\n\t/* GPP_G */\n\tPINCTRL_PIN(144, \"SD_CMD\"),\n\tPINCTRL_PIN(145, \"SD_DATA_0\"),\n\tPINCTRL_PIN(146, \"SD_DATA_1\"),\n\tPINCTRL_PIN(147, \"SD_DATA_2\"),\n\tPINCTRL_PIN(148, \"SD_DATA_3\"),\n\tPINCTRL_PIN(149, \"SD_CDB\"),\n\tPINCTRL_PIN(150, \"SD_CLK\"),\n\tPINCTRL_PIN(151, \"SD_WP\"),\n};\n\nstatic const unsigned sptlp_spi0_pins[] = { 39, 40, 41, 42 };\nstatic const unsigned sptlp_spi1_pins[] = { 43, 44, 45, 46 };\nstatic const unsigned sptlp_uart0_pins[] = { 56, 57, 58, 59 };\nstatic const unsigned sptlp_uart1_pins[] = { 60, 61, 62, 63 };\nstatic const unsigned sptlp_uart2_pins[] = { 68, 69, 71, 71 };\nstatic const unsigned sptlp_i2c0_pins[] = { 64, 65 };\nstatic const unsigned sptlp_i2c1_pins[] = { 66, 67 };\nstatic const unsigned sptlp_i2c2_pins[] = { 124, 125 };\nstatic const unsigned sptlp_i2c3_pins[] = { 126, 127 };\nstatic const unsigned sptlp_i2c4_pins[] = { 128, 129 };\nstatic const unsigned sptlp_i2c4b_pins[] = { 85, 86 };\nstatic const unsigned sptlp_i2c5_pins[] = { 130, 131 };\nstatic const unsigned sptlp_ssp2_pins[] = { 120, 121, 122, 123 };\nstatic const unsigned sptlp_emmc_pins[] = {\n\t132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n};\nstatic const unsigned sptlp_sd_pins[] = {\n\t144, 145, 146, 147, 148, 149, 150, 151,\n};\n\nstatic const struct intel_pingroup sptlp_groups[] = {\n\tPIN_GROUP(\"spi0_grp\", sptlp_spi0_pins, 1),\n\tPIN_GROUP(\"spi1_grp\", sptlp_spi1_pins, 1),\n\tPIN_GROUP(\"uart0_grp\", sptlp_uart0_pins, 1),\n\tPIN_GROUP(\"uart1_grp\", sptlp_uart1_pins, 1),\n\tPIN_GROUP(\"uart2_grp\", sptlp_uart2_pins, 1),\n\tPIN_GROUP(\"i2c0_grp\", sptlp_i2c0_pins, 1),\n\tPIN_GROUP(\"i2c1_grp\", sptlp_i2c1_pins, 1),\n\tPIN_GROUP(\"i2c2_grp\", sptlp_i2c2_pins, 1),\n\tPIN_GROUP(\"i2c3_grp\", sptlp_i2c3_pins, 1),\n\tPIN_GROUP(\"i2c4_grp\", sptlp_i2c4_pins, 1),\n\tPIN_GROUP(\"i2c4b_grp\", sptlp_i2c4b_pins, 3),\n\tPIN_GROUP(\"i2c5_grp\", sptlp_i2c5_pins, 1),\n\tPIN_GROUP(\"ssp2_grp\", sptlp_ssp2_pins, 1),\n\tPIN_GROUP(\"emmc_grp\", sptlp_emmc_pins, 1),\n\tPIN_GROUP(\"sd_grp\", sptlp_sd_pins, 1),\n};\n\nstatic const char * const sptlp_spi0_groups[] = { \"spi0_grp\" };\nstatic const char * const sptlp_spi1_groups[] = { \"spi0_grp\" };\nstatic const char * const sptlp_uart0_groups[] = { \"uart0_grp\" };\nstatic const char * const sptlp_uart1_groups[] = { \"uart1_grp\" };\nstatic const char * const sptlp_uart2_groups[] = { \"uart2_grp\" };\nstatic const char * const sptlp_i2c0_groups[] = { \"i2c0_grp\" };\nstatic const char * const sptlp_i2c1_groups[] = { \"i2c1_grp\" };\nstatic const char * const sptlp_i2c2_groups[] = { \"i2c2_grp\" };\nstatic const char * const sptlp_i2c3_groups[] = { \"i2c3_grp\" };\nstatic const char * const sptlp_i2c4_groups[] = { \"i2c4_grp\", \"i2c4b_grp\" };\nstatic const char * const sptlp_i2c5_groups[] = { \"i2c5_grp\" };\nstatic const char * const sptlp_ssp2_groups[] = { \"ssp2_grp\" };\nstatic const char * const sptlp_emmc_groups[] = { \"emmc_grp\" };\nstatic const char * const sptlp_sd_groups[] = { \"sd_grp\" };\n\nstatic const struct intel_function sptlp_functions[] = {\n\tFUNCTION(\"spi0\", sptlp_spi0_groups),\n\tFUNCTION(\"spi1\", sptlp_spi1_groups),\n\tFUNCTION(\"uart0\", sptlp_uart0_groups),\n\tFUNCTION(\"uart1\", sptlp_uart1_groups),\n\tFUNCTION(\"uart2\", sptlp_uart2_groups),\n\tFUNCTION(\"i2c0\", sptlp_i2c0_groups),\n\tFUNCTION(\"i2c1\", sptlp_i2c1_groups),\n\tFUNCTION(\"i2c2\", sptlp_i2c2_groups),\n\tFUNCTION(\"i2c3\", sptlp_i2c3_groups),\n\tFUNCTION(\"i2c4\", sptlp_i2c4_groups),\n\tFUNCTION(\"i2c5\", sptlp_i2c5_groups),\n\tFUNCTION(\"ssp2\", sptlp_ssp2_groups),\n\tFUNCTION(\"emmc\", sptlp_emmc_groups),\n\tFUNCTION(\"sd\", sptlp_sd_groups),\n};\n\nstatic const struct intel_community sptlp_communities[] = {\n\tSPT_COMMUNITY(0, 0, 47),\n\tSPT_COMMUNITY(1, 48, 119),\n\tSPT_COMMUNITY(2, 120, 151),\n};\n\nstatic const struct intel_pinctrl_soc_data sptlp_soc_data = {\n\t.pins = sptlp_pins,\n\t.npins = ARRAY_SIZE(sptlp_pins),\n\t.groups = sptlp_groups,\n\t.ngroups = ARRAY_SIZE(sptlp_groups),\n\t.functions = sptlp_functions,\n\t.nfunctions = ARRAY_SIZE(sptlp_functions),\n\t.communities = sptlp_communities,\n\t.ncommunities = ARRAY_SIZE(sptlp_communities),\n};\n\n/* Sunrisepoint-H */\nstatic const struct pinctrl_pin_desc spth_pins[] = {\n\t/* GPP_A */\n\tPINCTRL_PIN(0, \"RCINB\"),\n\tPINCTRL_PIN(1, \"LAD_0\"),\n\tPINCTRL_PIN(2, \"LAD_1\"),\n\tPINCTRL_PIN(3, \"LAD_2\"),\n\tPINCTRL_PIN(4, \"LAD_3\"),\n\tPINCTRL_PIN(5, \"LFRAMEB\"),\n\tPINCTRL_PIN(6, \"SERIQ\"),\n\tPINCTRL_PIN(7, \"PIRQAB\"),\n\tPINCTRL_PIN(8, \"CLKRUNB\"),\n\tPINCTRL_PIN(9, \"CLKOUT_LPC_0\"),\n\tPINCTRL_PIN(10, \"CLKOUT_LPC_1\"),\n\tPINCTRL_PIN(11, \"PMEB\"),\n\tPINCTRL_PIN(12, \"BM_BUSYB\"),\n\tPINCTRL_PIN(13, \"SUSWARNB_SUS_PWRDNACK\"),\n\tPINCTRL_PIN(14, \"SUS_STATB\"),\n\tPINCTRL_PIN(15, \"SUSACKB\"),\n\tPINCTRL_PIN(16, \"CLKOUT_48\"),\n\tPINCTRL_PIN(17, \"ISH_GP_7\"),\n\tPINCTRL_PIN(18, \"ISH_GP_0\"),\n\tPINCTRL_PIN(19, \"ISH_GP_1\"),\n\tPINCTRL_PIN(20, \"ISH_GP_2\"),\n\tPINCTRL_PIN(21, \"ISH_GP_3\"),\n\tPINCTRL_PIN(22, \"ISH_GP_4\"),\n\tPINCTRL_PIN(23, \"ISH_GP_5\"),\n\t/* GPP_B */\n\tPINCTRL_PIN(24, \"CORE_VID_0\"),\n\tPINCTRL_PIN(25, \"CORE_VID_1\"),\n\tPINCTRL_PIN(26, \"VRALERTB\"),\n\tPINCTRL_PIN(27, \"CPU_GP_2\"),\n\tPINCTRL_PIN(28, \"CPU_GP_3\"),\n\tPINCTRL_PIN(29, \"SRCCLKREQB_0\"),\n\tPINCTRL_PIN(30, \"SRCCLKREQB_1\"),\n\tPINCTRL_PIN(31, \"SRCCLKREQB_2\"),\n\tPINCTRL_PIN(32, \"SRCCLKREQB_3\"),\n\tPINCTRL_PIN(33, \"SRCCLKREQB_4\"),\n\tPINCTRL_PIN(34, \"SRCCLKREQB_5\"),\n\tPINCTRL_PIN(35, \"EXT_PWR_GATEB\"),\n\tPINCTRL_PIN(36, \"SLP_S0B\"),\n\tPINCTRL_PIN(37, \"PLTRSTB\"),\n\tPINCTRL_PIN(38, \"SPKR\"),\n\tPINCTRL_PIN(39, \"GSPI0_CSB\"),\n\tPINCTRL_PIN(40, \"GSPI0_CLK\"),\n\tPINCTRL_PIN(41, \"GSPI0_MISO\"),\n\tPINCTRL_PIN(42, \"GSPI0_MOSI\"),\n\tPINCTRL_PIN(43, \"GSPI1_CSB\"),\n\tPINCTRL_PIN(44, \"GSPI1_CLK\"),\n\tPINCTRL_PIN(45, \"GSPI1_MISO\"),\n\tPINCTRL_PIN(46, \"GSPI1_MOSI\"),\n\tPINCTRL_PIN(47, \"SML1ALERTB\"),\n\t/* GPP_C */\n\tPINCTRL_PIN(48, \"SMBCLK\"),\n\tPINCTRL_PIN(49, \"SMBDATA\"),\n\tPINCTRL_PIN(50, \"SMBALERTB\"),\n\tPINCTRL_PIN(51, \"SML0CLK\"),\n\tPINCTRL_PIN(52, \"SML0DATA\"),\n\tPINCTRL_PIN(53, \"SML0ALERTB\"),\n\tPINCTRL_PIN(54, \"SML1CLK\"),\n\tPINCTRL_PIN(55, \"SML1DATA\"),\n\tPINCTRL_PIN(56, \"UART0_RXD\"),\n\tPINCTRL_PIN(57, \"UART0_TXD\"),\n\tPINCTRL_PIN(58, \"UART0_RTSB\"),\n\tPINCTRL_PIN(59, \"UART0_CTSB\"),\n\tPINCTRL_PIN(60, \"UART1_RXD\"),\n\tPINCTRL_PIN(61, \"UART1_TXD\"),\n\tPINCTRL_PIN(62, \"UART1_RTSB\"),\n\tPINCTRL_PIN(63, \"UART1_CTSB\"),\n\tPINCTRL_PIN(64, \"I2C0_SDA\"),\n\tPINCTRL_PIN(65, \"I2C0_SCL\"),\n\tPINCTRL_PIN(66, \"I2C1_SDA\"),\n\tPINCTRL_PIN(67, \"I2C1_SCL\"),\n\tPINCTRL_PIN(68, \"UART2_RXD\"),\n\tPINCTRL_PIN(69, \"UART2_TXD\"),\n\tPINCTRL_PIN(70, \"UART2_RTSB\"),\n\tPINCTRL_PIN(71, \"UART2_CTSB\"),\n\t/* GPP_D */\n\tPINCTRL_PIN(72, \"SPI1_CSB\"),\n\tPINCTRL_PIN(73, \"SPI1_CLK\"),\n\tPINCTRL_PIN(74, \"SPI1_MISO_IO_1\"),\n\tPINCTRL_PIN(75, \"SPI1_MOSI_IO_0\"),\n\tPINCTRL_PIN(76, \"ISH_I2C2_SDA\"),\n\tPINCTRL_PIN(77, \"SSP0_SFRM\"),\n\tPINCTRL_PIN(78, \"SSP0_TXD\"),\n\tPINCTRL_PIN(79, \"SSP0_RXD\"),\n\tPINCTRL_PIN(80, \"SSP0_SCLK\"),\n\tPINCTRL_PIN(81, \"ISH_SPI_CSB\"),\n\tPINCTRL_PIN(82, \"ISH_SPI_CLK\"),\n\tPINCTRL_PIN(83, \"ISH_SPI_MISO\"),\n\tPINCTRL_PIN(84, \"ISH_SPI_MOSI\"),\n\tPINCTRL_PIN(85, \"ISH_UART0_RXD\"),\n\tPINCTRL_PIN(86, \"ISH_UART0_TXD\"),\n\tPINCTRL_PIN(87, \"ISH_UART0_RTSB\"),\n\tPINCTRL_PIN(88, \"ISH_UART0_CTSB\"),\n\tPINCTRL_PIN(89, \"DMIC_CLK_1\"),\n\tPINCTRL_PIN(90, \"DMIC_DATA_1\"),\n\tPINCTRL_PIN(91, \"DMIC_CLK_0\"),\n\tPINCTRL_PIN(92, \"DMIC_DATA_0\"),\n\tPINCTRL_PIN(93, \"SPI1_IO_2\"),\n\tPINCTRL_PIN(94, \"SPI1_IO_3\"),\n\tPINCTRL_PIN(95, \"ISH_I2C2_SCL\"),\n\t/* GPP_E */\n\tPINCTRL_PIN(96, \"SATAXPCIE_0\"),\n\tPINCTRL_PIN(97, \"SATAXPCIE_1\"),\n\tPINCTRL_PIN(98, \"SATAXPCIE_2\"),\n\tPINCTRL_PIN(99, \"CPU_GP_0\"),\n\tPINCTRL_PIN(100, \"SATA_DEVSLP_0\"),\n\tPINCTRL_PIN(101, \"SATA_DEVSLP_1\"),\n\tPINCTRL_PIN(102, \"SATA_DEVSLP_2\"),\n\tPINCTRL_PIN(103, \"CPU_GP_1\"),\n\tPINCTRL_PIN(104, \"SATA_LEDB\"),\n\tPINCTRL_PIN(105, \"USB2_OCB_0\"),\n\tPINCTRL_PIN(106, \"USB2_OCB_1\"),\n\tPINCTRL_PIN(107, \"USB2_OCB_2\"),\n\tPINCTRL_PIN(108, \"USB2_OCB_3\"),\n\t/* GPP_F */\n\tPINCTRL_PIN(109, \"SATAXPCIE_3\"),\n\tPINCTRL_PIN(110, \"SATAXPCIE_4\"),\n\tPINCTRL_PIN(111, \"SATAXPCIE_5\"),\n\tPINCTRL_PIN(112, \"SATAXPCIE_6\"),\n\tPINCTRL_PIN(113, \"SATAXPCIE_7\"),\n\tPINCTRL_PIN(114, \"SATA_DEVSLP_3\"),\n\tPINCTRL_PIN(115, \"SATA_DEVSLP_4\"),\n\tPINCTRL_PIN(116, \"SATA_DEVSLP_5\"),\n\tPINCTRL_PIN(117, \"SATA_DEVSLP_6\"),\n\tPINCTRL_PIN(118, \"SATA_DEVSLP_7\"),\n\tPINCTRL_PIN(119, \"SATA_SCLOCK\"),\n\tPINCTRL_PIN(120, \"SATA_SLOAD\"),\n\tPINCTRL_PIN(121, \"SATA_SDATAOUT1\"),\n\tPINCTRL_PIN(122, \"SATA_SDATAOUT0\"),\n\tPINCTRL_PIN(123, \"GPP_F_14\"),\n\tPINCTRL_PIN(124, \"USB_OCB_4\"),\n\tPINCTRL_PIN(125, \"USB_OCB_5\"),\n\tPINCTRL_PIN(126, \"USB_OCB_6\"),\n\tPINCTRL_PIN(127, \"USB_OCB_7\"),\n\tPINCTRL_PIN(128, \"L_VDDEN\"),\n\tPINCTRL_PIN(129, \"L_BKLTEN\"),\n\tPINCTRL_PIN(130, \"L_BKLTCTL\"),\n\tPINCTRL_PIN(131, \"GPP_F_22\"),\n\tPINCTRL_PIN(132, \"GPP_F_23\"),\n\t/* GPP_G */\n\tPINCTRL_PIN(133, \"FAN_TACH_0\"),\n\tPINCTRL_PIN(134, \"FAN_TACH_1\"),\n\tPINCTRL_PIN(135, \"FAN_TACH_2\"),\n\tPINCTRL_PIN(136, \"FAN_TACH_3\"),\n\tPINCTRL_PIN(137, \"FAN_TACH_4\"),\n\tPINCTRL_PIN(138, \"FAN_TACH_5\"),\n\tPINCTRL_PIN(139, \"FAN_TACH_6\"),\n\tPINCTRL_PIN(140, \"FAN_TACH_7\"),\n\tPINCTRL_PIN(141, \"FAN_PWM_0\"),\n\tPINCTRL_PIN(142, \"FAN_PWM_1\"),\n\tPINCTRL_PIN(143, \"FAN_PWM_2\"),\n\tPINCTRL_PIN(144, \"FAN_PWM_3\"),\n\tPINCTRL_PIN(145, \"GSXDOUT\"),\n\tPINCTRL_PIN(146, \"GSXSLOAD\"),\n\tPINCTRL_PIN(147, \"GSXDIN\"),\n\tPINCTRL_PIN(148, \"GSXRESETB\"),\n\tPINCTRL_PIN(149, \"GSXCLK\"),\n\tPINCTRL_PIN(150, \"ADR_COMPLETE\"),\n\tPINCTRL_PIN(151, \"NMIB\"),\n\tPINCTRL_PIN(152, \"SMIB\"),\n\tPINCTRL_PIN(153, \"GPP_G_20\"),\n\tPINCTRL_PIN(154, \"GPP_G_21\"),\n\tPINCTRL_PIN(155, \"GPP_G_22\"),\n\tPINCTRL_PIN(156, \"GPP_G_23\"),\n\t/* GPP_H */\n\tPINCTRL_PIN(157, \"SRCCLKREQB_6\"),\n\tPINCTRL_PIN(158, \"SRCCLKREQB_7\"),\n\tPINCTRL_PIN(159, \"SRCCLKREQB_8\"),\n\tPINCTRL_PIN(160, \"SRCCLKREQB_9\"),\n\tPINCTRL_PIN(161, \"SRCCLKREQB_10\"),\n\tPINCTRL_PIN(162, \"SRCCLKREQB_11\"),\n\tPINCTRL_PIN(163, \"SRCCLKREQB_12\"),\n\tPINCTRL_PIN(164, \"SRCCLKREQB_13\"),\n\tPINCTRL_PIN(165, \"SRCCLKREQB_14\"),\n\tPINCTRL_PIN(166, \"SRCCLKREQB_15\"),\n\tPINCTRL_PIN(167, \"SML2CLK\"),\n\tPINCTRL_PIN(168, \"SML2DATA\"),\n\tPINCTRL_PIN(169, \"SML2ALERTB\"),\n\tPINCTRL_PIN(170, \"SML3CLK\"),\n\tPINCTRL_PIN(171, \"SML3DATA\"),\n\tPINCTRL_PIN(172, \"SML3ALERTB\"),\n\tPINCTRL_PIN(173, \"SML4CLK\"),\n\tPINCTRL_PIN(174, \"SML4DATA\"),\n\tPINCTRL_PIN(175, \"SML4ALERTB\"),\n\tPINCTRL_PIN(176, \"ISH_I2C0_SDA\"),\n\tPINCTRL_PIN(177, \"ISH_I2C0_SCL\"),\n\tPINCTRL_PIN(178, \"ISH_I2C1_SDA\"),\n\tPINCTRL_PIN(179, \"ISH_I2C1_SCL\"),\n\tPINCTRL_PIN(180, \"GPP_H_23\"),\n\t/* GPP_I */\n\tPINCTRL_PIN(181, \"DDSP_HDP_0\"),\n\tPINCTRL_PIN(182, \"DDSP_HDP_1\"),\n\tPINCTRL_PIN(183, \"DDSP_HDP_2\"),\n\tPINCTRL_PIN(184, \"DDSP_HDP_3\"),\n\tPINCTRL_PIN(185, \"EDP_HPD\"),\n\tPINCTRL_PIN(186, \"DDPB_CTRLCLK\"),\n\tPINCTRL_PIN(187, \"DDPB_CTRLDATA\"),\n\tPINCTRL_PIN(188, \"DDPC_CTRLCLK\"),\n\tPINCTRL_PIN(189, \"DDPC_CTRLDATA\"),\n\tPINCTRL_PIN(190, \"DDPD_CTRLCLK\"),\n\tPINCTRL_PIN(191, \"DDPD_CTRLDATA\"),\n};\n\nstatic const unsigned spth_spi0_pins[] = { 39, 40, 41, 42 };\nstatic const unsigned spth_spi1_pins[] = { 43, 44, 45, 46 };\nstatic const unsigned spth_uart0_pins[] = { 56, 57, 58, 59 };\nstatic const unsigned spth_uart1_pins[] = { 60, 61, 62, 63 };\nstatic const unsigned spth_uart2_pins[] = { 68, 69, 71, 71 };\nstatic const unsigned spth_i2c0_pins[] = { 64, 65 };\nstatic const unsigned spth_i2c1_pins[] = { 66, 67 };\nstatic const unsigned spth_i2c2_pins[] = { 76, 95 };\n\nstatic const struct intel_pingroup spth_groups[] = {\n\tPIN_GROUP(\"spi0_grp\", spth_spi0_pins, 1),\n\tPIN_GROUP(\"spi1_grp\", spth_spi1_pins, 1),\n\tPIN_GROUP(\"uart0_grp\", spth_uart0_pins, 1),\n\tPIN_GROUP(\"uart1_grp\", spth_uart1_pins, 1),\n\tPIN_GROUP(\"uart2_grp\", spth_uart2_pins, 1),\n\tPIN_GROUP(\"i2c0_grp\", spth_i2c0_pins, 1),\n\tPIN_GROUP(\"i2c1_grp\", spth_i2c1_pins, 1),\n\tPIN_GROUP(\"i2c2_grp\", spth_i2c2_pins, 2),\n};\n\nstatic const char * const spth_spi0_groups[] = { \"spi0_grp\" };\nstatic const char * const spth_spi1_groups[] = { \"spi0_grp\" };\nstatic const char * const spth_uart0_groups[] = { \"uart0_grp\" };\nstatic const char * const spth_uart1_groups[] = { \"uart1_grp\" };\nstatic const char * const spth_uart2_groups[] = { \"uart2_grp\" };\nstatic const char * const spth_i2c0_groups[] = { \"i2c0_grp\" };\nstatic const char * const spth_i2c1_groups[] = { \"i2c1_grp\" };\nstatic const char * const spth_i2c2_groups[] = { \"i2c2_grp\" };\n\nstatic const struct intel_function spth_functions[] = {\n\tFUNCTION(\"spi0\", spth_spi0_groups),\n\tFUNCTION(\"spi1\", spth_spi1_groups),\n\tFUNCTION(\"uart0\", spth_uart0_groups),\n\tFUNCTION(\"uart1\", spth_uart1_groups),\n\tFUNCTION(\"uart2\", spth_uart2_groups),\n\tFUNCTION(\"i2c0\", spth_i2c0_groups),\n\tFUNCTION(\"i2c1\", spth_i2c1_groups),\n\tFUNCTION(\"i2c2\", spth_i2c2_groups),\n};\n\nstatic const struct intel_community spth_communities[] = {\n\tSPT_COMMUNITY(0, 0, 47),\n\tSPT_COMMUNITY(1, 48, 180),\n\tSPT_COMMUNITY(2, 181, 191),\n};\n\nstatic const struct intel_pinctrl_soc_data spth_soc_data = {\n\t.pins = spth_pins,\n\t.npins = ARRAY_SIZE(spth_pins),\n\t.groups = spth_groups,\n\t.ngroups = ARRAY_SIZE(spth_groups),\n\t.functions = spth_functions,\n\t.nfunctions = ARRAY_SIZE(spth_functions),\n\t.communities = spth_communities,\n\t.ncommunities = ARRAY_SIZE(spth_communities),\n};\n\nstatic const struct acpi_device_id spt_pinctrl_acpi_match[] = {\n\t{ \"INT344B\", (kernel_ulong_t)&sptlp_soc_data },\n\t{ \"INT345D\", (kernel_ulong_t)&spth_soc_data },\n\t{ }\n};\nMODULE_DEVICE_TABLE(acpi, spt_pinctrl_acpi_match);\n\nstatic int spt_pinctrl_probe(struct platform_device *pdev)\n{\n\tconst struct intel_pinctrl_soc_data *soc_data;\n\tconst struct acpi_device_id *id;\n\n\tid = acpi_match_device(spt_pinctrl_acpi_match, &pdev->dev);\n\tif (!id || !id->driver_data)\n\t\treturn -ENODEV;\n\n\tsoc_data = (const struct intel_pinctrl_soc_data *)id->driver_data;\n\treturn intel_pinctrl_probe(pdev, soc_data);\n}\n\nstatic const struct dev_pm_ops spt_pinctrl_pm_ops = {\n\tSET_LATE_SYSTEM_SLEEP_PM_OPS(intel_pinctrl_suspend,\n\t\t\t\t     intel_pinctrl_resume)\n};\n\nstatic struct platform_driver spt_pinctrl_driver = {\n\t.probe = spt_pinctrl_probe,\n\t.remove = intel_pinctrl_remove,\n\t.driver = {\n\t\t.name = \"sunrisepoint-pinctrl\",\n\t\t.acpi_match_table = spt_pinctrl_acpi_match,\n\t\t.pm = &spt_pinctrl_pm_ops,\n\t},\n};\n\nstatic int __init spt_pinctrl_init(void)\n{\n\treturn platform_driver_register(&spt_pinctrl_driver);\n}\nsubsys_initcall(spt_pinctrl_init);\n\nstatic void __exit spt_pinctrl_exit(void)\n{\n\tplatform_driver_unregister(&spt_pinctrl_driver);\n}\nmodule_exit(spt_pinctrl_exit);\n\nMODULE_AUTHOR(\"Mathias Nyman <mathias.nyman@linux.intel.com>\");\nMODULE_AUTHOR(\"Mika Westerberg <mika.westerberg@linux.intel.com>\");\nMODULE_DESCRIPTION(\"Intel Sunrisepoint PCH pinctrl/GPIO driver\");\nMODULE_LICENSE(\"GPL v2\");\n"
}