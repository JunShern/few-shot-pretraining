{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "2076",
    "text": "Q:\n\nNeuPy: Input shapes issues\n\nI want to build a neural network using neupy. \nTherefore I consturcted the following architecture:\n network = layers.join(\n                    layers.Input(10),\n\n                    layers.Linear(500),\n                    layers.Relu(),\n\n                    layers.Linear(300),\n                    layers.Relu(),\n\n                    layers.Linear(10),\n                    layers.Softmax(),\n                )\n\nMy data is shaped as follwoing:\nx_train.shape = (32589,10)\ny_train.shape = (32589,1)\n\nWhen I try to train this network using: \nmodel.train(x_train, y_trian)\n\nI get the follwoing error: \nValueError: Input dimension mis-match. (input[0].shape[1] = 10, input[1].shape[1] = 1)\nApply node that caused the error: Elemwise{sub,no_inplace}(SoftmaxWithBias.0, algo:network/var:network-output)\nToposort index: 26\nInputs types: [TensorType(float64, matrix), TensorType(float64, matrix)]\nInputs shapes: [(32589, 10), (32589, 1)]\nInputs strides: [(80, 8), (8, 8)]\nInputs values: ['not shown', 'not shown']\nOutputs clients: [[Elemwise{Composite{((i0 * i1) / i2)}}(TensorConstant{(1, 1) of 2.0}, Elemwise{sub,no_inplace}.0, Elemwise{mul,no_inplace}.0), Elemwise{Sqr}[(0, 0)](Elemwise{sub,no_inplace}.0)]]\n\nHow do I have to edit my network to map this kind of data? \nThank you a lot!\n\nA:\n\nYour architecture has 10 outputs instead of 1. I assume that your y_train function is a 0-1 class identifier. If so, than you need to change your structure to this:\nnetwork = layers.join(\n   layers.Input(10),\n\n   layers.Linear(500),\n   layers.Relu(),\n\n   layers.Linear(300),\n   layers.Relu(),\n\n   layers.Linear(1),  # Single output\n   layers.Sigmoid(),  # Sigmoid works better for 2-class classification\n)\n\nYou can make it even simpler\nnetwork = layers.join(\n   layers.Input(10),\n   layers.Relu(500),\n   layers.Relu(300),\n   layers.Sigmoid(1),\n)\n\nThe reason why it works is because layers.Liner(10) > layers.Relu() is the same as layers.Relu(10). You can learn more in official documentation: http://neupy.com/docs/layers/basics.html#mutlilayer-perceptron-mlp\n\n"
}