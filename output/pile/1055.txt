{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1055",
    "text": "Q:\n\n\u041d\u0443\u0436\u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0431\u043e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0432\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e. \u042f \u0441\u043e\u0437\u0434\u0430\u043b \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u043e \u0431\u043e\u0442 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043d\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442\n\n\u042f \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c, \u0431\u043e\u0442 \u043f\u043e\u043d\u0438\u043c\u0430\u043b, \u0447\u0442\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c. \u041d\u043e \u043f\u043e \u043a\u0430\u043a\u043e\u0439 \u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f. \u0411\u043e\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442\nP.s \u042f \u043d\u043e\u0432\u0438\u0447\u043e\u043a \u0432 python\n#main.py\n@bot.message_handler(content_types=['text'])\ndef response(message):\n    try:\n        filename = 'UserName.json'\n        rub = message.text\n        if rub == config.scr():\n            with open(filename, 'w', encoding='utf-8') as f:\n                json.dump(rub, f, ensure_ascii=False)\n            bot.send_message(message.chat.id, '\u0412\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0435 ' + rub + ' \u0440\u0443\u0431\u043b\u0435\u0439')\n\n        else:\n            bot.send_message(message.chat.id, '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443!')\n    except FileNotFoundError:\n        print('error')\n#config.py\ndef scr():\n    n = 100001\n    ls = []\n    for i in range(n):\n        ls.append(i)\n    for elem in ls[:1000]:\n        ls.remove(elem)\n    array = [str(i) for i in ls]\n\nA:\n\n\u0412 config.py / scr \u0443 \u0432\u0430\u0441 \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a.\n\u0412\u043c\u0435\u0441\u0442\u043e array = [str(i) for i in ls] \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 return [str(i) for i in ls]\n\n\u0412 config.py / response \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435. \u0423 \u0432\u0430\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (\u0441\u0442\u0440\u043e\u043a\u0430) \u0440\u0430\u0432\u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a.\n\u041d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 in:\nif rub in config.scr():\n\n\u041c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0441\u0443\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0438\u0437\u043b\u0438\u0448\u043d\u0435\u0439. \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c.\n\n\u0422\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u043a \u0446\u0435\u043b\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0447\u0435\u0440\u0435\u0437 int, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c, \u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ValueError\n\u041f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 1 \u0434\u043e 1000 (\u043f\u043e\u0434\u043f\u0440\u0430\u0432\u044c\u0442\u0435, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u0435\u043d \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d)\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n@bot.message_handler(content_types=['text'])\ndef response(message):\n    try:\n        rub = int(message.text)\n        if rub <= 0 or rub > 1000:\n            raise ValueError()\n\n        filename = 'UserName.json'\n        with open(filename, 'w', encoding='utf-8') as f:\n            json.dump(rub, f, ensure_ascii=False)\n\n        bot.send_message(message.chat.id, f'\u0412\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0435 {rub} \u0440\u0443\u0431\u043b\u0435\u0439')\n\n    except ValueError:\n        bot.send_message(message.chat.id, '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443!')\n\n    except FileNotFoundError:\n        print('error')\n\n"
}