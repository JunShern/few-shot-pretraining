{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['1', '2', '3', '4', '5', '6', '1', '1', '1', '1', '1', '7', '1', '2', '3', '3', '1', '4', '4', '1', '2', '1', '3', '1', '1', '4', '4', '4', '1', '2', '2', '2', '3', '1', '1', '4', '1', '1', '2', '2', '5']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['Now the final result should read the text files and display the information in a way that will allow the user to check how many units are within each devices and which units are connected or free. (0.188)']."
        }
    ],
    "doc_id": "2150",
    "text": "Q:\n\nManipulating CSV Data with Javascript\n\nI have two .csv files and i need to make one table for both files in simple html page.\nFirst file (devices.csv) has id,name,units where units the number of ports that device can connect.\nSecond file (connections.csv) has reference id for the first file and unit_number that is connected in each device.\nNow the final result should read the text files and display the information in a way that will allow the user to check how many units are within each devices and which units are connected or free.\ndevices.csv\nid,name,units\n1,CAB-01,20\n2,CAB-02,10\n3,DP-01,4\n4,DP-02,12\n5,CAB-01,0\n6,DP-01,24\n\nconnections.csv\ndevice_id,unit_number\n1,1\n1,3,\n1,17\n1,18\n1,19\n7,1\n1,20\n2,10\n3,1\n3,2\n1,5\n4,12\n4,1\n1,6\n2,1\n1,7\n3,4\n1,8\n1,9\n4,11\n4,1\n4,3\n1,10\n2,2\n2,3\n2,4\n3,3\n1,12\n1,14\n4,4\n1,15\n1,16\n2,6\n2,8\n5,1\n\nmy js file :\nfunction handleFiles(files) {\n// Check for the various File API support.\nvar data = new Object;\nif (window.FileReader) {\n var j = 0, k = files.length;\n for (var i = 0; i < k; i++) {\n             //j++;\n             getAsText(files[i]);          \n     };\n }\n    // FileReader are supported.\n//} \n else {\n    alert('FileReader are not supported in this browser.');\n}}   \n\nfunction getAsText(fileToRead) {\nvar reader = new FileReader();\n\nreader.onload = loadHandler;\nreader.onerror = errorHandler;\n\nreader.readAsText(fileToRead);\n}\n\nfunction loadHandler(event) {\nvar csv = event.target.result;\nprocessData(csv);             \n}\n\nfunction processData(csv) {\nvar allTextLines = csv.split(/\\r\\n|\\n/);\nvar lines = [];\nwhile (allTextLines.length) {\n    lines.push(allTextLines.shift().split(','));\n}\nconsole.log(lines);\ndrawOutput(lines);\n}\n\nfunction errorHandler(evt) {\nif(evt.target.error.name == \"NotReadableError\") {\n    alert(\"Canno't read file !\");\n}\n}\n\nfunction drawOutput(lines){\nvar table = document.createElement(\"table\");\n\nfor (var i = 0; i < lines.length; i++) {\n    var row = table.insertRow(-1);\n    for (var j = 0; j < lines[i].length; j++) {\n                var firstNameCell = row.insertCell(-1);\n                firstNameCell.appendChild(document.createTextNode(lines[i][j]));\n                console.log(firstNameCell); \n    };          \n}\ndocument.getElementById(\"output\").appendChild(table);\n}\n\nplease help\n\nA:\n\nBefore pushing it all into DOM (or HTML) you should convert the data from the two sources into one. Say, each device should be represented as: \"name\", \"units\", \"unit_numbers\" \nLet's try & implement it:\nvar data_devices = [\"1,CAB-01,20\", \"2,CAB-02,10\", \"3,DP-01,4\", \"4,DP-02,12\", \"5,CAB-01,0\", \"6,DP-01,24\"];\n\nvar data_connections = [\"1,1\", \"1,3,\", \"1,17\", \"1,18\", \"1,19\", \"7,1\", \"1,20\", \"2,10\", \"3,1\", \"3,2\", \"1,5\", \"4,12\", \"4,1\", \"1,6\", \"2,1\", \"1,7\", \"3,4\", \"1,8\", \"1,9\", \"4,11\", \"4,1\", \"4,3\", \"1,10\", \"2,2\", \"2,3\", \"2,4\", \"3,3\", \"1,12\", \"1,14\", \"4,4\", \"1,15\", \"1,16\", \"2,6\", \"2,8\", \"5,1\"];\n\nvar data = {};\n\ndata_devices.forEach(function(d) { \n    d = d.split(\",\"); \n    data[d[0]] = { \"name\":d[1], \"units\":d[2], \"unit_numbers\":[] }; \n});\n\ndata_connections.forEach(function(d) { \n    d = d.split(\",\"); \n    if(data[d[0]]) data[d[0]].unit_numbers.push(d[1]); \n});\n\nThe data variable is now queryable & looks like this:\n{\n  \"1\": {\n    \"name\": \"CAB-01\",\n    \"units\": \"20\",\n    \"unit_numbers\": [\n      \"1\",\n      \"3\",\n      \"17\",\n      \"18\",\n      \"19\",\n      \"20\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"10\",\n      \"12\",\n      \"14\",\n      \"15\",\n      \"16\"\n    ]\n  },\n  \"2\": {\n    \"name\": \"CAB-02\",\n    \"units\": \"10\",\n    \"unit_numbers\": [\n      \"10\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"6\",\n      \"8\"\n    ]\n  },\n  \"3\": {\n    \"name\": \"DP-01\",\n    \"units\": \"4\",\n    \"unit_numbers\": [\n      \"1\",\n      \"2\",\n      \"4\",\n      \"3\"\n    ]\n  },\n  \"4\": {\n    \"name\": \"DP-02\",\n    \"units\": \"12\",\n    \"unit_numbers\": [\n      \"12\",\n      \"1\",\n      \"11\",\n      \"1\",\n      \"3\",\n      \"4\"\n    ]\n  },\n  \"5\": {\n    \"name\": \"CAB-01\",\n    \"units\": \"0\",\n    \"unit_numbers\": [\n      \"1\"\n    ]\n  },\n  \"6\": {\n    \"name\": \"DP-01\",\n    \"units\": \"24\",\n    \"unit_numbers\": []\n  }\n}\n\n"
}