{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6805",
    "text": "Q:\n\nblank file while copying a file in python\n\nI have a function takes a file as input and prints certain statistics and also copies the file into a file name provided by the user.  Here is my current code:\ndef copy_file(option):\ninfile_name = input(\"Please enter the name of the file to copy: \")\ninfile = open(infile_name, 'r')\noutfile_name = input(\"Please enter the name of the new copy:  \")\noutfile = open(outfile_name, 'w')\nslist = infile.readlines()\nif option == 'statistics':\n    for line in infile:\n        outfile.write(line)\n    infile.close()\n    outfile.close()\n    result = []\n    blank_count = slist.count('\\n')\n    for item in slist:\n        result.append(len(item))\n    print('\\n{0:<5d} lines in the list\\n{1:>5d} empty lines\\n{2:>7.1f} average character per line\\n{3:>7.1f} average character per non-empty line'.format(\n        len(slist), blank_count, sum(result)/len(slist), (sum(result)-blank_count)/(len(slist)-blank_count)))\n\ncopy_file('statistics')\n\nIt prints the statistics of the file correctly, however the copy it makes of the file is empty. If I remove the readline() part and the statistics part, the function seems to make a copy of the file correctly. How can I correct my code so that it does both. It's a minor problem but I can't seem to get it.\n\nA:\n\nThe reason the file is blank is that\nslist = infile.readlines()\n\nis reading the entire contents of the file, so when it gets to\n for line in infile:\n\nthere is nothing left to read and it just closes the newly truncated (mode w) file leaving you with a blank file.\nI think the answer here is to change your for line in infile: to for line in slist:\ndef copy_file(option):\n    infile_name= input(\"Please enter the name of the file to copy: \")\n    infile = open(infile_name, 'r')\n    outfile_name = input(\"Please enter the name of the new copy:  \")\n    outfile = open(outfile_name, 'w')\n    slist = infile.readlines()\n    if option == 'statistics':\n        for line in slist:\n            outfile.write(line)\n        infile.close()\n        outfile.close()\n        result = []\n        blank_count = slist.count('\\n')\n        for item in slist:\n            result.append(len(item))\n        print('\\n{0:<5d} lines in the list\\n{1:>5d} empty lines\\n{2:>7.1f} average character per line\\n{3:>7.1f} average character per non-empty line'.format(\n            len(slist), blank_count, sum(result)/len(slist), (sum(result)-blank_count)/(len(slist)-blank_count)))\n\ncopy_file('statistics')\n\nHaving said all that, consider if it's worth using your own copy routine rather than shutil.copy - Always better to delegate the task to your OS as it will be quicker and probably safer (thanks to NightShadeQueen for the reminder)!\n\n"
}