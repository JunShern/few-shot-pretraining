{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "687",
    "text": "Q:\n\nGet DateTime object given local time as string, date as UTC DateTime and a timezone-locale string?\n\nI'm working with data from several sources, and I need to put together an accurate DateTime.\nI have:  \nA) a string representing a time of day, e.g.: \"4:00 pm\"\nB)  a DateTime object intended to represent a pure date, by having been created as midnight, zulu time (offset of 00:00) for a particular date.\nC) a string representing a timezone locale, e.g.: \"America/Los_Angeles\"\nHow do I get a precise DateTime object, with correct number of ticks, representing the time (A) experienced in that locale (C), on that date (B)??\n\nA:\n\nHere you have an example using NodaTime, which is more reliable of any of the framework classes when dealing with calendars, time zones, dates and times:\nvar timeString = \"4:00 pm\";\nvar pureDate = new DateTime(2017, 5, 22, 0, 0, 0, DateTimeKind.Utc);\nvar timezoneString = \"America/Los_Angeles\";\n\nvar localTime = ParseTimeString(timeString);\n\nvar localDate = LocalDate.FromDateTime(pureDate);\n\nvar localDateTime = localDate.At(localTime);\n\nvar zone = DateTimeZoneProviders.Tzdb[timezoneString];\n\nvar zonedDateTime = localDateTime.InZoneStrictly(zone);\n\nInside zonedDateTime you will find your full date:\n\"2017-05-22T16:00:00 America/Los_Angeles (-07)\"\n\nYou may than use zonedDateTime.ToDateTimeUtc() to get a System.DateTime instance in UTC.\nParseTimeString parses your time string using your format specifier:\npublic static LocalTime ParseTimeString(string timeString)\n{\n    var pattern = LocalTimePattern.CreateWithInvariantCulture(\"h:mm tt\");\n    return pattern.Parse(timeString).Value;\n}\n\nConsiderations if you use DateTime, DateTimeOffset and TimeZoneInfo\nIf you do not want to use NodaTime be aware of the possible pitfalls of the built-in classes:\n\nTimeZoneInfo in Windows uses a different specifier that is not compatible with IANA/TZDB. Your America/Los_Angeles time zone string will not work if you do not convert it before use (see https://stackoverflow.com/tags/timezone/info)\nDateTimeOffset (which is more reliable then DateTime) still loses information when created. The time zone data cannot be persisted and you will have just a date with an offset from UTC.\nYou'll need to manually parse your custom time string (maybe using regexes).\n\n"
}