{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4910",
    "text": "Q:\n\nFinding list entry with the highest count\n\nI have an Entry data type\ndata Entry = Entry {\n    count :: Integer,\n    name :: String }\n\nThen I want to write a function, that takes the name and a list of Entrys as arguments an give me the Entrys with the highest count.  What I have so far is\nsearchEntry :: String -> [Entry] -> Maybe Integer\nsearchEntry _ [] = Nothing\nsearchEntry name1 (x:xs) = \n   if name x == name1\n       then Just (count x)\n       else searchEntry name xs \n\nThat gives me the FIRST Entry that the function finds, but I want the Entry with the highest count. How can I implement that?\n\nA:\n\nMy suggestion would be to break the problem into two parts:\n\nFind all entries matching a given name\nFind the entry with the highest count\n\nYou could set it up as\nentriesByName :: String -> [Entry] -> [Entry]\nentriesByName name entries = undefined\n\n-- Use Maybe since the list might be empty\nentryWithHighestCount :: [Entry] -> Maybe Entry\nentryWithHighestCount entries = undefined\n\nentryByNameWithHighestCount :: String -> [Entry] -> Maybe Entry\nentryByNameWithHighestCount name entires = entryWithHighestCount $ entriesByName name entries\n\nAll you have to do is implement the relatively simple functions that are used to implement getEntryByNameWithHighestCount.\n\n"
}