{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['Of course some frames may not have related source (for example frame representing a suite made (0.191)']."
        }
    ],
    "doc_id": "4939",
    "text": "<html>\n<head>\n<link href=\"PLUGINS_ROOT/org.robotframework.ide.eclipse.main.plugin.doc.user/help/style.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>\n<body>\n<a href=\"RED/../../../../../help/index.html\">RED - Robot Editor User Guide</a> &gt; <a href=\"RED/../../../../../help/user_guide/user_guide.html\">User guide</a> &gt; <a href=\"RED/../../../../../help/user_guide/launching.html\">Launching Tests</a> &gt; <a href=\"RED/../../../../../help/user_guide/launching/debug.html\">Debugging Robot</a> &gt; \n\t<h2>Hitting a breakpoint during debug execution</h2>\n<p>Whenever debugger suspends the execution there are many useful informations presented to user as well as new\n\topportunities to influence the running tests appear. First of all the toolbar buttons gets activated:\n\t</p>\n<img src=\"images/debug_toolbar.png\"/>\n<p>moving from left to right:</p>\n<ul>\n<li><b>Skip All Breakpoints</b> - allow to continue execution onwards without stopping on defined breakpoints\n\t    (globally disabling all the breakpoints)\n\t    </li>\n<li><b>Resume</b> - <kbd>F8</kbd> described in <a href=\"../exec_control.html\">Controlling execution</a></li>\n<li><b>Suspend</b> - as above</li>\n<li><b>Terminate</b> - <kbd>Ctrl</kbd>+<kbd>F2</kbd> as above</li>\n<li><b>Disconnect</b> - as above</li>\n<li><b>Step Into</b> - <kbd>F5</kbd> - each <kbd>F5</kbd> key press will execute active line and move to next \n\t    one. If active line consists Keyword or embedded TestCase, test executor will jump into item and execute \n\t    it line by line. To exit from executing inherited items use Step Return (<kbd>F7</kbd>)</li>\n<li><b>Step Over</b> - <kbd>F6</kbd> - each <kbd>F6</kbd> key press will execute active line and move to next \n\t    one. If keyword exists in current line, keyword result will be returned without going into Keyword content</li>\n<li><b>Step Return</b> - <kbd>F7</kbd> - allows to return to main TestCase execution from embedded TestCase \n\t    or Keyword if Step Into was used before</li>\n</ul>\n<h3>Debug view</h3>\n<p>When execution is suspended the <b>Debug</b> view shows all the frames on current path in execution tree. \n\tBottom part of this path directly corresponds to the tree which can be seen in <b>Execution</b> view as \n\tdepicted below:\n\t</p>\n<img src=\"images/debug_debug_view.png\"/><br/>\n<img src=\"images/debug_execution_view.png\"/>\n<p>The bottom frame corresponds to <code>Project</code> suite (this is a directory in file system, so there is a\n\tlittle directory decoration visible). Next frame corresponds to <code>Calculations</code> suite (which is a\n\t<code>calculations.robot</code> file) and the frame above it represents <code>Divisions</code> test inside that \n\tsuite. Next frames do not correspond to any node inside the execution tree visible in <b>Execution</b> view. It\n\tcan be read that stopped execution is currently inside <code>Divisions</code> test at instruction in line \n\t<code>35</code>, which called a keyword <code>Divide</code> which then called another keyword \n\t<code>BinaryDivision</code> from line <code>57</code> which finally called library keyword <code>Evaluate</code>\n\tcoming from <code>BuiltIn</code> library at line <code>61</code>. \n\t</p>\n<p>Additionally you may see that there is a single execution thread (RF executes tests in single thread); the \n\texecution is suspended and agent is communicating with RED using localhost at port <code>59344</code>.\n\t</p>\n<h3 id=\"debug_shell_view\">Debug Shell view</h3>\n<p>Whenever execution is suspended and a frame inside <b>Debug</b> view is selected then it is possible to use\n\t<b>Debug Shell</b> view in order to evaluate different expressions. The view is not opened in <b>Debug</b>\n\tperspective by default and needs to be opened using <a class=\"command\" href=\"javascript:executeCommand('org.eclipse.ui.views.showView(org.eclipse.ui.views.showView.viewId=org.robotframework.ide.DebugShell)')\">\n\tWindow -> Show View -> Other... -> Robot -> Debug Shell</a>.\n\t</p>\n<img src=\"images/debug_shell.png\"/>\n<p>The view allows to evaluate expressions in 3 modes:\n\t</p>\n<ul>\n<li><b>ROBOT</b> in which <b>keyword</b> calls can be executed; under the hood it uses <code>BuiltIn.Run Keyword</code>\n\t   keyword from standard library,\n\t   </li>\n<li><b>VARIABLE</b> in which variable-like expressions can be evaluated,\n\t   </li>\n<li><b>PYTHON</b> which allows to evaluate Python expressions; under the hood the expression is passed to\n       <code>BuiltIn.Evaluate</code> keyword which effectively calls Python <code>eval()</code>.\n       </li>\n</ul>\n<p>Switching between modes is done using view buttons or through <kbd>Ctrl + T</kbd> shortcut. The view\n\tremembers last 5 exuected expressions so it is possible to switch between them using up/down arrows. \n\tIn <b>ROBOT</b> and <b>PYTHON</b> mode it is possible to continue expression in multiple lines using \n\t<kbd>Shift+Enter</kbd> keys.\n\t</p>\n<h3>Variables view</h3>\n<p>Whenever you select some frame inside <b>Debug</b> view the Robot variables defined inside it are shown in\n\t<b>Variables</b> view. This view handles scalar, list and dictionary variables. The scalar variable only shows \n\tits value while the other two types are showing also the their contents inside it. Depending on the type of \n\tvariable the icon have different color assigned as visible on image below:\n\t</p>\n<img src=\"images/debug_variables.png\"/>\n<p>As you can see some of the variables are displayed under <b>Automatic Variables</b> node. This is a place\n\twhere all the variables which are built-in into the Robot are gathered together (refer to <a class=\"external\" href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#built-in-variables\" target=\"_blank\">\n\tRF User Guide</a>). All the user variables are displayed on top-level.\n\t</p>\n<p>Variable scope (see <a class=\"external\" href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-scopes\" target=\"_blank\">\n\tUser Guide</a> on this topic) is reflected in this view using icon decoration: <b>G</b>, <b>S</b>, <b>T</b> or <b>L</b>\n\tis placed on variable icon for <b>Global</b>, <b>Suite</b>, <b>Test</b>, <b>Local</b> scopes. You may find out\n\tthat global-scoped variables are visible for every single stack frame, suite-scoped variables are only visible \n\tin a suite frame and frames below, test-scoped variables only in test frame and below while local-scoped variables\n\tonly in current frame. Of course for example <code>${SUITE_NAME}</code> automatic variable (which has suite scope)\n\tmay be visible for all suite frames, however it may have different values as the suites are nested. \n\t</p>\n<p>For both dictionaries and lists the actual type of the python object is written in <b>Value</b> column. On the picture above\n\t<b>DotDict[3]</b> for <code>&amp;{dictionary}</code> variable mean that in python this object has type <b>DotDict</b>, \n\tthe rest mean that there are <code>3</code> elements inside it. Lists are labeled in the same way. \n\tAdditionally you may display <b>Actual Type</b> column which would also show types of \n\tobjects for scalar variables and for objects inside list/dictionaries. To do it click on arrow icon in the top \n\tright corner of the Variables view, choose <b><code>Layout -> Select Columns...</code></b> and select <b>Actual Type</b>\n\tcolumn.\n\t</p>\n<p>Variables are send from Robot to RED every time when RED is ordered to suspend the execution. Sometimes you may observe \n\tthat variables are highlighted with yellow color:\n\t</p>\n<img src=\"images/debug_vars_changed.png\"/>\n<p>\n\tThis mean that variable <code>${scalar}</code> either changed the value comparing to previous time when variables\n\twere send to RED or it didn't existed previously. Same highlighting will be used if you manually change the value.\n\t</p>\n<h3>Changing variables</h3>\n<p>Apart from displaying variables, it is possible to change their values when execution gets suspended.\n\tThis can be done through <b>Variables</b> view in 3 possible ways:\n\t</p>\n<ul>\n<li>by editing the cell with value in <b>Value</b> column,\n\t\t</li>\n<li>by choosing <b>Change Value...</b> from context menu of selected variable,\n\t\t</li>\n<li>inside the panel at the bottom of <b>Variables</b> view.\n\t\t</li>\n</ul>\n<h4>Variable types</h4>\n<p>Scalar variables are assigned with provided value. In case of lists or dictionaries just use usual RobotFramework\n\tseparators in order to provide whole new list/dictionary. For example writing:\n\t</p>\n<code>1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;4\n\t</code>\n<p>for list - variable will create a new list consisting 4 elements while writing:\n\t</p>\n<code>a=1&nbsp;&nbsp;&nbsp;&nbsp;b=2&nbsp;&nbsp;&nbsp;&nbsp;c=3\n\t</code>\n<p>for dictionary - variable will create a new dictionary consisting 3 key-value pairs. Alternatively list or \n\tdictionary elements may be provided in comma-separated syntax using brackets:</p>\n<code>[1,2,3,4]</code> and: <code>{a=1,b=2,c=3}</code>\n<p>for lists and dictionaries respectively.\n\t</p>\n<dl class=\"note\">\n<dt>Note</dt>\n<dd>Beside changing values of top-level variables it is also possible to change the values inside the lists or \n\t\tdictionaries just the way it is described above.\n\t   </dd>\n</dl>\n<p>If the value changes successfully the whole variable will be highlighted with yellow color, otherwise\n\tyou will be presented with error message in case of problems.\n\t</p>\n<h3>Editor</h3>\n<p>After suspension you may open source file related to any frame by double clicking on it. By default editor for\n\ttop frame is opened. Of course some frames may not have related source (for example frame representing a suite made\n\tfrom directory). Remember that RED debugger only supports debugging Robot code so you will not be able to debug\n\tpython code for library keywords (you may however setup a session in which <a href=\"robot_python_debug.html\">both \n\tRF &amp; python code is debugged</a>). Frames created for library keywords have special kind of editor which \n\tallows to find the source code for this keyword.\n\t</p>\n<img src=\"images/debug_editor.png\"/>\n<h4>Instruction pointers</h4>\n<p>The editor opened for any frame displays <b>instruction pointer</b> - by default it's a green background\n\tdisplayed in line which relates to chosen stack frame. You may also notice that instruction pointer for\n\ttop frame is a bit darker than pointers for other frames. The way the instruction pointers are displayed can be configured\n\tin preferences: <code><a class=\"command\" href=\"javascript:executeCommand('org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.ui.editors.preferencePages.Annotations)')\">\n\tGeneral -> Editors &gt; Text Editors &gt; Annotations</a></code> (change annotations <b>Debug Call Stack</b> for \n\tordinary frame or <b>Debug Current Instruction Pointer</b> for top frame)\n\t</p>\n<p>You may also encounter situation in which current frame is somehow erroneous. This situation is rather unusual\n\tin local launches (although may happen) but it can be more common in remote debugging sessions. There may be many \n\tdifferent causes for such debugging errors but in general it happens when remote code under execution differs\n\tfrom the code found locally in RED workspace. For example picture below presents situation in which remotely\n\texecuting <code>types.robot</code> suite calls <code>Log</code> keyword, but in local code there is a call to \n\t<code>Log many</code> keyword. As you can see instruction pointer in this situation is RED and there is a problem\n\texplanation when you hover the cursor over the problematic line.\n\t</p>\n<img src=\"images/debug_editor_error.png\"/>\n<p>Similarly as with usual instruction pointer the outlook of erroneous annotations can be also changed in preferences\n\t(look for <b>Red Erroneous Debug Call Stack</b> and <b>Red Erroneous Debug Current Instruction Pointer</b>).\n\t</p>\n<h4>Showing variables</h4>\n<p>The editor shows current values of variables when hovering mouse cursor over any variable name. This is depicted\n\ton image above, where <code>${scalar}</code> variable is shown to have current value of <code>100</code>.\n\t</p>\n<h4 id=\"assist_editor\">Assistance editor</h4>\n<p>Library keyword frames do not display the code, but instead special kind of <b>debugger assistance</b> editor\n\tis used. For example if you <b>Step Into</b> the library keyword you will see following editor opened:\n\t</p>\n<img src=\"images/debug_assist_editor.png\"/>\n<p>One may change <a href=\"preferences.html\">Debugger preferences</a> in order to never suspend inside the \n\tlibrary keyword this way.\n\t</p>\n<p>Additionally assistance editor may also describe erroneous debugger states if there is no source in which\n\tinstruction pointer can be shown. You may found yourself in this situation even in local launches when your test\n\tcall some unknown keyword: \n\t</p>\n<img src=\"images/debug_assist_editor_error.png\"/>\n<h3>Continuing</h3>\n<p>Whenever you're ready to resume tests execution simply hit <b>Resume</b> button (or <kbd>F8</kbd>) and \n\tdebugger will suspend on next breakpoint or in next erroneous state (if not disabled in preferences) or whenever \n\tyou explicitly pause the execution. Apart from that you may perform step. There are 3 kinds of steps:\n\t</p>\n<ul>\n<li><b>Step Into</b> <kbd>F5</kbd> - this kind of step is only possible for top stack frame. When performing\n\t\t<b>step into</b> the execution will resume only for a single step which will enter inside into the keyword from current\n\t\tline.\n\t\t<p></p></li>\n<li><b>Step Over</b> <kbd>F6</kbd> - this kind of step is possible for every frame on stack and it will \n\t\tbehave differently for each of them. In general this kind of step means 'suspend the execution on next keyword\n\t\tfrom instruction pointed by selected stack frame on the same level'.\n\t\t<p></p></li>\n<li><b>Step Return</b> <kbd>F7</kbd> - similarly to <b>Step Over</b> this action is possible for every frame\n\t\ton stack and will have different behavior. This kind of step means 'suspend the execution on next keyword which\n\t\twill be executed after selected frame have ended'. For frame related to user keyword this mean that debugger\n\t\twill pause on next instruction after this user keyword ends. For test-related frame the debugger will suspend\n\t\tat the very first instruction in next test (if any). For suite-related frame the debugger will suspend at very \n\t\tfirst keyword in next suite (if any). \n\t\t<p></p></li>\n</ul>\n<p>Of course the debugger will suspend if it encounter e.g. breakpoint inside the code which should be stepped over. \n\t</p>\n</body>\n</html>"
}