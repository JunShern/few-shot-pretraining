{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "5872",
    "text": "Q:\n\nTrying to draw an ellipse in a WPF window, but it is not visible\n\nI am trying to create my own graph user control, I have one already working on win forms and I am trying to move it into WPF world.\nI am starting with learning how to do drawing, so first thing I was trying to draw a black ellipse that fills an entire window, just to learn how coordinates works in WPF.\nSo here is the code, when I run the application, nothing is displayed, any idea what am I missing?\npublic partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n    }\n\n    protected override void OnRender(DrawingContext drawingContext)\n    {\n        base.OnRender(drawingContext);\n\n        drawingContext.DrawEllipse(Brushes.Black, new Pen(Brushes.Black, 1), new Point(Width / 2, Height / 2), Width / 2, Height / 2);\n    }\n}\n\nA:\n\nWPF is very different from WinForms. You do not have something like a Paint event handler where you constantly need to repaint invalidated areas.\nThe easist way to draw an ellipse that fills the whole window area in WPF is this XAML:\n<Window ...>\n    <Grid>\n        <Ellipse Stroke=\"Black\" Fill=\"Black\"/>\n    </Grid>\n</Window>\n\nbut of course there are a lot of other ways to achieve the same result.\nIf you need to do more complex things, WPF offers a large variety of classes that support graphics and multimedia. I'd suggest starting to read the Graphics section of the online documentation on MSDN.\n\nTo come back to your specific problem, there are several things to mention.\nFirst, you would have seen the result of your OnRender override if you had set the Window's Background property to Transparent and had drawn the ellipse in a color other than Black.\nThen you would have realized that the drawn ellipse is larger than the window's client area. This is because the values of the Width and Height properties include the Window border. Even then, using the Width and Height properties for getting the actual width and height of a UI element in WPF is not the proper way, because these properties return double.NaN unless they were explicitly set (except in the Window class).\nInstead, you would usually use the ActualWidth and ActualHeight properties, as in this UserControl (which perhaps does exactly what you intended):\npublic partial class DrawingControl : UserControl\n{\n    public DrawingControl()\n    {\n        InitializeComponent();\n    }\n\n    protected override void OnRender(DrawingContext drawingContext)\n    {\n        base.OnRender(drawingContext);\n\n        drawingContext.DrawEllipse(Brushes.Black,\n            new Pen(Brushes.Black, 1),\n            new Point(ActualWidth / 2, ActualHeight / 2),\n            ActualWidth / 2, ActualHeight / 2);\n    }\n}\n\n"
}