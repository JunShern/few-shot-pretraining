{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8846",
    "text": "Q:\n\nrails select records which have duplicates\n\nFor my case i want to select all duplicates records from table\nfor example\ntable1 \n\nid | name | sub_name\n\n1  | joe  | j1\n2  | tim  | t1 \n3  | ben  | b1    \n4  | joe  | j2    \n5  | tim  | t2 \n\ni vant to select \n [#<table1 id: 1, name: \"joe\", sub_name: \"j1\">, #<table1 id: 4, name: \"joe\", sub_name: \"j2\">, #<table1 id: 2, name: \"tim\", sub_name: \"t1\">, #<table1 id: 5, name: \"tim\", sub_name: \"t2\">]\n\n and then display\n\n joe\n  - j1\n  - j2\n tim\n  - t1\n  - t2\n\nCan anybody help me to do this using AR or SQL.\ni tried this query Table1.group(:name).having(\"count(*) > 1\"\nbut the result was \n[#<table1 id: 1, name: \"joe\", sub_name: \"j1\">, #<table1 id: 2, name: \"tim\", sub_name: \"t1\">]\nor result.count returns\n{[\"joe]=>2, [\"tim\"]=>2}\n\nA:\n\nWell I don't know if this is the most efficient way but you could:\nnames_with_multiple_rows = Table1.group(:name).having(\"count(*) > 1\")\nres = names_with_multiple_rows.inject({}) do |h, m|\n  h[m.name] = Table1.select(:sub_name).where(name: m.name)\n  h\nend\n\nNow res is a hash where the keys is the name and the values are the sub_names.\n\n"
}