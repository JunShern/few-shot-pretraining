{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "2896",
    "text": "Q:\n\nHow to compare .net FW version number with number stored in variable\n\nSuper new here and to #Powershell. I'm making a script to check whether the .Net Framework version that is installed is greater than or equal to a version number stored in a variable.\nThe issue I have is when setting up the variable that filters down to the version number.\n$installed = (Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\' |  Get-ItemPropertyValue -Name Version | Where { $_.Version -ge $software }) -ne $null\nI want to compare the .Net Framework Version found in\n\nHKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\n\nto whichever version is installed on a Windows 10 computer to see if it is greater than or equal. I've tried comparing the release number in the registry, but the Version is more relevant for what I'm doing.\nI want to write a message to the console and to a text file\n$software = '4.7.02053'\n$installed = (Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\' | Get-ItemPropertyValue -Name Version | Where { $_.Version -ge $software }) -ne $null\nIf(-not $installed) {\n    \"$software is NOT installed.\"| Out-File -FilePath C:\\Pre-Req_Log.txt -append\n    Write-Host \"'$software' is NOT installed.\";\n    pause\n} else {\n    \"$software is installed.\"| Out-File -FilePath C:\\Pre-Req_Log.txt -append\n    Write-Host \".Net FW '$software' is installed.\"\n    }\nMy expected result is to see '4.7.02053' is (or not) Installed in the text file and it be correct. It doesn't matter if it's equal, as long as it's that version or greater I will be happy.\n\nA:\n\nTo compare version numbers, don't compare them as strings, cast them to [version] (System.Version) and then compare them:\n$refVersion = [version] '4.7.02053'\n\n$installedVersion = [version] (Get-ItemPropertyValue -LiteralPath 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full' -Name Version)\n\nif ($installedVersion -ge $refVersion) {\n  # installed\n  # ...\n}\nelse {\n  # not installed\n  # ...\n}\n\nIf you use these [version] instances inside an expandable string (\"...\"), you'll get the expected string representation, but note that outputting them as-is to the console or via Out-File / > will show a tabular display with the version-number components shown individually. To force the usual string representation, use enclosing \"...\" - e.g., \"$refVersion\", or call .ToString(), e.g., $refVersion.ToString()\n\n"
}