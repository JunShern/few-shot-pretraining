{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 1 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains [\"Compared to the previous titles in the series I've owned Rails Cookbook seems to have fewer recipes but as it is tackling an entire application framework and some serious issues, some of the solutions and discussions run a lot longer. (0.190)\", 'Despite already deploying a couple of simple Rails apps I found that there was the odd useful tip in these chapters. (0.192)', 'Both books have excellent coverage of the various aspects of Rails, with a great deal of overlap. (0.184)', 'With almost all \"cookbook\" style books I seem to be left feeling that a number of the recipes are just a little too obvious and covered well in beginner tutorials. (0.187)', 'Most of them tacitly assume you know some other language and gloss over basic things like structuring a program with control flow, functional (de)composition, and proper use of objects, or they make a hash out of trying to introduce them. (0.190)', \"Ruby or Python are probably the best places to start; they're not going to be suitable for every type of programming you do, but they might teach you some good habits before you learn other languages with horrific syntax and dangerous pointers, and you can get going very quickly.For Ruby, there's Chris Pine's Learn to Program [pine.fm] or Why the Lucky Stiff's Poignant Guide to Ruby [poignantguide.net] which is whimsical, but does pretty much the same thing, or just go to Try Ruby [hobix.com] and type help. (0.189)\", 'I wrote the last 2 recipes in that chapter and that code is taken straight out (in simplified form) from one of my applications. (0.197)', 'About the only redeeming value was the information on Mongrel and the detailed instructions to get Rails installed and running on all the different platforms.Speaking of which, though, the devoting of a good chunk of paper real estate to installation, seems to be space better left for meatier topics. (0.193)']."
        }
    ],
    "doc_id": "2350",
    "text": "Posted\nby\nsamzenpuson Monday February 26, 2007 @03:58PM\nfrom the get-cooking dept.\n\nhonestpuck writes \"When reading the foreword of Rails Cookbook I felt a strong kinship with Zed Shaw, I too have fond memories of the first edition of Perl Cookbook and the way I relied on it once I'd taken the training wheels off. Since that one I have relied on several of the O'Reilly Cookbook series. It is only when I discard the early tutorial and dive in the deep end with a \"cookbook\" on my desk that I really start to learn proficiency.\" Read the rest of honestpuck's review.\n\nRails Cookbook\n\nauthor\n\nRob Orsini\n\npages\n\n514\n\npublisher\n\nO'Reilly\n\nrating\n\n7\n\nreviewer\n\nhonestpuck\n\nISBN\n\n0596527314\n\nsummary\n\nfor programmers who know something about web development but are early in their use of Rails,\n\nI felt timorous and unsure when I finished Agile Web Development with Rails, a marvelous tutorial that introduced me to my first real web development framework (I must have enjoyed it, I just bought the second edition). Since I have volunteered to develop a fairly large and complex web application in Rails I awaited the arrival of my copy of Rails Cookbook with hopeful anticipation and bated breath.\n\nRob Orsini, his fellow contributors (15 in all) and the team at O'Reilly have once again delivered. Compared to the previous titles in the series I've owned Rails Cookbook seems to have fewer recipes but as it is tackling an entire application framework and some serious issues, some of the solutions and discussions run a lot longer. The book is targeted at programmers who know something about web development but are early in their use of Rails, though it should be helpful to all Rails developers.\n\nThe book starts with tackling issues of installation and getting development tools installed in the first two chapters. Despite already deploying a couple of simple Rails apps I found that there was the odd useful tip in these chapters. The book then covers each of the three main sections of Rails; Active Record, Action View and Action Controller. The rest of the book goes on with large chapters on testing, Javascript, debugging, performance and hosting and deployment. Along the way it also covers REST, Action Mailer, security, plug-ins and graphics.\n\nThe extremely large section on Active Record was to me the most useful. I seem to spend an inordinate percentage of my Rails coding time with Active Record and it contains a large part of Rails power so I appreciated the size of this chapter. By contrast the chapter on graphics is almost entirely unread.\n\nIt seems obvious that this book should be compared to Pragmatic's Rails Recipes. The first point of difference is that Rails Cookbook covers installation and setup. The second point is that is 'Recipes' covers Rails 1.1 while 'Cookbook' targets the brand new Rails 1.2. As a project fairly new on the scene Rails is a fast moving target so the six months between the two books makes a difference. Both books have excellent coverage of the various aspects of Rails, with a great deal of overlap. 'Recipes' has more, shorter pieces while 'Cookbook' tends towards longer pieces with more discussion. 'Cookbook' is also more general, with more recipes more likely to be useful in every Rails project you write.\n\nThe style is different between the two. Here Cookbook comes off second best, it feels as though tightly edited by a number of hands and ends up lacking personality; functional but cold compared to Recipes. The writing, however, is good. It's easily read, at times it feels like a good textbook. The layout is clean, it is easy to find the information you need from each recipe when you want.\n\nWith almost all \"cookbook\" style books I seem to be left feeling that a number of the recipes are just a little too obvious and covered well in beginner tutorials. There is some of this in Rails Cookbook, most notably the first two chapters, but overall the book will be useful to any beginner to intermediate Rails programmer. Personally I had a couple of moments where I read a tip and wanted to scream as it demonstrated and explained in a few short sentences and half a page of code what had taken me hours to discover for myself.\n\nThe \"Cookbook\" series all seem to be books worth the price and shelf space. This one is no exception. I'd give it three out of five with an extra half for its timely information on Rails 1.2 and would recommend it for all Rails programmers from the absolute beginner through to all but the most experienced. If you already have a copy of 'Recipes' and are happy with it then you might want to stick with that till either volume is updated for the next major revision of Rails, otherwise you will almost certainly appreciate a copy of Rails Cookbook.\n\nThen you'll _never_ touch Python!I have a co-worker who loves it and whenever I say something like, \"I'm going to write a small program around a few syscalls and some low level bit twiddling in C\" his response is always \"Oh, you know Python can do that, right? And it'll be faster!\"\n\nIt actually looks like a decent language, but he's turned me off to it (and it seems to grab a lot of the things I don't like from perl [disclaimer: I like perl] and very few of the ones that I do). I'll learn it sometime, but I\n\nI'm a geek who uses technology in the service of the arts, but I've never been a programmer. Can anyone recommend a language in which I can learn the basics of programming, but is still powerful enough for me to do useful things? I'm comfortable with a soldering iron and piano, but the mysteries of writing code have always been outside my ken.I don't want to become a professional, I'd just like to do know what to do when I have to write a script and make simple web apps. The only real programmers I know\n\n......... no, seriously, help this guy out. I'm not about to recommend PERL or Java or SQL, even though that's really all I'm semi-literate in.\nAnd out of those, only java might come close to the requirements. I'd like to know what you guys recommend as well\n\nC'mon, I was just about to recommend Java. It's a good language to start off with since there's a ton of information out there, it's a flexable language that you can use for tons of different use cases, and it's a good introduction to OO programming, which if you're starting from scratch, is the way I'd go. I would stay away from stuff like PERL and PHP since the former is just an explosion at the punctuation factory, and the latter could help instill bad practices from the get-go since it's so easy to h\n\nI'd like to append that perl is a good language to work for people who are heavy command line users. It was origionally designed as bash+, and it still fills that niche quite well. It's OO is truly horrid though, and for the one who was asking, I'd agree, perl is bad for him.\n\nPython's definitely a good fit. It's not my favorite language in the world, but it's got sensible syntax that isn't too alien (the indent thing really won't bite you unless you have a really crappy editor or you copy and paste code). And it also has loads of libraries, good support for all major platforms (OSX support is so-so, but pyobjc is nice), and a lot of people who can help you out (#python on irc.freenode.net for example).\n\nHere's the bad part: there's virtually no decent introductory programming texts for python or most other languages. Most of them tacitly assume you know some other language and gloss over basic things like structuring a program with control flow, functional (de)composition, and proper use of objects, or they make a hash out of trying to introduce them. To that end, I'd really recommend Structure and Interpretation of Computer Programs (aka SICP) as a learning text, but dear lord is it tedious and didactic. It's also going to teach you an abstract way of thinking that doesn't really map to python's practical structures (i.e. you're never going to use tail recursion generally, let alone an amb operator).\n\nI really love smalltalk for playing around with programming, not so much for the language itself (it's just okay) but for the way that you don't think about \"compiling\" or \"modules\" so much as you just have objects that you fiddle around with, and your changes just happen. Unfortunately, Squeak is such a poorly-documented disastrous hodgepodge that I can't recommend it to new programmers.\n\nSo it's kind of a desert out there for decent introductory texts, but a language with good community support and mostly helpful people will be a big boost, and python does stand out.\n\nI don't want you to think I asked the question and don't appreciate your taking the time to respond. I'm looking for some python books now. I guess I need some kind of compiler or libraries or something, so I'm going to search those out right now. Say, do I need to work in Linux to write python? I don't mind, I've got a machine around here I can use for Linux. I was waiting for the UbuntuStudio anyway, so I will have such a system soon.\n\nPython works great on windows as well as any unix. I recommend unix systems in general for development, but it's mostly a matter of using what you're comfortable with. Most tutorials are going to assume you're on Linux. And I see you've already discovered where you can get the interpreter from python.org. Ubuntu comes with python, but not necessarily a full install -- you'll probably want to install python2.5 from apt anyway.\n\nHere's a dopey question: I've got to use my Windows system for music and video production. I will set up an Ubuntu box next weekend, but I'm between projects and would like to spend some time playing with Python.If I install Python and the Win32all library and an IDE (maybe Boaconstrictor or one of those), there won't anything that runs using resources when I'm not actually working with Python, right? I mean, there won't be any libraries or little thingies running in the background that will take resourc\n\nPython won't install any extra daemons or services out of the box, and no python package you install is going to do that either. The only additional resource it'll suck up is disk space.Boa Constructor is actually pretty awful. PyDev for Eclipse is decent -- yeah, it's a Java IDE, but it's a good plugin. Now THAT will eat resources when you run it. For a lighter alternative, you can always use emacs if you can get used to its weirdness, and it has a great python mode (never thought I'd call emacs slim).\n\nIdle comes bundled with the Windows installer. I use that all the time. It is pretty simple, a colourized text editor mostly, but it doesn't have the pokey feel of Eclipse. About my only complaint about Idle is that it doesn't have any line numbering down the left side of the window. Instead the line numbers are in the lower right corner in a box which makes me look away from my code. It might be just me though.An good intro to Idle follows:http://hkn.eecs.berkeley.edu/~dyoo/python/idle_int ro/index.html [berkeley.edu]\n\nThe answer is of course Ruby. You can start with Chris Pine's Learn to Program [pine.fm] which walks you through the basics of Ruby programming, or for a more psychedelic way of learning programming there is always Why's poignant guide to ruby [poignantguide.net]. Then when you get advanced enough (you've read the pickaxe and possibly the ruby way) you can start working on the bi-weekly Ruby Quiz [rubyquiz.com]./ruby fanboy\n\nRuby or Python are probably the best places to start; they're not going to be suitable for every type of programming you do, but they might teach you some good habits before you learn other languages with horrific syntax and dangerous pointers, and you can get going very quickly.For Ruby, there's Chris Pine's Learn to Program [pine.fm] or Why the Lucky Stiff's Poignant Guide to Ruby [poignantguide.net] which is whimsical, but does pretty much the same thing, or just go to Try Ruby [hobix.com] and type help.\n\nGo straight to Objective C on OS X. Apple's development tools (e.g. XCode with Interface Builder, free) make it pretty easy to get started and the language is well established so you can find books, etc. More importantly, you'll be programming in an environment with first-rate multimedia support.\n\nI held off learning python for almost two years for this very reason (meeting someone who was slightly too enthusiastic in their advocacy). Turns out though that it actually *is* quite a nifty language;)\n\nPeople don't make a big enough fuss about the interactive interpreter, partly because it's hard to describe why it's so useful. Try it out though, starting with diveintopython.org.\n\nMake Rails Thread safe so the only option isn't to run multiple applications sucking up even more memory and I might be inclined to think it is a useful framework. WTF?! No I don't want to run a \"pack of mongrels\" or more than one FCGI process. Give me a break.Rails is awesome for developers (cause it's easy) but from a system and resource POV it's atrocious. And I thought I'd never find something that I disliked as much as PHP (due to security concerns, again, don't get me wrong, it has it's place).\n\nI think this has been reviewed once or twice before on Slashdot... but I digress.\n\nI agree that this is a fantastic book, as it shows you some incredibly slick stuff you can do using Rails. But unless you already have somewhat of an understanding of Ruby then I'd strongly recommend getting a separate reference book just for Ruby by itself. O'Reilly makes one of those, too.:)\n\n> then I'd strongly recommend getting a separate> reference book just for Ruby by itself.\n\nThe Ruby Way [amazon.com] is an excellent book for that, plus, the author, Hal Fulton, is a nice guy. And his RubyForge user account name [rubyforge.org] is \"hal9000\", for which he gets additional points.\n\nI had this book for about 26 hours before I returned it, I was deeply displeased by the repetition from the existing work, Rails Recipes. All the cookbook entries about model relationships, polymorphic associations, etc, were lifted straight from Rails Recipes, right down to using Magazines, Readers and Subscriptions as the example objects.\n\nAnd, while the book has a shiny \"Rails 1.2\" badge on the cover, very little of it had anything to do with Rails 1.2 whatsoever, there were only a handful of recipes in the very back which dealt with the new features.\n\nPlus, was it really necessary to burn 3 pages talking about how to join a discussion group of fellow Rails developers? If you're a web developer and you can't find an online community to discuss the language/framework, you need more help than Rob's book is able to offer...\n\nJaredbpd,\nI am sorry to disappoint you but nothing was lifted from Rails Recipes. I would like to find you a recipe that mixes join models and polymorphism in Rails Recipe. I wrote the last 2 recipes in that chapter and that code is taken straight out (in simplified form) from one of my applications. I actually wrote the join model and polymorphism one and then I was asked to write one just about polymorphism as introduction to the concepts. The editor thought that my recipe was a little too advanced.\n\nAlso, that blog post has a ton of errors. Here's one: If you want to write a Web application in Ruby, there is only one solution. Only one. Ruby on Rails. Hm, about about Camping [hobix.com] or Nitro [nitroproject.org]?\n\nRails scales perfectly well, just the same as any other share-nothing approach.\n\nYou don't think the fact that people naturally think imperatively and not functionally has no bearing on the situation?When it's the difference between lisp, which was marginally easier to develop with once you understood it, or cobol, which was easier to understand, but harder to develop with once you knew it, which do you think people would choose?\n\nCobol more than nine times out of ten...and with the increase in coders, there was an increase in available code. Pathways to solve common problems were made a\n\nI don't know how people \"naturally\" think; for me grokking functional programming was one of those eureka! moments and it really felt natural. I still write a lot of functional stuff even in procedural/OO languages; Ruby lends itself well to that. But I agree with your larger point. One of the things that really blew me away about RoR was seeing someone implement a really good declarative security mechanism [writertopia.com] in about 300 lines. The Java version (JAAS) is an entire library that I never was able to fully figur\n\nYes, the algorithm is confusing. However, the C version is longer, but not *that* much longer. It also doesn't have any comically-long symbol names like multiple-value-bind. Granted, that's not an intrinsic problem with Lisp, only with ANSI Common Lisp, but prefix math is also difficult for humans to deal with. I don't know if it would be any easier if we learned math that way from the start, but I suspect it's just not how the human brain works.I like Lisp and Paul Graham's essays almost had me won over, b\n\nI read that almost a year ago and its a great post. I agree with most of it yet still use Rails everyday. Notice in it he's giving an opinion about the future of Rails. However right now, its an amazingly productive framework to develop in if you're targeting startup web applications.To me the development tools for Rails is like a holy grail. Coming from.NET and Windows, switching all mac for Rails has given me a sort of coding nirvana that I didnt think possible. Developing code, writing tests, reusing ge\n\nFirst let me disclose I that I have worked with Java web appsusing Kiva, JRun, ATG Dynamo, Tomcat, Websphere, Spring Framework, JSEE. I havealso worked Perl+CGI, a smattering of cold fusion, plain old php,drupal, cakephp (rails like php framework).I am currently working on deploying a rails app.So what is my take on Ruby/Rails?\n\nBriefly here are the pros/cons as I see it:\n\npros:\n1) Ruby feels good to program in. Like Perl,PHP, or LISP you can\nlayout data using the language itself. S\n\nI own both titles (\"Rails Recipes\" by Chad Fowler) and IMO neither does a great job -- there's nothing in this book not already covered by the definitive DT/DHH Agile Rails Development book. About the only redeeming value was the information on Mongrel and the detailed instructions to get Rails installed and running on all the different platforms.Speaking of which, though, the devoting of a good chunk of paper real estate to installation, seems to be space better left for meatier topics. Especially on a top"
}