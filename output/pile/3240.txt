{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3240",
    "text": "Q:\n\nDeclaring a variable and setting its value from a SELECT query in Oracle\n\nIn SQL Server we can use this:\nDECLARE @variable INT;\nSELECT @variable= mycolumn from myTable;\n\nHow can I do the same in Oracle? I'm currently attempting the following:\nDECLARE COMPID VARCHAR2(20);\nSELECT companyid INTO COMPID from app where appid='90' and rownum=1;\n\nWhy this is not working?\n\nA:\n\nSELECT INTO\nDECLARE\n   the_variable NUMBER;\n\nBEGIN\n   SELECT my_column INTO the_variable FROM my_table;\nEND;\n\nMake sure that the query only returns a single row:\n\nBy default, a SELECT INTO statement must return only one row. Otherwise, PL/SQL raises the predefined exception TOO_MANY_ROWS and the values of the variables in the INTO clause are undefined. Make sure your WHERE clause is specific enough to only match one row\nIf no rows are returned, PL/SQL raises NO_DATA_FOUND. You can guard against this exception by selecting the result of an aggregate function, such as COUNT(*) or AVG(), where practical. These functions are guaranteed to return a single value, even if no rows match the condition.\nA SELECT ... BULK COLLECT INTO statement can return multiple rows. You must set up collection variables to hold the results. You can declare associative arrays or nested tables that grow as needed to hold the entire result set.\nThe implicit cursor SQL and its attributes %NOTFOUND, %FOUND, %ROWCOUNT, and %ISOPEN provide information about the execution of a SELECT INTO statement.\n\nA:\n\nNot entirely sure what you are after but in PL/SQL you would simply\nDECLARE\n  v_variable INTEGER;\nBEGIN\n  SELECT mycolumn\n    INTO v_variable\n    FROM myTable;\nEND;\n\nOllie.\n\n"
}