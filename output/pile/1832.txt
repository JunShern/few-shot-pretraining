{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1832",
    "text": "Q:\n\nDisplaying better error message than \"No JSON object could be decoded\"\n\nPython code to load data from some long complicated JSON file:\nwith open(filename, \"r\") as f:\n  data = json.loads(f.read())\n\n(note: the best code version should be:\nwith open(filename, \"r\") as f:\n  data = json.load(f)\n\nbut both exhibit similar behavior)\nFor many types of JSON error (missing delimiters, incorrect backslashes in strings, etc), this prints a nice helpful message containing the line and column number where the JSON error was found.\nHowever, for other types of JSON error (including the classic \"using comma on the last item in a list\", but also other things like capitalising true/false), Python's output is just:\nTraceback (most recent call last):\n  File \"myfile.py\", line 8, in myfunction\n    config = json.loads(f.read())\n  File \"c:\\python27\\lib\\json\\__init__.py\", line 326, in loads\n    return _default_decoder.decode(s)\n  File \"c:\\python27\\lib\\json\\decoder.py\", line 360, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"c:\\python27\\lib\\json\\decoder.py\", line 378, in raw_decode\n    raise ValueError(\"No JSON object could be decoded\")\nValueError: No JSON object could be decoded\n\nFor that type of ValueError, how do you get Python to tell you where is the error in the JSON file?\n\nA:\n\nI've found that the simplejson module gives more descriptive errors in many cases where the built-in json module is vague. For instance, for the case of having a comma after the last item in a list:\njson.loads('[1,2,]')\n....\nValueError: No JSON object could be decoded\n\nwhich is not very descriptive. The same operation with simplejson:\nsimplejson.loads('[1,2,]')\n...\nsimplejson.decoder.JSONDecodeError: Expecting object: line 1 column 5 (char 5)\n\nMuch better! Likewise for other common errors like capitalizing True.\n\nA:\n\nYou wont be able to get python to tell you where the JSON is incorrect. You will need to use a linter online somewhere like this\nThis will show you error in the JSON you are trying to decode. \n\nA:\n\nYou could try the rson library found here: http://code.google.com/p/rson/ . I it also up on PYPI: https://pypi.python.org/pypi/rson/0.9 so you can use easy_install or pip to get it.\nfor the example given by tom:\n>>> rson.loads('[1,2,]')\n...\nrson.base.tokenizer.RSONDecodeError: Unexpected trailing comma: line 1, column 6, text ']'\n\nRSON is a designed to be a superset of JSON, so it can parse JSON files.  It also has an alternate syntax which is much nicer for humans to look at and edit.  I use it quite a bit for input files.\nAs for the capitalizing of boolean values: it appears that rson reads incorrectly capitalized booleans as strings.\n>>> rson.loads('[true,False]')\n[True, u'False']\n\n"
}