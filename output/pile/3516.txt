{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3516",
    "text": "Q:\n\nInput 0 of layer conv1d_1 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: [None, 200]\n\nI'm working on application that should predict interesting moments in 10 sec audio files. I divided audio on 50ms chunks and extracted notes, so I have 200 notes for each example. When I add convolutional layer it returns an error: \n\nValueError: Input 0 of layer conv1d_1 is incompatible with the layer:\n  expected ndim=3, found ndim=2. Full shape received: [None, 200]\n\nHere is my code:\ndef get_dataset(file_path):\n  dataset = tf.data.experimental.make_csv_dataset(\n      file_path,\n      batch_size=12,\n      label_name='label',\n      na_value='?',\n      num_epochs=1,\n      ignore_errors=False)\n  return dataset\n\ntrain = get_dataset('/content/gdrive/My Drive/MyProject/train.csv')\ntest = get_dataset('/content/gdrive/My Drive/MyProject/TestData/manual.csv')\nfeature_columns = []\n\nfor number in range(200):\n  feature_columns.append(tf.feature_column.numeric_column('note' + str(number + 1) ))\n\npreprocessing_layer = tf.keras.layers.DenseFeatures(feature_columns)\n\nmodel = tf.keras.Sequential([\n    preprocessing_layer,\n    tf.keras.layers.Conv1D(32, 3, padding='same', activation=tf.nn.relu, input_shape=[None, 200]),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(50, activation=tf.nn.relu),\n    tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)\n])\nmodel.compile(\n    loss='binary_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy'])\nmodel.fit(train, epochs=20)\n\nWhat causes this problem and how can it be fixed?\n\nA:\n\nThe 1D convolution over sequences expects a 3D input. In other words, for each element in the batch, for each time step, a single vector. Consider the following:\nX = tf.random.normal([10, 200])\nconvolved = tf.keras.layers.Conv1D(32, 3, padding='same', activation=tf.nn.relu, input_shape=[None, 200])\nprint(convolved(X))\n\nThis throws an error:\n\nValueError: Input 0 of layer conv1d_3 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: [10, 200]\n\nHowever, If we provide for each of the 10 batch samples, for each of the 5 time steps, a 200 dimensional vector:\nX = tf.random.normal([10, 5, 200])\nconvolved = tf.keras.layers.Conv1D(32, 3, padding='same', activation=tf.nn.relu, input_shape=[None, 200])\nprint(convolved(X)\n\nThis works as it should. Therefore, in your case, for each audio file, for each second (depends on how you sample the data), you will have a single vector.\n\n"
}