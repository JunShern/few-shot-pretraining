{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 7 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4990",
    "text": "<?php\n\n/**\n * Zend Framework\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://framework.zend.com/license/new-bsd\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@zend.com so we can send you a copy immediately.\n *\n * @category   Zend\n * @package    Zend_Gdata\n * @subpackage Media\n * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)\n * @license    http://framework.zend.com/license/new-bsd     New BSD License\n * @version    $Id: MediaRating.php 20096 2010-01-06 02:05:09Z bkarwin $\n */\n\n/**\n * @see Zend_Gdata_Extension\n */\nrequire_once 'Zend/Gdata/Extension.php';\n\n/**\n * Represents the media:rating element specific to YouTube.\n *\n * @category   Zend\n * @package    Zend_Gdata\n * @subpackage YouTube\n * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)\n * @license    http://framework.zend.com/license/new-bsd     New BSD License\n */\nclass Zend_Gdata_YouTube_Extension_MediaRating extends Zend_Gdata_Extension\n{\n\n    protected $_rootElement = 'rating';\n    protected $_rootNamespace = 'media';\n\n    /**\n     * @var string\n     */\n    protected $_scheme = null;\n\n    /**\n     * @var string\n     */\n    protected $_country = null;\n\n    /**\n     * Constructs a new MediaRating element\n     *\n     * @param string $text\n     * @param string $scheme\n     * @param string $country\n     */\n    public function __construct($text = null, $scheme = null, $country = null)\n    {\n        $this->registerAllNamespaces(Zend_Gdata_Media::$namespaces);\n        parent::__construct();\n        $this->_scheme = $scheme;\n        $this->_country = $country;\n        $this->_text = $text;\n    }\n\n    /**\n     * Retrieves a DOMElement which corresponds to this element and all\n     * child properties.  This is used to build an entry back into a DOM\n     * and eventually XML text for sending to the server upon updates, or\n     * for application storage/persistence.\n     *\n     * @param DOMDocument $doc The DOMDocument used to construct DOMElements\n     * @return DOMElement The DOMElement representing this element and all\n     *         child properties.\n     */\n    public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)\n    {\n        $element = parent::getDOM($doc, $majorVersion, $minorVersion);\n        if ($this->_scheme !== null) {\n            $element->setAttribute('scheme', $this->_scheme);\n        }\n        if ($this->_country != null) {\n            $element->setAttribute('country', $this->_country);\n        }\n        return $element;\n    }\n\n    /**\n     * Given a DOMNode representing an attribute, tries to map the data into\n     * instance members.  If no mapping is defined, the name and value are\n     * stored in an array.\n     *\n     * @param DOMNode $attribute The DOMNode attribute needed to be handled\n     */\n    protected function takeAttributeFromDOM($attribute)\n    {\n        switch ($attribute->localName) {\n        case 'scheme':\n            $this->_scheme = $attribute->nodeValue;\n            break;\n        case 'country':\n            $this->_country = $attribute->nodeValue;\n            break;\n        default:\n            parent::takeAttributeFromDOM($attribute);\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function getScheme()\n    {\n        return $this->_scheme;\n    }\n\n    /**\n     * @param string $value\n     * @return Zend_Gdata_YouTube_Extension_MediaRating Provides a fluent interface\n     */\n    public function setScheme($value)\n    {\n        $this->_scheme = $value;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getCountry()\n    {\n        return $this->_country;\n    }\n\n    /**\n     * @param string $value\n     * @return Zend_Gdata_YouTube_Extension_MediaRating Provides a fluent interface\n     */\n    public function setCountry($value)\n    {\n        $this->_country = $value;\n        return $this;\n    }\n\n\n}\n"
}