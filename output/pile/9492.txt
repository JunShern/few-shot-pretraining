{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 6 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "9492",
    "text": "<?php\n\n/*\n * This file is part of the Assetic package, an OpenSky project.\n *\n * (c) 2010-2014 OpenSky Project Inc\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Assetic\\Factory\\Resource;\n\n/**\n * A resource is something formulae can be loaded from.\n *\n * @author Kris Wallsmith <kris.wallsmith@gmail.com>\n */\nclass DirectoryResource implements IteratorResourceInterface\n{\n    private $path;\n    private $pattern;\n\n    /**\n     * Constructor.\n     *\n     * @param string $path    A directory path\n     * @param string $pattern A filename pattern\n     */\n    public function __construct($path, $pattern = null)\n    {\n        if (DIRECTORY_SEPARATOR != substr($path, -1)) {\n            $path .= DIRECTORY_SEPARATOR;\n        }\n\n        $this->path = $path;\n        $this->pattern = $pattern;\n    }\n\n    public function isFresh($timestamp)\n    {\n        if (!is_dir($this->path) || filemtime($this->path) > $timestamp) {\n            return false;\n        }\n\n        foreach ($this as $resource) {\n            if (!$resource->isFresh($timestamp)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the combined content of all inner resources.\n     */\n    public function getContent()\n    {\n        $content = array();\n        foreach ($this as $resource) {\n            $content[] = $resource->getContent();\n        }\n\n        return implode(\"\\n\", $content);\n    }\n\n    public function __toString()\n    {\n        return $this->path;\n    }\n\n    public function getIterator()\n    {\n        return is_dir($this->path)\n            ? new DirectoryResourceIterator($this->getInnerIterator())\n            : new \\EmptyIterator();\n    }\n\n    protected function getInnerIterator()\n    {\n        return new DirectoryResourceFilterIterator(new \\RecursiveDirectoryIterator($this->path, \\RecursiveDirectoryIterator::FOLLOW_SYMLINKS), $this->pattern);\n    }\n}\n\n/**\n * An iterator that converts file objects into file resources.\n *\n * @author Kris Wallsmith <kris.wallsmith@gmail.com>\n * @access private\n */\nclass DirectoryResourceIterator extends \\RecursiveIteratorIterator\n{\n    public function current()\n    {\n        return new FileResource(parent::current()->getPathname());\n    }\n}\n\n/**\n * Filters files by a basename pattern.\n *\n * @author Kris Wallsmith <kris.wallsmith@gmail.com>\n * @access private\n */\nclass DirectoryResourceFilterIterator extends \\RecursiveFilterIterator\n{\n    protected $pattern;\n\n    public function __construct(\\RecursiveDirectoryIterator $iterator, $pattern = null)\n    {\n        parent::__construct($iterator);\n\n        $this->pattern = $pattern;\n    }\n\n    public function accept()\n    {\n        $file = $this->current();\n        $name = $file->getBasename();\n\n        if ($file->isDir()) {\n            return '.' != $name[0];\n        }\n\n        return null === $this->pattern || 0 < preg_match($this->pattern, $name);\n    }\n\n    public function getChildren()\n    {\n        return new self(new \\RecursiveDirectoryIterator($this->current()->getPathname(), \\RecursiveDirectoryIterator::FOLLOW_SYMLINKS), $this->pattern);\n    }\n}\n"
}