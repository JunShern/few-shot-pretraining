{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6723",
    "text": "Q:\n\nAjax request returns empty response using ServiceStack\n\ntotal n00b when it comes to restful stuff, ajax, and so forth so please be gentle.\nI have an issue whereby I have taken the example ServiceStack \"Todo\" service, and am trying to develop a mobile client using this service as a data source. I'm trying to learn how it all works so I can build a specific service which I feel SS is more suited to as opposed to WCF/WebAPI.\nAnyway let's say that the Service is running on  http://localhost:1234/api/todos\nI have enabled CORS support based on cobbling together information found in various other posts.\nSo my Configure function looks like this: \nPlugins.Add(new CorsFeature());\n\n            this.RequestFilters.Add((httpReq, httpRes, requestDto) =>\n            {\n                httpRes.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\n                //Handles Request and closes Responses after emitting global HTTP Headers\n                if (httpReq.HttpMethod == \"OPTIONS\")\n                {\n                    httpRes.AddHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n                    httpRes.AddHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type\");\n                    httpRes.StatusCode = 204;\n                    httpRes.End();\n                }\n            });\n\nand I have a service method like this on the TodoService:\n[EnableCors]\n        public object Post(Todo todo)\n        {\n\n            var t = Repository.Store(todo);\n            return t;\n        }\n\nUsing a browser (FF/IE) If I call this ajax function:\nvar todo = { content: \"this is a test\" };\n            $.ajax(\n            {\n                type: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify(todo),\n                timeout:20000,\n                url: \"http://localhost:1234/api/todos\",\n                success: function (e) {\n                    alert(\"added\");\n                    app.navigate(\"Todo\");\n                },\n                error: function (x, a, t) {\n                    alert(\"Error\");\n                    console.log(x);\n                    console.log(a);\n                    console.log(t);\n                }\n            }\n            );\n\nfrom http://localhost:1234, then it all works fine. The todo gets added and in the success function, \"e\" contains the returned todo object the service created.\nHowever, if I call this from anywhere else (http://localhost:9999 i.e the asp.net dev server that the mobile client app is running under) then, although the Service method executes, and the todo does get added on the server side, the response back to jquery is empty, and it hits the error function right away.\nI'm convinced I am doing something dumb but I can't for the life of me see it.\nAnyone have any clue? Thanks in advance...\nUpdate: Well it seems to work OK now, the problem appeared to be \n httpRes.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\n\noutside of the \"OPTIONS\" block.\nSo the code that works in apphost is\nPlugins.Add(new CorsFeature());\n            this.RequestFilters.Add((httpReq, httpRes, requestDto) =>\n            {\n\n                //Handles Request and closes Responses after emitting global HTTP Headers\n                if (httpReq.HttpMethod == \"OPTIONS\")\n                {\n                    httpRes.AddHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n                    httpRes.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    httpRes.AddHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type\");\n                    httpRes.StatusCode = 204;\n                    httpRes.End();\n                }\n            });\n\nA:\n\nso it turns out there was a problem in my original code; the amdended code is:\nPlugins.Add(new CorsFeature());\n            this.RequestFilters.Add((httpReq, httpRes, requestDto) =>\n            {\n\n                //Handles Request and closes Responses after emitting global HTTP Headers\n                if (httpReq.HttpMethod == \"OPTIONS\")\n                {\n                    httpRes.AddHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n                    //this line used to be outside the if block so was added to every header twice.                      \n                    httpRes.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    httpRes.AddHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type\");\n                    httpRes.StatusCode = 204;\n                    httpRes.End();\n                }\n            });\n\nSo the CorsFeature() plugin would appear to be correctly handling all CORs stuff for POST, GET and the pre-flight OPTIONS request is being handled by the RequestFilter (confusion - why doesn't the plugin just handle the OPTIONS request?) ; in the old code, the allow-origin header was being added twice for every request (by the plugin and by the filter) and this seems to have been confusing either jquery or the browser.\nNot that I fully understand any of this , I have some reading to do :) and it's all been rendered moot anyway since the mobile framework I am using (DXTreme) can't seem to handle anything other than JSONP (no good for me since I need POST/PUT) for a cross-domain Rest Data source, so I am already going to have to go the proxy route, or dump the framework, or find some other way around my issues.\n\n"
}