{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6924",
    "text": "Q:\n\nReturn value from Oracle function using Mybatis\n\nI have looked at a number of StackOverflow questions on this issue but can't find one that makes any sense.   This one comes closest but doesn't show how to get the return value from the function.\nHere's my mapper call:\npublic Long callMyFunction(@Param(\"recordId\") Long recordId, @Param(\"otherId\") Long otherId, @Param(\"date\") Date date, @Param(\"comments\") String comments);\n\nHere's the mapper XML:    \n<select id=\"callMyFunction\" parameterType=\"map\" statementType=\"CALLABLE\"  resultType=\"java.lang.Long\">\n    {  #{resultId,javaType=java.lang.Long,jdbcType=NUMERIC,mode=OUT} = call MYSCHEMA.MYPACKAGE.my_function(\n    #{recordId,jdbcType=NUMERIC,mode=IN},\n    #{otherId,jdbcType=NUMERIC,mode=IN},\n    #{date,jdbcType=DATE,mode=IN},\n    #{comments,jdbcType=VARCHAR,mode=IN})}\n</select>\n\nThe call works, but the return value (resultId) is always null.\nCan anybody spot the problem?  \n\nA:\n\nIf you want to return directly the result, then the SQL call must be:\nSELECT MYSCHEMA.MYPACKAGE.my_function(...) FROM DUAL\nIf you want to keep with calling the function in the procedure call style, that means the result is an OUT parameter (you env declared it OUT).\nThe minimum change would consist in adding a parameter to the mapper method signature:\npublic Long callMyFunction(@Param(\"recordId\") Long recordId, @Param(\"otherId\") Long otherId, @Param(\"date\") Date date, @Param(\"comments\") String comments, @Param(\"resultIdContainer\") Map<String, Long> resultIdContainer);\nIn the XML: forget the resultType, this is for selects. And the call:\n{  #{resultIdContainer.resultId, javaType=java.lang.Long,jdbcType=NUMERIC,mode=OUT} = call ...\nNot that I use here a map to contain the resutlId: an indirection is required: the function will write the parameter 'result' value somewhere you can read later (after your mapper call), you can also use a class with a resultId property.\n\n"
}