{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 19 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains [' * on the use of some options are as follows: (0.165)']."
        }
    ],
    "doc_id": "9594",
    "text": "/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\n/*\n *\n *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n */\n\npackage sun.security.krb5.internal;\n\nimport sun.security.krb5.Config;\nimport sun.security.krb5.KrbException;\nimport sun.security.krb5.Asn1Exception;\nimport sun.security.krb5.internal.util.KerberosFlags;\nimport sun.security.util.*;\nimport java.io.IOException;\n\n/**\n * Implements the ASN.1 KDCOptions type.\n *\n * <xmp>\n * KDCOptions   ::= KerberosFlags\n *      -- reserved(0),\n *      -- forwardable(1),\n *      -- forwarded(2),\n *      -- proxiable(3),\n *      -- proxy(4),\n *      -- allow-postdate(5),\n *      -- postdated(6),\n *      -- unused7(7),\n *      -- renewable(8),\n *      -- unused9(9),\n *      -- unused10(10),\n *      -- opt-hardware-auth(11),\n *      -- unused12(12),\n *      -- unused13(13),\n * -- 15 is reserved for canonicalize\n *      -- unused15(15),\n * -- 26 was unused in 1510\n *      -- disable-transited-check(26),\n *      -- renewable-ok(27),\n *      -- enc-tkt-in-skey(28),\n *      -- renew(30),\n *      -- validate(31)\n *\n * KerberosFlags   ::= BIT STRING (SIZE (32..MAX))\n *                      -- minimum number of bits shall be sent,\n *                      -- but no fewer than 32\n *\n * </xmp>\n *\n * <p>\n * This definition reflects the Network Working Group RFC 4120\n * specification available at\n * <a href=\"http://www.ietf.org/rfc/rfc4120.txt\">\n * http://www.ietf.org/rfc/rfc4120.txt</a>.\n *\n * <p>\n * This class appears as data field in the initial request(KRB_AS_REQ)\n * or subsequent request(KRB_TGS_REQ) to the KDC and indicates the flags\n * that the client wants to set on the tickets.\n *\n * The optional bits are:\n * <UL>\n *  <LI>KDCOptions.RESERVED\n *  <LI>KDCOptions.FORWARDABLE\n *  <LI>KDCOptions.FORWARDED\n *  <LI>KDCOptions.PROXIABLE\n *  <LI>KDCOptions.PROXY\n *  <LI>KDCOptions.ALLOW_POSTDATE\n *  <LI>KDCOptions.POSTDATED\n *  <LI>KDCOptions.RENEWABLE\n *  <LI>KDCOptions.RENEWABLE_OK\n *  <LI>KDCOptions.ENC_TKT_IN_SKEY\n *  <LI>KDCOptions.RENEW\n *  <LI>KDCOptions.VALIDATE\n *  </UL>\n * <p> Various checks must be made before honoring an option. The restrictions\n * on the use of some options are as follows:\n * <ol>\n * <li> FORWARDABLE, FORWARDED, PROXIABLE, RENEWABLE options may be set in\n * subsequent request only if the ticket_granting ticket on which it is based has\n * the same options (FORWARDABLE, FORWARDED, PROXIABLE, RENEWABLE) set.\n * <li> ALLOW_POSTDATE may be set in subsequent request only if the\n * ticket-granting ticket on which it is based also has its MAY_POSTDATE flag set.\n * <li> POSTDATED may be set in subsequent request only if the\n * ticket-granting ticket on which it is based also has its MAY_POSTDATE flag set.\n * <li> RENEWABLE or RENEW may be set in subsequent request only if the\n * ticket-granting ticket on which it is based also has its RENEWABLE flag set.\n * <li> POXY may be set in subsequent request only if the ticket-granting ticket\n * on which it is based also has its PROXIABLE flag set, and the address(es) of\n * the host from which the resulting ticket is to be valid should be included\n * in the addresses field of the request.\n * <li>FORWARDED, PROXY, ENC_TKT_IN_SKEY, RENEW, VALIDATE are used only in\n * subsequent requests.\n * </ol><p>\n */\n\npublic class KDCOptions extends KerberosFlags {\n\n    private static final int KDC_OPT_PROXIABLE = 0x10000000;\n    private static final int KDC_OPT_RENEWABLE_OK = 0x00000010;\n    private static final int KDC_OPT_FORWARDABLE = 0x40000000;\n\n\n    // KDC Options\n\n    public static final int RESERVED        = 0;\n    public static final int FORWARDABLE     = 1;\n    public static final int FORWARDED       = 2;\n    public static final int PROXIABLE       = 3;\n    public static final int PROXY           = 4;\n    public static final int ALLOW_POSTDATE  = 5;\n    public static final int POSTDATED       = 6;\n    public static final int UNUSED7         = 7;\n    public static final int RENEWABLE       = 8;\n    public static final int UNUSED9         = 9;\n    public static final int UNUSED10        = 10;\n    public static final int UNUSED11        = 11;\n    public static final int CNAME_IN_ADDL_TKT = 14;\n    public static final int CANONICALIZE    = 15;\n    public static final int RENEWABLE_OK    = 27;\n    public static final int ENC_TKT_IN_SKEY = 28;\n    public static final int RENEW           = 30;\n    public static final int VALIDATE        = 31;\n\n    private static final String[] names = {\n        \"RESERVED\",         //0\n        \"FORWARDABLE\",      //1;\n        \"FORWARDED\",        //2;\n        \"PROXIABLE\",        //3;\n        \"PROXY\",            //4;\n        \"ALLOW_POSTDATE\",   //5;\n        \"POSTDATED\",        //6;\n        \"UNUSED7\",          //7;\n        \"RENEWABLE\",        //8;\n        \"UNUSED9\",          //9;\n        \"UNUSED10\",         //10;\n        \"UNUSED11\",         //11;\n        null,null,\n        \"CNAME_IN_ADDL_TKT\",//14;\n        \"CANONICALIZE\",     //15;\n        null,null,null,null,null,null,null,null,null,null,null,\n        \"RENEWABLE_OK\",     //27;\n        \"ENC_TKT_IN_SKEY\",  //28;\n        null,\n        \"RENEW\",            //30;\n        \"VALIDATE\",         //31;\n    };\n\n    private boolean DEBUG = Krb5.DEBUG;\n\n    public static KDCOptions with(int... flags) {\n        KDCOptions options = new KDCOptions();\n        for (int flag: flags) {\n            options.set(flag, true);\n        }\n        return options;\n    }\n\n    public KDCOptions() {\n        super(Krb5.KDC_OPTS_MAX + 1);\n        setDefault();\n    }\n\n    public KDCOptions(int size, byte[] data) throws Asn1Exception {\n        super(size, data);\n        if ((size > data.length * BITS_PER_UNIT) || (size > Krb5.KDC_OPTS_MAX + 1))\n            throw new Asn1Exception(Krb5.BITSTRING_BAD_LENGTH);\n    }\n\n    /**\n     * Constructs a KDCOptions from the specified bit settings.\n     *\n     * @param data the bits to be set for the KDCOptions.\n     * @exception Asn1Exception if an error occurs while decoding an ASN1\n     * encoded data.\n     *\n     */\n    public KDCOptions(boolean[] data) throws Asn1Exception {\n        super(data);\n        if (data.length > Krb5.KDC_OPTS_MAX + 1) {\n            throw new Asn1Exception(Krb5.BITSTRING_BAD_LENGTH);\n        }\n    }\n\n    public KDCOptions(DerValue encoding) throws Asn1Exception, IOException {\n        this(encoding.getUnalignedBitString(true).toBooleanArray());\n    }\n\n    /**\n     * Constructs a KDCOptions from the passed bit settings.\n     *\n     * @param options the bits to be set for the KDCOptions.\n     *\n     */\n    public KDCOptions(byte[] options) {\n        super(options.length * BITS_PER_UNIT, options);\n    }\n\n    /**\n     * Parse (unmarshal) a KDCOptions from a DER input stream.  This form\n     * parsing might be used when expanding a value which is part of\n     * a constructed sequence and uses explicitly tagged type.\n     *\n     * @param data the Der input stream value, which contains one or more\n     * marshaled value.\n     * @param explicitTag tag number.\n     * @param optional indicate if this data field is optional\n     * @return an instance of KDCOptions.\n     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n     * @exception IOException if an I/O error occurs while reading encoded data.\n     *\n     */\n\n    public static KDCOptions parse(DerInputStream data, byte explicitTag, boolean optional) throws Asn1Exception, IOException {\n        if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))\n            return null;\n        DerValue der = data.getDerValue();\n        if (explicitTag != (der.getTag() & (byte)0x1F))  {\n            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n        } else {\n            DerValue subDer = der.getData().getDerValue();\n            return new KDCOptions(subDer);\n        }\n    }\n\n    /**\n     * Sets the value(true/false) for one of the <code>KDCOptions</code>.\n     *\n     * @param option an option bit.\n     * @param value true if the option is selected, false if the option is not selected.\n     * @exception ArrayIndexOutOfBoundsException if array index out of bound occurs.\n     * @see sun.security.krb5.internal.Krb5\n     */\n    public void set(int option, boolean value) throws ArrayIndexOutOfBoundsException {\n        super.set(option, value);\n    }\n\n    /**\n     * Gets the value(true/false) for one of the <code>KDCOptions</code>.\n     *\n     * @param option an option bit.\n     * @return value true if the option is selected, false if the option is not selected.\n     * @exception ArrayIndexOutOfBoundsException if array index out of bound occurs.\n     * @see sun.security.krb5.internal.Krb5\n     */\n\n    public boolean get(int option) throws ArrayIndexOutOfBoundsException {\n        return super.get(option);\n    }\n\n    @Override public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"KDCOptions: \");\n        for (int i=0; i<Krb5.KDC_OPTS_MAX+1; i++) {\n            if (get(i)) {\n                if (names[i] != null) {\n                    sb.append(names[i]).append(\",\");\n                } else {\n                    sb.append(i).append(\",\");\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    private void setDefault() {\n        try {\n\n            Config config = Config.getInstance();\n\n            // If key not present, returns Integer.MIN_VALUE, which is\n            // almost all zero.\n\n            int options = config.getIntValue(\"libdefaults\",\n                    \"kdc_default_options\");\n\n            if ((options & KDC_OPT_RENEWABLE_OK) == KDC_OPT_RENEWABLE_OK) {\n                set(RENEWABLE_OK, true);\n            } else {\n                if (config.getBooleanValue(\"libdefaults\", \"renewable\")) {\n                    set(RENEWABLE_OK, true);\n                }\n            }\n            if ((options & KDC_OPT_PROXIABLE) == KDC_OPT_PROXIABLE) {\n                set(PROXIABLE, true);\n            } else {\n                if (config.getBooleanValue(\"libdefaults\", \"proxiable\")) {\n                    set(PROXIABLE, true);\n                }\n            }\n\n            if ((options & KDC_OPT_FORWARDABLE) == KDC_OPT_FORWARDABLE) {\n                set(FORWARDABLE, true);\n            } else {\n                if (config.getBooleanValue(\"libdefaults\", \"forwardable\")) {\n                    set(FORWARDABLE, true);\n                }\n            }\n        } catch (KrbException e) {\n            if (DEBUG) {\n                System.out.println(\"Exception in getting default values for \" +\n                        \"KDC Options from the configuration \");\n                e.printStackTrace();\n\n            }\n        }\n    }\n}\n"
}