{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "641",
    "text": "Q:\n\nDjango ImportError for models.py\n\n(Updating my question with more information.)\nMy django app is running fine on my dev server. \nI have a view that pulls from the database using the below line that works fine:\nfrom myapp.models import MyTable\n\nHowever, if I add the above 'from/import' to another module (see below structure, it's the module named 'problem_module.py') I'm writing where I want to pull from the sqlite3 database, I get this error. \nraise ImportError(\"Could not import settings '%s' (Is it on sys.path?): %s\" % (self.SETTINGS_MODULE, e))\nImportError: Could not import settings 'myfolder.settings' (Is it on sys.path?): No module  named myfolder.settings\n\nI've read and tried various solutions recommended when people get this error, but I missing something because i'm unable to resolve it. \nI'm using Django 1.4 and have the lay-out as recommended. \n    mysite/\n         manage.py\n\n         mysite/\n            __init__.py\n            settings.py\n            urls.py\n            wsgi.py\n         myapp/\n            __init__.py\n            models.py\n            admin.py\n            views.py\n\n            indevelopment/\n                __init__.py\n                problem_module.py\n\nA:\n\nI figured out what was happening and why after going through the traceback carefully and looking at the django source code. Here is what happens.\nWhen you run:\n   python manage.py runserver\nthe environment variable gets set properly assuming you already changed this small little file or just don't pay attention to it because django 1.4 automatically configures it for you.\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myapp.settings\")\nHowever, because this setting of os.environ is under a:\n    if __name__ = \"__main__\"\nexpression, it only gets run if call that file directly, as you do with:\n    python manage.py runserver\nOtherwise, if you are running a file that needs that environment variable - say testing a module in Eclipse - , the os.environ needs to get set in another place (shell, etc).\nAll the that I got generally pointed to this but I needed the context.\nBut as a little adjustment (yes, not a good idea as it couples) on the source code you can also hardcode it in manually in/django/conf/__init__.py\nSpecifically to see where it happens, the change below works:\n# in module: /django/conf/__init__.py\n\nclass LazySettings(LazyObject):\n    def _setup(self):\n        try:\n            # Comment out the call to os.environ and hardcode in your app settings\n            #    settings_module = os.environ[ENVIRONMENT_VARIABLE]\n            # WARNING: bad practice to do this. ;.\n            settings_module = \"myapp.settings\"\n\n"
}