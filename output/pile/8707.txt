{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8707",
    "text": "Q:\n\nWhy is my class variable changing its value between methods?\n\nI am trying to load a bitmap animation to the screen. I have a float variable holdTime that is specified to hold the \"holdtime\" value for the animation. In my constructor I set the holdtimevariable to 0.1f but when I try to access the method in the class that is using the holdTime variable, the value of holdTime has changed to -107374176f. So somewhere between my constructor call and the method call the value has changed from 0.1f to -107374176f. \nTo make things a little bit more clearer let me show you some code: \nHere is the header file for the Game class, this is where I call the constructor of the Animation class that has the holdTime variable.\n  #pragma once\n\n#include \"Graphics.h\"\n#include \"Surface.h\"\n#include \"Animation.h\"\n#include \"FrameTimer.h\"\n\nclass Game\n{\npublic:\n    Game( class MainWindow& wnd );\n    void Go();\nprivate:\n    void UpdateModel();\n\nprivate:\n    MainWindow& wnd;\n    FrameTimer ft;\n    Surface surf = Surface(\"Test32x48.bmp\");\n    Animation testAnimation = Animation(0, 0, 32, 48, 4, surf, 0.1f);\n};\n\nYou see that I have this testAnimation at the bottom of the class. The last argument in the constructor call is the value that is ought be in holdTime.\nThis is how my Animation header file looks like: \n#include \"Surface.h\"\n#include \"Graphics.h\"\n#include <vector>\n\nclass Animation {\npublic:\n    Animation(int x, int y, int width, int height, int count, const Surface& sprite, float holdtime, Color chroma = Colors::Magenta);\n    void Update(float dt);\nprivate:\n    void Advance();\nprivate:\n    std::vector<RectI> frames;\n    int iCurFrame = 0;\n    float holdTime = 0;\n    float curFrameTime = 0.0f;\n};\n\nAnd this is the Animation Cpp file: \n #include \"Animation.h\"\n\nAnimation::Animation(int x, int y, int width, int height, int count,\n    const Surface& sprite, float holdtime, Color chroma)\n    :\n    sprite(sprite),\n    holdTime(holdTime),\n    chroma(chroma)\n{\n    for (int i = 0; i < count; i++)\n    {\n        frames.emplace_back(x + i * width, x + (i + 1) * width,y, y + height);\n    }\n}\n\nvoid Animation::Update(float dt)\n{\n    curFrameTime += dt;\n    while(curFrameTime >= holdTime) {\n        Advance();\n        curFrameTime -= holdTime;\n    }\n}\n\nvoid Animation::Advance()\n{\n    if (++iCurFrame >= frames.size()) {\n        iCurFrame = 0;\n    }\n\n}\n\nThere is only one method that is making use of holdTime and that is the method Update(float dt). \nIf we go back to the Game class and look at the Game.cpp file:\n#include \"MainWindow.h\"\n#include \"Game.h\"\n\nGame::Game( MainWindow& wnd )\n    :\n    wnd( wnd ),\n    gfx( wnd )\n{\n}\n\nvoid Game::Go()\n{\n    UpdateModel();\n}\n\nvoid Game::UpdateModel()\n{\n    testAnimation.Update(ft.Mark());\n}\n\nIn the Method Go() we call the method UpdateModel() which in turn is calling the Update() method in the animation class. This means that the first method to be executed in the Animation class after the constructor call is the update() method. When I debug the program I can see that the value of holdtime has changed between the constructor call and the Update() method call. But I don't know how since it I am not modifying the value somewhere else. It also seemes that the new value of holdTime is garbage value. \nIt became a lot of code in this question and it looks a bit messy and even though I lack the skills of writing a good Title I hope I made you somewhat clear what my problem is.\nThanks!\nUpdate:\nHere is the code for the FrameTimer class since the value returned from one of its methods is passed in into the Update() method:\nFrameTimer.H:\n#pragma once\n#include <chrono>\n\nclass FrameTimer\n{\npublic:\n    FrameTimer();\n    float Mark();\nprivate:\n    std::chrono::steady_clock::time_point last;\n};\n\nFrameTimer.cpp:\n#include \"FrameTimer.h\"\n\nusing namespace std::chrono;\n\nFrameTimer::FrameTimer()\n{\n    last = steady_clock::now();\n}\n\nfloat FrameTimer::Mark()\n{\n    const auto old = last;\n    last = steady_clock::now();\n    const duration<float> frameTime = last - old;\n    return frameTime.count();\n}\n\nEdit:\nmain.cpp:\n    int WINAPI wWinMain( HINSTANCE hInst,HINSTANCE,LPWSTR pArgs,INT )\n    {\n        MainWindow wnd( hInst,pArgs );      \n            Game game( wnd );\n            while( wnd.ProcessMessage() )\n            {\n                game.Go();\n            }\n    }\n\nAs you can see the game.Go() method is the first method that is called in main.\n\nA:\n\nYour Animation constructor is at fault:\nAnimation::Animation(int x, int y, int width, int height, int count,\n    const Surface& sprite, float holdtime, Color chroma)\n    :\n    sprite(sprite),\n    holdTime(holdTime),\n    chroma(chroma)\n{\n    for (int i = 0; i < count; i++)\n    {\n        frames.emplace_back(x + i * width, x + (i + 1) * width,y, y + height);\n    }\n}\n\nHere you attempt to initialise the member holdTime from the parameter holdTime.\nExcept, there is no parameter holdTime. There is only the parameter holdtime.\nHence instead you are actually initialising the member holdTime from itself (the next nearest \"match\" for that name), so it only retains its original, unspecified value (and in fact, reading an uninitialised variable results in your program having undefined behaviour).\nSo, you see, your member variable doesn't \"change\" at all \u2014 you never set it correctly. You'd have known that had you put some diagnostic output inside that constructor to examine the value and see whether it's what you thought it should be. None of the rest of the code was relevant or necessary.\nA properly-configured compiler should have warned you about this.\n\n"
}