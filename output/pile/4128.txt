{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4128",
    "text": "Q:\n\nNestJS - Use service inside Interceptor (not global interceptor)\n\nI have a controller that uses custom interceptor:\nController:\n@UseInterceptors(SignInterceptor)\n    @Get('users')\n    async findOne(@Query() getUserDto: GetUser) {\n        return await this.userService.findByUsername(getUserDto.username)\n    }\n\nI have also I SignService, which is wrapper around NestJwt:\nSignService module:\n@Module({\n    imports: [\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (configService: ConfigService) => ({\n                privateKey: configService.get('PRIVATE_KEY'),\n                publicKey: configService.get('PUBLIC_KEY'),\n                signOptions: {\n                    expiresIn: configService.get('JWT_EXP_TIME_IN_SECONDS'),\n                    algorithm: 'RS256',\n                },\n            }),\n            inject: [ConfigService],\n        }),\n    ],\n    providers: [SignService],\n    exports: [SignService],\n})\nexport class SignModule {}\n\nAnd Finally SignInterceptor:\n@Injectable()\nexport class SignInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n        return next.handle().pipe(map(data => this.sign(data)))\n    }\n\n    sign(data) {\n        const signed = {\n            ...data,\n            _signed: 'signedContent',\n        }\n\n        return signed\n    }\n}\n\nSignService works properly and I use it. I would like to use this as an interceptor\nHow can I inject SignService in to SignInterceptor, so I can use the functions it provides?\n\nA:\n\nI assume that SignInterceptor is part of the ApiModule:\n@Module({\n  imports: [SignModule], // Import the SignModule into the ApiModule.\n  controllers: [UsersController],\n  providers: [SignInterceptor],\n})\nexport class ApiModule {}\n\nThen inject the SignService into the SignInterceptor:\n@Injectable()\nexport class SignInterceptor implements NestInterceptor {\n  constructor(private signService: SignService) {}\n\n  //...\n}\n\nBecause you use @UseInterceptors(SignInterceptor) to use the interceptor in your controller Nestjs will instantiate the SignInterceptor for you and handle the injection of dependencies.\n\n"
}