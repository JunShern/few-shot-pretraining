{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['You usually see this list of commands in the terminal: (0.189)']."
        }
    ],
    "doc_id": "4553",
    "text": "Q:\n\nWhat is the difference between browser.pause() and browser.enterRepl()?\n\nIn protractor, there is the browser.pause() function:\n\nBeta (unstable) pause function for debugging webdriver tests. Use\n  browser.pause() in your test to enter the protractor debugger from\n  that point in the control flow.\n\nelement(by.id('foo')).click();\nbrowser.pause();\n// Execution will stop before the next click action.\nelement(by.id('bar')).click();\n\nAnd, also, there is a less-known one - browser.enterRepl():\n\nBeta (unstable) enterRepl function for entering the repl loop from any\n  point in the control flow. Use browser.enterRepl() in your test. Does\n  not require changes to the command line (no need to add 'debug').\n\nelement(by.id('foo')).click();\nbrowser.enterRepl();\n// Execution will stop before the next click action.\nelement(by.id('bar')).click();\n\nFrom the provided documentation and examples, it is clear that they both are used for debugging the tests. But, it is not clear, what is the difference between the two. \nWhen should we use pause() and when enterRepl()?\n\nA:\n\nIt's explained in the docs in general, but I'll try to get a bit deeper.\nProtractor has two modes for debugging: DebuggerRepl and CommandRepl.\nRepl here stands for Read-eval-print-loop which usually means that whatever command you type in, it gets evaluated right away in the current context and you are provided with a result immediately. For example, the console in Chrome Developer Tools is kinda a REPL for Chrome's implementation of JavaScript/DOM, or when you run node in terminal, you get a REPL for Node.js's JavaScript context - you can type commands and get the result.\n\nWhen you use browser.pause() you are activating DebuggerRepl. It brings you a Repl where you can execute commands of this mode. You usually see this list of commands in the terminal:\npress c to continue to the next webdriver command\npress d to continue to the next debugger statement\ntype \"repl\" to enter interactive mode\ntype \"exit\" to break out of interactive mode\npress ^C to exit\n\nSo you can go to the next WebDriver command using c command or jump to the next browser.pause() statement in your test using d command. They are executed right away as you use them. So this mode basically allows you to jump over page states and explore the result. (Note: this mode provides more commands; they do work, but I'm not sure what is the meaning of their output and if they are useful for a Protractor user at all.)\n\nWhen you use browser.enterRepl() you are activating CommandRepl mode. It allows you to use Protractor methods which you would use in tests, but in an interactive mode. You get access to element, browser and protractor objects, so you could run for example:\n> $('.hello').getText();\n> 'World'\n\nIt prints you back the result immediately, so it's sort of a sandbox where you can query the DOM on the current page state and see the results.\nAs you may have noticed, the browser.pause() list of commands has a line:\ntype \"repl\" to enter interactive mode\n\nIt means that when you are in DebuggerRepl mode, you can execute the repl command to activate CommandRepl mode for the current page state where you've just run browser.pause(), so you can play with DOM as if you've just used browser.enterRepl(). You can go back to DebuggerRepl mode using the exit command. But if you've entered to CommandRepl mode using browser.enterRepl(), you can't switch to DebuggerRepl mode.\nAlso, CommandRepl mode can be activated with a feature called elementExplorer. It can be used without any written tests; it just opens a URL in CommandRepl mode.\n\ntl;dr\nTo summarize, I believe that they supposed to be used according to how they are called.\nbrowser.pause() - I want a browser to pause exactly in that place so I can see what's happening on the page. Then, on my command, I want it to jump to the next state so I can see what is happening here. If I need more information for current state, I can run repl and use the Protractor API (browser, element, protractor) to investigate. I can then exit this mode and continue jumping through states.\nbrowser.enterRepl() - I want a browser to pause exactly in that place and let me investigate a page using the Protractor API (browser, element, protractor) right away, and I don't need to be able to jump between states of the page.\n\n"
}