{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4076",
    "text": "Q:\n\nWhy is the Django decimal max_digits validation failing with strange behaviour?\n\nI have a model field full_time_equivalent:\nfull_time_equivalent = models.DecimalField(\n    max_digits=5,\n    decimal_places=2,\n    default=100,\n    validators=[\n        MinValueValidator(Decimal(0)),\n        MaxValueValidator(Decimal(100))\n    ]\n)\n\nTo ensure that the validators fire I have override save with:\ndef save(self, *args, **kwargs):\n    # Run validations\n    self.full_clean()\n    return super().save(*args, **kwargs)\n\nWith the following test:\n    project2_membership = ProjectMembership(\n        user=self.new_user,\n        project=project2,\n        is_project_manager=False,\n        full_time_equivalent=10.01\n    )\n\nWhen I step into the validation the following value is shown and respective error:\nDecimal('10.0099999999999997868371792719699442386627197265625')\n\ndjango.core.exceptions.ValidationError: \n{'full_time_equivalent': ['Ensure that there are no more than 5 digits in total.']\n\nWhat am I doing wrong?\n\nA:\n\nThe decimal value 10.01 can't be expressed exactly as a float. When the value is converted to a decimal, you end up with Decimal('10.0099999999999997868371792719699442386627197265625'), which is very nearly equal to Decimal('10.01'), but fails your max_digits validation.\nYou can prevent the error by using the string '10.01' or the decimal Decimal('10.01') in your test.\nfrom decimal import Decimal\n\nproject2_membership = ProjectMembership(\n    user=self.new_user,\n    project=project2,\n    is_project_manager=False,\n    full_time_equivalent=Decimal('10.01')\n)\n\n"
}