{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4360",
    "text": "Q:\n\nExtend TTPhotoViewController with custom TTPhotoView\n\nI have successfully integrated the three20 framework in my project,\nand I have extended the TTPhotoViewController to add some further\nfunctionality.\nNow I need to add some subviews to the TTPhotoView loaded by the\nTTPhotoViewController. In particular I would like to add that subviews\nafter every TTPhotoView as been loaded. These subviews represents\nsensible area over the image so they should scale proportionally with\nthe image.\nThe user can tap a subview to get extra info about the image.\nI don't know how to implement this behavior. Should I extend the\nTTPhotoView and make sure that the TTPhotoViewController use this\nextended version instead of its TTPhotoView?\nCould someone point me to the right direction?\nThank you\n\nA:\n\nSolved subclassing the TTPhotoView (TapDetectingPhotoView) and then adding all my subviews to that subclass.\nThe main problem was represented by the photo switching, because the TTPhotoViewController (in particular its inner TTScrollView) reuse the TTPhotoView during switching operation.\nSo for example if you add your subview to your TTPhotoView subclass and try to switch to the next photo, your subview will probably be here, because the TTPhotoView is reused.\nTo solve this problem I decided to add and remove all my subviews every time a photo switch occur (see TTPhotoViewController::didMoveToPhoto).\nIn this way I'm sure that every photoview has its subviews.\nHere my implementation (only remarkable methods)\nHope these help!\nPhotoViewController.h:\n#import \"TapDetectingPhotoView.h\"\n\n@interface PhotoGalleryController : TTPhotoViewController <TTScrollViewDelegate, TapDetectingPhotoViewDelegate> {\n\n    NSArray *images;\n}\n@property (nonatomic, retain) NSArray *images;\n@end\n\nPhotoViewController.m:\n#import \"PhotoGalleryController.h\"\n\n@implementation PhotoGalleryController\n@synthesize images;\n\n- (void)viewDidLoad { // fill self.images = ... }\n\n- (TTPhotoView*)createPhotoView {\n    TapDetectingPhotoView *photoView = [[TapDetectingPhotoView alloc] init];\n    photoView.tappableAreaDelegate = self;\n\n    return [photoView autorelease];\n}\n\n#pragma mark -\n#pragma mark TTPhotoViewController\n\n- (void)didMoveToPhoto:(id<TTPhoto>)photo fromPhoto:(id<TTPhoto>)fromPhoto {\n    [super didMoveToPhoto:photo fromPhoto:fromPhoto];\n\n    TapDetectingPhotoView *previousPhotoView = (TapDetectingPhotoView *)[_scrollView pageAtIndex:fromPhoto.index];\n    TapDetectingPhotoView *currentPhotoView = (TapDetectingPhotoView *)[_scrollView pageAtIndex:photo.index];\n\n    // destroy the sensible areas from the previous photoview, because the photo could be reused by the TTPhotoViewController!\n    if (previousPhotoView)\n        previousPhotoView.sensibleAreas = nil;\n\n    // if sensible areas has not been already created, create new\n    if (currentPhotoView && currentPhotoView.sensibleAreas == nil) {\n        currentPhotoView.sensibleAreas = [[self.images objectAtIndex:photo.index] valueForKey:@\"aMap\"];\n        [self showSensibleAreas:YES animated:YES];\n    }\n}\n\n#pragma mark -\n#pragma mark TappablePhotoViewDelegate\n\n// show a detail view when a sensible area is tapped\n- (void)tapDidOccurOnSensibleAreaWithId:(NSUInteger)ids {\n    NSLog(@\"SENSIBLE AREA TAPPED ids:%d\", ids); \n    // ..push new view controller...\n}\n\nTapDetectingPhotoView.h:\n#import \"SensibleAreaView.h\"\n\n@protocol TapDetectingPhotoViewDelegate;\n\n@interface TapDetectingPhotoView : TTPhotoView <SensibleAreaViewDelegate> {\n    NSArray *sensibleAreas;\n    id <TapDetectingPhotoViewDelegate> tappableAreaDelegate;\n}\n\n@property (nonatomic, retain) NSArray *sensibleAreas;\n@property (nonatomic, assign) id <TapDetectingPhotoViewDelegate> tappableAreaDelegate;\n@end\n\n@protocol TapDetectingPhotoViewDelegate <NSObject>\n@required\n- (void)tapDidOccurOnSensibleAreaWithId:(NSUInteger)ids;\n@end\n\nTapDetectingPhotoView.m:\n#import \"TapDetectingPhotoView.h\"\n\n@interface TapDetectingPhotoView (Private)\n- (void)createSensibleAreas;\n@end\n\n@implementation TapDetectingPhotoView\n\n@synthesize sensibleAreas, tappableAreaDelegate;\n\n- (id)init {\n    return [self initWithSensibleAreas:nil];\n}\n\n- (id)initWithFrame:(CGRect)frame {\n    return [self initWithSensibleAreas:nil];\n}\n\n// designated initializer\n- (id)initWithSensibleAreas:(NSArray *)areasList {\n    if (self = [super initWithFrame:CGRectZero]) {\n        self.sensibleAreas = areasList;\n        [self createSensibleAreas];\n    }\n\n    return self;\n}\n\n- (void)setSensibleAreas:(NSArray *)newSensibleAreas {\n    if (newSensibleAreas != self.sensibleAreas) {\n        // destroy previous sensible area and ensure that only sensible area's subviews are removed\n        for (UIView *subview in self.subviews)\n            if ([subview isMemberOfClass:[SensibleAreaView class]])\n                [subview removeFromSuperview];\n\n        [newSensibleAreas retain];\n        [sensibleAreas release];\n        sensibleAreas = newSensibleAreas;\n        [self createSensibleAreas];\n    }\n}\n\n- (void)createSensibleAreas {\n    SensibleAreaView *area;\n    NSNumber *areaID;\n    for (NSDictionary *sensibleArea in self.sensibleAreas) {\n        CGFloat x1 = [[sensibleArea objectForKey:@\"nX1\"] floatValue];\n        CGFloat y1 = [[sensibleArea objectForKey:@\"nY1\"] floatValue];\n\n        area = [[SensibleAreaView alloc] initWithFrame:\n            CGRectMake(\n                x1, y1, \n                [[sensibleArea objectForKey:@\"nX2\"] floatValue]-x1, [[sensibleArea objectForKey:@\"nY2\"] floatValue]-y1\n            )\n    ];\n\n        areaID = [sensibleArea objectForKey:@\"sId\"];\n        area.ids = [areaID unsignedIntegerValue]; // sensible area internal ID\n        area.tag = [areaID integerValue];\n        area.delegate = self;\n        [self addSubview:area];\n        [area release];\n    }\n}\n\n// to make sure that if the zoom factor of the TTScrollView is > than 1.0 the subviews continue to respond to the tap events\n- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event { \n    UIView *result = nil;\n    for (UIView *child in self.subviews) {\n        CGPoint convertedPoint = [self convertPoint:point toView:child];\n        if ([child pointInside:convertedPoint withEvent:event]) {\n            result = child;\n        }\n    }\n\n    return result;\n}\n\n#pragma mark -\n#pragma mark TapDetectingPhotoViewDelegate methods\n\n- (void)tapDidOccur:(SensibleAreaView *)aView {\n    NSLog(@\"tapDidOccur ids:%d tag:%d\", aView.ids, aView.tag);\n    [tappableAreaDelegate tapDidOccurOnSensibleAreaWithId:aView.ids];\n}\n\nSensibleAreaView.h:\n@protocol SensibleAreaViewDelegate;\n\n@interface SensibleAreaView : UIView {\n    id <SensibleAreaViewDelegate> delegate;\n    NSUInteger ids;\n    UIButton *disclosureButton;\n}\n\n@property (nonatomic, assign) id <SensibleAreaViewDelegate> delegate;\n@property (nonatomic, assign) NSUInteger ids;\n@property (nonatomic, retain) UIButton *disclosureButton;\n\n@end\n\n@protocol SensibleAreaViewDelegate <NSObject>\n@required\n- (void)tapDidOccur:(SensibleAreaView *)aView;\n@end\n\nSensibleAreaView.m:\n#import \"SensibleAreaView.h\"\n\n@implementation SensibleAreaView\n\n@synthesize delegate, ids, disclosureButton;\n\n- (id)initWithFrame:(CGRect)frame {\n    if (self = [super initWithFrame:frame]) {\n        self.userInteractionEnabled = YES;\n\n        UIColor *color = [[UIColor alloc] initWithWhite:0.4 alpha:1.0]; \n        self.backgroundColor = color;\n        [color release];\n\n        UIButton *button = [UIButton buttonWithType:UIButtonTypeDetailDisclosure];\n        [button addTarget:self action:@selector(buttonTouched) forControlEvents:UIControlEventTouchUpInside];\n        CGRect buttonFrame = button.frame;\n        // set the button position over the right edge of the sensible area\n        buttonFrame.origin.x = frame.size.width - buttonFrame.size.width + 5.0f;\n        buttonFrame.origin.y = frame.size.height/2 - 10.0f;\n        button.frame = buttonFrame;\n        button.autoresizingMask = UIViewAutoresizingFlexibleTopMargin |UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleLeftMargin |UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleWidth |UIViewAutoresizingFlexibleHeight;\n        self.disclosureButton = button;\n        [self addSubview:button];\n\n        // notification used to make sure that the button is properly scaled together with the photoview. I do not want the button looks bigger if the photoview is zoomed, I want to preserve its default dimensions\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(zoomFactorChanged:) name:@\"zoomFactorChanged\" object:nil];\n    }\n\n    return self;\n}\n\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {\n    [super touchesBegan:touches withEvent:event];\n\n    if ([[touches anyObject] tapCount] == 1)\n        [delegate tapDidOccur:self];\n}\n\n- (void)buttonTouched {\n[delegate tapDidOccur:self];\n}\n\n- (void)zoomFactorChanged:(NSNotification *)message {\n    NSDictionary *userInfo = [message userInfo];\n    CGFloat factor = [[userInfo valueForKey:@\"zoomFactor\"] floatValue];\n    BOOL withAnimation = [[userInfo valueForKey:@\"useAnimation\"] boolValue];\n\n    if (withAnimation) {\n        [UIView beginAnimations:nil context:nil];\n        [UIView setAnimationDuration:0.18];\n    }\n\n    disclosureButton.transform = CGAffineTransformMake(1/factor, 0.0, 0.0, 1/factor, 0.0, 0.0);\n\n    if (withAnimation)\n        [UIView commitAnimations];\n}\n\n- (void)dealloc {\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:@\"zoomFactorChanged\"   object:nil];\n    [disclosureButton release];\n    [super dealloc];\n}\n\n"
}