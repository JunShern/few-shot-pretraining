{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "5912",
    "text": "Q:\n\nPython Turtle how to create collision\n\nI am attempting to create pong using Turtle, however, I am having an issue with the collision system. I am using a basic pythagorean function for this, however, when the ball hits a bumber, it gets stuck at the bumper and starts shaking. I am not sure how to fix this problem. Here is the collision and bumper code.\nturtle.register_shape('bar.gif')\n\nlbump = turtle.Turtle()\nlbump.color('white')\nlbump.shape('bar.gif')\nlbump.penup()\nlbump.speed(0)\nlbump.setposition(-285,0)\n\nrbump = turtle.Turtle()\nrbump.color('white')\nrbump.shape('bar.gif')\nrbump.penup()\nrbump.speed(0)\nrbump.setposition(285,0)\n\nball = turtle.Turtle()\nball.color('white')\nball.shape('circle')\nball.penup()\nball.speed(0)\nball.setposition(0,0)\nballspeedx = -5\nballspeedy = 0 #To test collison#\n\ndef isCollision(t1, t2):\n    distance = math.sqrt(math.pow(t1.xcor()-t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))\n    if distance < 30:\n        return True\n    else:\n        return False\n\ndef ball_move():\n    while True:\n        global ballspeedy\n        global ballspeedx\n        x = ball.xcor() + ballspeedx\n        y = ball.ycor() + ballspeedy\n        if y > 285 or y < -285:\n            ballspeedy *= -1\n\n        if x < -295 or x > 295:\n            x = 0\n            y = 0\n\n        if isCollision(lbump, ball):\n            ballspeedx *= -1\n\n        if isCollision(rbump, ball):\n            ballspeedx *= -1\n        ball.setposition(x,y)\n\nA:\n\nThe reason it's likely this: when a collision is detected (isCollision returns True) and the sign of the x velocity is switched, the ball does not have the time to gain enough distance from the bumper until the next iteration of the loop. Hence, next iteration isCollision is still detecting a collision and changes again the sign of the velocity.\nAs a result, x velocity sign is switched each iteration from positive to negative and viceversa, and you see the shacking effect.\nIf I'm right, this edit is the simplest way that come to my mind to solve the issue:\nif isCollision(lbump, ball):\n    ballspeedx = abs(ballspeedx)\n\nif isCollision(rbump, ball):\n    ballspeedx = -1 * abs(ballspeedx)\n\nOf course more elaborate solutions can be implemented.\n\n"
}