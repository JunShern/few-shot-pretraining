{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "2482",
    "text": "Q:\n\nHow do I remove the delay between HTTP Requests when using Asynchronous actions in ASP.NET?\n\nI am using HttpClient to send a GET request to a server inside of a while loop\nwhile (cycle < maxcycle)\n{\n\n    var searchParameters = new ASearchParameters\n    {\n        Page = cycle++,\n        id = getid\n    };\n\n    var searchResponse = await Client.SearchAsync(searchParameters);\n\n}\n\nand the SearchAsync contains\npublic async Task<AuctionResponse> SearchAsync()\n{\n    \n    var uriString = \"Contains a https url with parameters\"\n    var searchResponseMessage = await HttpClient.GetAsync(uriString);\n\n    return await Deserialize<AuctionResponse>(searchResponseMessage);\n\n    \n}\n\nThe thing is after every request there is a delay before the next request is started.\nyou can see this in fiddler timeline and also in fiddler there is \"Tunnel To\" example.com:443 before every request\n\nQuestion : Why is there a delay and how to remove it ?\n\nA:\n\nI see two things that are happening here. First, depending on the deserializer, it may take a while to translate your response back into an object. You might want to time that step and see if that's not the majority of your time spent. Second, the SSL handshake (the origin of your \"tunnel to\") does require a round trip to establish the SSL channel. I thought HttpClient sent a Keep-Alive header by default, but you may want to see if it is A) not being sent or B) being rejected. If you are re-establishing an SSL channel for each request, that could easily take on the order of a hundred ms all by itself (depending upon the server/network load).\nIf you're using Fiddler, you can enable the ability to inspect SSL traffic to see what the actual request/response headers are.\n\n"
}