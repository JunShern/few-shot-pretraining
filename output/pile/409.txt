{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "409",
    "text": "Q:\n\nAny way to do true conditional compilation in Swift 3?\n\nThere are some related questions but I have insufficient site reputation to comment on the existing threads, forcing me to start a new one.   Sorry about that.\nIt appears Swift doesn't have a true preprocessor.  Workarounds are possible using #if / #else / #endif, but the problem here is that it doesn't hide the 'false' portion from the compiler, forcing both the 'true' and 'false' parts to be syntactically valid.  This is tough given that Swift 3 is syntactically incompatible with Swift 2 -- has anyone found a workaround that will allow creating code that can be compiled for either environment?  (If XCode 8 beta allowed Swift 2.2, or if XCode 7.3.1 allowed Swift 3, that would also give me a workaround here).\nWhat I'm trying to do, to give just one trivial example, is something like\n#if SWIFT3    \n     let session = WCSession.default()\n#else\n     let session = WCSession.defaultSession()\n#end\n\nI can't find any way to do this, and it seems surprising that there isn't a way to do it given how completely incompatible Swift3 syntax is with Swift2.\n\nA:\n\nI can't find any way to do this\n\nNevertheless, there is one, and there has been one since Swift 2.2; they planned ahead for exactly this contingency:\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md\nSo, like this (I don't know what a WCSession is, so I used a different example):\n    #if swift(>=3.0)\n        let screen = UIScreen.main()\n    #else\n        let screen = UIScreen.mainScreen()\n    #endif\n\nEDIT According to Apple, Xcode 8 permits passing of arbitrary conditional compilation flags to Swift:\n\nActive Compilation Conditions is a new build setting for passing conditional compilation flags to the Swift compiler. Each element of the value of this setting passes to swiftc prefixed with -D, in the same way that elements of Preprocessor Macros pass to clang with the same prefix. (22457329)\n\n"
}