{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7063",
    "text": "Q:\n\nCasablanca - REST C++ SDK, used in Embarcadero RAD Studio XE5\n\nI need to do a http get in RAD Studio XE5 C++. The tutorials on the RAD Studio site discuss a RESTCLient that is not included with the version I have. I found the Casablanca project, which is specifically for Visual Studio, and I made a small program in VS that does the simple http get and handles response in the way I need.\nWhat do I need to do to successfully use Casablanca from within RAD Studio?\nThere are the steps I have taken so far.\n\nCompiled Casablanca in Visual Studio 2013\nCopied the .lib and .dll over to a folder in the RAD Studio project\nadded that folder to the link path in the RAD Studio project\nadded the .lib to the project\nadded dll imports to classes that should be in the .lib to the .cpp I want to use the function in.\n\nclass __declspec(dllimport) http_client;\nclass __declspec(dllimport) filestream; \nclass __declspec(dllimport) producerconsumerstream; \nclass __declspec(dllimport) rawptrstream; \n\nThere was a OMF error, and I used a tool that came with RAD Studio to convert the .lib, that got past the error.\n\nI don't know how to declare the dll prototype's of the functions, because the returns types are from a namespace in the library itself so they aren't recognized. http_client is an unrecognized structure. \nI tried this as well without the class keyword.\n\nA:\n\nDLLs that export classes are not portable across compilers.  So you will not be able to use a Visual Studio compiled DLL in C++Builder if it exports classes.  Either flatten the DLL interface to export plain C-style functions instead (and then use C++Builder's command-line IMPLIB tool to create an import .lib file for the DLL, do not use the .lib file created by Visual Studio), or else find another solution.\nFor instance, C++Builder (and Delphi) ships with Indy 10, which has a TIdHTTP component.  You can use its TIdHTTP::Get() method to perform an HTTP GET request.  But if you need to actually use REST, you might be better off simply upgrading your XE5 to a version that has TRESTClient available (BTW, Embarcadero's REST classes use Indy internally). \n\n"
}