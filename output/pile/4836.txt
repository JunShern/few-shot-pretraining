{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4836",
    "text": "/*\n * Copyright (C) 2014, 2015 Apple Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n */\n\n#ifndef ComplexGetStatus_h\n#define ComplexGetStatus_h\n\n#include \"JSCJSValue.h\"\n#include \"ObjectPropertyConditionSet.h\"\n#include \"PropertyOffset.h\"\n\nnamespace JSC {\n\nclass CodeBlock;\nclass StructureChain;\n\n// This class is useful for figuring out how to inline a cached get-like access. We\n// say \"get-like\" because this is appropriate for loading the GetterSetter object in\n// a put_by_id that hits a setter. Notably, this doesn't figure out how to call\n// accessors, or even whether they should be called. What it gives us, is a way of\n// determining how to load the value from the requested property (identified by a\n// StringImpl* uid) from an object of the given structure in the given CodeBlock,\n// assuming that such an access had already been cached by Repatch (and so Repatch had\n// already done a bunch of safety checks). This doesn't reexecute any checks that\n// Repatch would have executed, and for prototype chain accesses, it doesn't ask the\n// objects in the prototype chain whether their getOwnPropertySlot would attempt to\n// intercept the access - so this really is only appropriate if you already know that\n// one of the JITOperations had OK'd this for caching and that Repatch concurred.\n//\n// The typical use pattern is something like:\n//\n//     ComplexGetStatus status = ComplexGetStatus::computeFor(...);\n//     switch (status.kind()) {\n//     case ComplexGetStatus::ShouldSkip:\n//         // Handle the case where this kind of access is possibly safe but wouldn't\n//         // pass the required safety checks. For example, if an IC gives us a list of\n//         // accesses and one of them is ShouldSkip, then we should pretend as if it\n//         // wasn't even there.\n//         break;\n//     case ComplexGetStatus::TakesSlowPath:\n//         // This kind of access is not safe to inline. Bail out of any attempst to\n//         // inline.\n//         break;\n//     case ComplexGetStatus::Inlineable:\n//         // The good stuff goes here. If it's Inlineable then the other properties of\n//         // the 'status' object will tell you everything you need to know about how\n//         // to execute the get-like operation.\n//         break;\n//     }\n\nclass ComplexGetStatus {\npublic:\n    enum Kind {\n        ShouldSkip,\n        TakesSlowPath,\n        Inlineable\n    };\n    \n    ComplexGetStatus()\n        : m_kind(ShouldSkip)\n        , m_offset(invalidOffset)\n    {\n    }\n    \n    static ComplexGetStatus skip()\n    {\n        return ComplexGetStatus();\n    }\n    \n    static ComplexGetStatus takesSlowPath()\n    {\n        ComplexGetStatus result;\n        result.m_kind = TakesSlowPath;\n        return result;\n    }\n    \n    static ComplexGetStatus computeFor(\n        Structure* headStructure, const ObjectPropertyConditionSet&, UniquedStringImpl* uid);\n    \n    Kind kind() const { return m_kind; }\n    PropertyOffset offset() const { return m_offset; }\n    const ObjectPropertyConditionSet& conditionSet() const { return m_conditionSet; }\n    \nprivate:\n    Kind m_kind;\n    PropertyOffset m_offset;\n    ObjectPropertyConditionSet m_conditionSet;\n};\n\n} // namespace JSC\n\n#endif // ComplexGetStatus_h\n\n"
}