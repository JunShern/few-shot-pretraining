{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4782",
    "text": "Q:\n\nBinding value not passed to user control in WPF\n\nI've looked long and hard and am stuck. I'm trying to pass a parameter from Window to UserControl1 via a binding from Window. \nIn the MainWindow, the UserControl1 is included twice, once passing the parameter MyCustom via a binding on MyValue, again with a literal. Passing with the binding has no effect on UserControl1. MyCustom dependency property is not changed. With the literal, it works as expected. \nI'm very perplexed. I've copied the example in https://stackoverflow.com/a/21718694/468523 but no joy. There must be something simple I'm missing. \nSorry about all the code I copied but the devil is often in the details ..\nMainWindow.xaml\n<Window x:Class=\"MyParamaterizedTest3.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:MyParamaterizedTest3\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\"\n        DataContext=\"{Binding RelativeSource={RelativeSource Self}}\">\n    <Grid HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n        <StackPanel>\n            <Rectangle Height=\"20\"/>\n            <local:UserControl1 MyCustom=\"{Binding MyValue, UpdateSourceTrigger=PropertyChanged}\"/>\n            <Rectangle Height=\"20\"/>\n            <local:UserControl1 MyCustom=\"Literal Stuff\"/>\n            <Rectangle Height=\"20\"/>\n            <StackPanel Orientation=\"Horizontal\">\n                <TextBlock Text=\"MainWindow: \"/>\n                <TextBlock Text=\"{Binding MyValue, UpdateSourceTrigger=PropertyChanged}\"/>\n            </StackPanel>\n        </StackPanel>\n    </Grid>\n</Window>\n\nMainWindow.xaml.cs\nnamespace MyParamaterizedTest3\n{\n    public partial class MainWindow : INotifyPropertyChanged\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n        public string MyValue { get => _myValue; set => SetField(ref _myValue, value); }\n        private string _myValue= \"First things first\";\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = null)\n        {\n            if (EqualityComparer<T>.Default.Equals(field, value)) { return false; }\n            field = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n            return true;\n        }\n    }\n}\n\nUserControl1.xaml (corrected below)\n<UserControl x:Class=\"MyParamaterizedTest3.UserControl1\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n             xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \n             xmlns:local=\"clr-namespace:MyParamaterizedTest3\"\n             mc:Ignorable=\"d\" \n             d:DesignHeight=\"300\" d:DesignWidth=\"300\"\n             DataContext=\"{Binding RelativeSource={RelativeSource Self}}\"\n             >\n    <Grid HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n          <Border BorderThickness=\"3\" BorderBrush=\"Black\">\n              <StackPanel>\n                  <TextBlock Text=\"{Binding MyCustom, UpdateSourceTrigger=PropertyChanged, FallbackValue=mycustom}\"></TextBlock>\n              </StackPanel>\n          </Border>  \n    </Grid>\n</UserControl>\n\nUserControl1.xaml.cs (corrected below)\nnamespace MyParamaterizedTest3\n{\n    public partial class UserControl1 : INotifyPropertyChanged\n    {\n        public UserControl1()\n        {\n            InitializeComponent();\n        }\n        public static readonly DependencyProperty MyCustomProperty =\n            DependencyProperty.Register(\"MyCustom\", typeof(string), typeof(UserControl1));\n        public string MyCustom\n        {\n            get\n            {\n                return this.GetValue(MyCustomProperty) as string;\n            }\n            set\n            {\n                this.SetValue(MyCustomProperty, value);\n            }\n        }\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = null)\n        {\n            if (EqualityComparer<T>.Default.Equals(field, value)) { return false; }\n            field = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n            return true;\n        }\n    }\n}\n\nCorrected UserControl1.xaml (per Ed Plunkett)\n<UserControl x:Class=\"MyParamaterizedTest3.UserControl1\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n             xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \n             mc:Ignorable=\"d\" \n             d:DesignHeight=\"300\" d:DesignWidth=\"300\"\n             >\n    <Grid HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n          <Border BorderThickness=\"3\" BorderBrush=\"Black\">\n              <StackPanel>\n                <TextBlock Text=\"{Binding MyCustom, RelativeSource={RelativeSource AncestorType=UserControl}, FallbackValue=mycustom}\"></TextBlock>\n              </StackPanel>\n          </Border>  \n    </Grid>\n</UserControl>\n\nCorrected UserControl1.xaml.cs (per Ed Plunkett)\n<UserControl x:Class=\"MyParamaterizedTest3.UserControl1\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n             xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \n             mc:Ignorable=\"d\" \n             d:DesignHeight=\"300\" d:DesignWidth=\"300\"\n             >\n    <Grid HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n          <Border BorderThickness=\"3\" BorderBrush=\"Black\">\n              <StackPanel>\n                <TextBlock Text=\"{Binding MyCustom, RelativeSource={RelativeSource AncestorType=UserControl}, FallbackValue=mycustom}\"></TextBlock>\n              </StackPanel>\n          </Border>  \n    </Grid>\n</UserControl>\n\nA:\n\nIn the window XAML, the bindings on the usercontrol instance use the usercontrol's DataContext as their source, by default. You're assuming that it's inheriting its datacontext from the window. \nBut here's this in the UserControl:\n             DataContext=\"{Binding RelativeSource={RelativeSource Self}}\"\n\nThat breaks all the bindings the parent gives it. So don't do that. Use relativesource:\n<UserControl x:Class=\"MyParamaterizedTest3.UserControl1\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n             xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \n             xmlns:local=\"clr-namespace:MyParamaterizedTest3\"\n             mc:Ignorable=\"d\" \n             d:DesignHeight=\"300\" d:DesignWidth=\"300\"\n             >\n    <Grid HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n          <Border BorderThickness=\"3\" BorderBrush=\"Black\">\n              <StackPanel>\n                  <TextBlock Text=\"{Binding MyCustom, RelativeSource={RelativeSource AncestorType=UserControl}, FallbackValue=mycustom}\"></TextBlock>\n              </StackPanel>\n          </Border>  \n    </Grid>\n</UserControl>\n\nAlso: \n\nUpdateSourceTrigger=PropertyChanged doesn't serve any purpose on a binding to a property that never updates its source, so that can be omitted.\nAs we discussed in comments, INotifyPropertyChanged isn't needed for dependency properties. \nIt's immensely frustrating when bindings just don't work, because how do you debug them? You can't see anything. The critical thing is where is it looking for this property? You can get diagnostic information like this:\n<TextBlock \n    Text=\"{Binding MyCustom, PresentationTraceSources.TraceLevel=High, FallbackValue=mycustom}\"></TextBlock>\n\nThat will emit a great deal of debugging information to the Output pane of Visual Studio at runtime. It will tell you exactly what the Binding is trying to do, step by step, what it finds, and where it fails. \nThe window can get away with setting its own DataContext to Self because it has no parent, so it's not stepping on an inherited DataContext. However, the window can and should use RelativeSource itself -- or better yet, write a main viewmodel class (you know how to implement INPC already), move the window's properties to the main viewmodel, and assign an instance of the viewmodel to the window's DataContext. \n\n"
}