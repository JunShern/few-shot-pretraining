{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "270",
    "text": "Q:\n\nWhat is relational parametricity?\n\nA complicated-sounding term with no good explanations from a simple google search... are there any more academically-oriented folk who could explain this one?\n\nA:\n\nBoth answers are mostly right. I would say that parametricity is a possible property of polymorphism. And polymorphism is parametric if polymorphic terms behave the same under all instantiations. To \"behave the same\" is a vague, intuitive term. Relational parametricity was introduced by John Reynolds as a mathematical formalization of this. It states that polymorphic terms preserve all relations, which intuitively forces it to behave the same:\nConsider f: a list -> a list.\n  If we have the relation a~1, b~2, c~3, ..., then we can lift it to lists and hav e.g.\n  [a, d, b, c] ~ [1, 4, 2, 3]\nNow, if f([a, d, b, c]) = [c, b, d, a] and f preserves relations,\n  then f([1, 4, 2, 3]) = [3, 2, 4, 1].\n  In other words, if f reverses list of strings, it also reverses lists of numbers.\nSo relationally parametric polymorphic functions cannot \"inspect the type argument\", in that they cannot alter their behaviour based on the type.\n\nA:\n\nRelational parametricity seems to be the property that a function abstracted over types (like a generic in Java) can have. If it has this property, it means it never inspects its type argument or deconstructs it / uses it in some special way. For example, the function \"id or inc\" here is not relationally parametric:\npublic class Hey<T>\n{\n    public T idOrInc(T var)\n    {\n        if (var instanceof Integer)\n            return (T)(new Integer(((Integer)var).intValue()+1));\n        return var;\n    }\n    public static void main(String[] args) {\n        Hey<Integer> h = new Hey<Integer>();\n        System.out.println(h.idOrInc(new Integer(10)));\n        Hey<Double> h2 = new Hey<Double>();\n        System.out.println(h2.idOrInc(new Double(10)));\n    }\n}\n\nThe output is:\n$ java Hey\n11\n10.0\n\n"
}