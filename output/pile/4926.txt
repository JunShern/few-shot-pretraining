{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4926",
    "text": "Q:\n\nMaking a toroidal array in C# (console) for my Conway's game of life, need a little help\n\nHey there, the way my program works so far is...\nI have a class called Grid, so far this works, \nGrid contains a member, 'board' which is a 2D array of bools.\nI manage to load values from a file into the grid fine, \nin fact I manage to preform Conway's life iterations just fine,\nhowever the program behaves as if the cells outside the grid are dead (not toroidal)\nhere's the code (C#) for the member of Grid which I use to find neighbours:  \n        public bool Peek(int Horz, int Vert)\n    {\n        int X = x + Horz, Y = y + Vert;\n        if (X < 0)\n            X = width - 1;\n        else if (X > width - 1)\n            X = 0;\n        if (Y < 0)\n            Y = height - 1;\n        else if (Y > height - 1)\n            Y = 0;\n        return board[X, Y];\n    }\n\nthis appears to be where the problem is,\nHorz and Vert are defining the relative position in the array 'board'\nx and y are the 'current position' members of the Class Grid.\nI just can't see what's wrong, It should be in here.\nin case you need it here is the code (in Program.Main) that counts neighbours\nint neighbours = 0;\n                for (i = -1; i < 2; i++)\n                {\n                    if (grid.Peek(i, -1))\n                        neighbours++;\n                    if (grid.Peek(i, 1))\n                        neighbours++;\n                }\n                if (grid.Peek(-1, 0))\n                    neighbours++;\n                if (grid.Peek(1, 0))\n                    neighbours++;\n                if (grid.Cell)\n                {\n                    if (neighbours == 2 || neighbours == 3)\n                        next.Cell = true;\n                    else next.Cell = false;\n                }\n                else\n                {\n                    if (neighbours == 3)\n                        next.Cell = true;\n                    else next.Cell = false;\n                }\n\nthe value of grid.Cell (grid being an instance of Grid) is the same as grid.Peek(0, 0) and then the x and y positions in the grid object move to the next cell. (as part of the get and set methods)\n\nA:\n\nx and y are the 'current position' members of the Class Grid.\n\nI don't see a bug in the code snippet but this statement raises a Big Red Flag.  The grid doesn't have a current position, only a Cell does.  You cannot keep track of the 'next.Cell' state for the grid, it must be computed for each individual cell.  The next grid is created from the new cells after evaluating all the grid positions.  Or use two grids and swap them.\n\n"
}