{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains [\"For requirement 2 (R2), after some research, you know that you can create and add annotations to the map one at a time and the map doesn't need to know ahead of time how many you will add so that means the first two requirements could be done in the same loop. (0.180)\", 'For requirement 3 (R3), after some research, you know that to create and add a polyline to the map, you need to know ahead of time how many points will be in the line. (0.192)', 'There are many other issues with the rest of the code. (0.157)']."
        }
    ],
    "doc_id": "8469",
    "text": "Q:\n\nNSMutableArray parsing csv not working?\n\nI have this code where I use NSMutableArray to parse a csv file. There are no errors that stop me from running the app however the map doesn't display anything.\n NSString *csvFilePath = [[NSBundle mainBundle] pathForResource:@\"Data2\"   ofType:@\"csv\"];\nNSString *dataStr = [NSString stringWithContentsOfFile:csvFilePath encoding:NSUTF8StringEncoding error:nil];\n\nNSMutableArray *allLinedStrings = [[NSMutableArray alloc]initWithArray:[dataStr componentsSeparatedByString:@\"\\r\"]];\n\nNSMutableArray *latitude = [[NSMutableArray alloc]init];\nNSMutableArray *longitude = [[NSMutableArray alloc]init];\nNSMutableArray *description = [[NSMutableArray alloc]init];\nNSMutableArray *address = [[NSMutableArray alloc]init];\nNSMutableArray *temperature = [[NSMutableArray alloc]init];\nNSMutableArray *time = [[NSMutableArray alloc]init];\nNSMutableArray *ambient = [[NSMutableArray alloc]init];\n\nNSMutableArray *filteredLocations = [NSMutableArray array];\nMKMapPoint* pointArr = malloc(sizeof(MKMapPoint) * filteredLocations.count);\n\nfor (int idx = 0; idx < [allLinedStrings count]; idx++)\n{\nNSMutableArray *infos = [[NSMutableArray alloc]initWithArray:[[allLinedStrings objectAtIndex:idx] componentsSeparatedByString:@\",\"]];\n    if ([infos count] > 1)\n    {\n        [latitude addObject:[infos objectAtIndex:4]];\n        [longitude addObject:[infos objectAtIndex:5]];\n        [description addObject:[infos objectAtIndex:0]];\n        [address addObject:[infos objectAtIndex:10]];\n        [temperature addObject:[infos objectAtIndex:6]];\n        [time addObject:[infos objectAtIndex:15]];\n        [ambient addObject:[infos objectAtIndex:8]];\n\n        if([[latitude objectAtIndex:4] isEqualToString:@\"NULL\"] || [[longitude objectAtIndex:5] isEqualToString:@\"NULL\"] || [[description objectAtIndex:0] isEqualToString:@\"NULL\"] ||  [[address objectAtIndex:10]isEqualToString:@\"NULL\"] ||  [[temperature objectAtIndex:6] isEqualToString:@\"NULL\"] ||  [[time objectAtIndex:15]isEqualToString:@\"NULL\"] ||  [[ambient objectAtIndex:8] isEqualToString:@\"NULL\"]) {continue;}\n\n        CLLocationCoordinate2D coordinate;\n        coordinate.latitude = [[latitude objectAtIndex:4] doubleValue];\n        coordinate.longitude = [[longitude objectAtIndex:5] doubleValue];\n        Location *annotation = [[Location alloc] initWithName:[description objectAtIndex:0] address:[address objectAtIndex:10] temperature:[temperature objectAtIndex:6] time:[time objectAtIndex:15] ambient:[ambient objectAtIndex:8] coordinate:coordinate] ;\n        [mapview addAnnotation:annotation];\n        [filteredLocations addObject:annotation];\n\n        MKMapPoint point = MKMapPointForCoordinate(coordinate);\n\n        pointArr[idx] = point;\n\n    }\n\n}\n\nself.routeLine = [MKPolyline polylineWithPoints:pointArr count:filteredLocations.count];\n[self.mapview addOverlay:self.routeLine];\nfree(pointArr);\n\n        MKMapRect zoomRect = MKMapRectNull;\n        for (id <MKAnnotation> annotation in mapview.annotations)\n        {\n            MKMapPoint annotationPoint = MKMapPointForCoordinate(annotation.coordinate);\n            MKMapRect pointRect = MKMapRectMake(annotationPoint.x, annotationPoint.y, 0.1, 0.1);\n            zoomRect = MKMapRectUnion(zoomRect, pointRect);\n        }\n        [mapview setVisibleMapRect:zoomRect animated:YES];\n\n        self.mapview.delegate = self;\n\n    }\n\nI guess there must be something wrong with how I'm calling the objects or maybe the MKMapPoint but I don't manage to find what's blocking the app from displaying the data. I've tried using both \"initWithObjects\" and removing \"if ([infos count] > 1){\" but when ran it crashed showing a breakdown point in \"NSMutableArray *latitude = [[NSMutableArray alloc]init];\".\n\nA:\n\nBased on your previous questions about this project, you want to do the following at a high level:\n\nParse a CSV file where each line has coordinate data.  Ignore lines that have \"null\" data.  (For the purpose of this answer, let's ignore that one could use a pre-built CSV parser, or use a different format altogether.)\nShow annotations for lines with \"good\" data.\nConnect all the annotations with a line.\n\nFor requirement 1 (R1), you already know how to load the CSV file, loop through the lines, and identify the lines with \"null\" data.\nFor requirement 2 (R2), after some research, you know that you can create and add annotations to the map one at a time and the map doesn't need to know ahead of time how many you will add so that means the first two requirements could be done in the same loop.\nFor requirement 3 (R3), after some research, you know that to create and add a polyline to the map, you need to know ahead of time how many points will be in the line.  \nFor R1 and R2, you will be looping through the lines of the CSV and identify the non-null lines.  \nSo that means you will know how many points will be in the polyline after the loop that handles R1 and R2.  That means the polyline must be created after that loop.\nBut to create the polyline, you need not just the point count but the coordinates for each point as well.  \nThat means while looping through the lines in the CSV, you need to save the coordinate data somewhere (in the same order it appeared in the CSV).\nIn Objective-C, a convenient structure that allows you to add data to it without knowing in advance how many objects will be added is an NSMutableArray.\n\nSo now we have this very high-level plan:\n\nLoop through the CSV file, ignore lines with null data, create and add annotations, add the line data to an NSMutableArray (NSMA).\nCreate a polyline using the point data in NSMA, add the polyline to the map.\n\nWith this plan, we see we need one NSMutableArray.  Notice that in the existing code, you have a Location class that holds (or could hold) all the data from each line of the CSV.  \nThat means we could simply add these Location objects to the NSMA.  NSMutableArrays can hold any type of object (they don't have to be just NSStrings).\n\nSo here's a slightly more detailed plan:\n\nInitialize an NSMutableArray called filteredLocations (eg. NSMutableArray *filteredLocations = [NSMutableArray array];).\nLoop through the CSV file, ignore lines with null data, create a Location object and add as an annotation, add the Location object to filteredLocations (eg. [filteredLocations addObject:annotation];).\nInitialize (malloc) a C array to hold the points of the polyline with the point count being the count of filteredLocations.\nLoop through filteredLocations, add point from filteredLocations to the C array.\nCreate and add a polyline to the map.\n\nIn this plan note we have two separate loops: The first one is for R1 and R2.  The second one is for R3.\n\nIf required, I will post sample code that implements this plan.\n\nFirst, just to explain your latest NSRangeException error, it is happening  on this line:\nif([[latitude objectAtIndex:4] isEqualToString:@\"NULL\"] || ...\n\nbecause you've declared latitude as an array and the first time the if executes in the loop, latitude only has one object (a few lines above this if you do [latitude addObject:...).  The index of an array starts at zero so the bounds of an array with one object are zero to zero hence the error message saying index 4 beyond bounds [0 .. 0].\nThere are many other issues with the rest of the code.\nThere is not enough room in this answer to explain in detail.  \nI urge you, if possible, to stop, step back and re-start with a much simpler project or tutorials and, most importantly, learn the absolute basics of programming in general.\nHere is an example of code that should work based on your sample data:\n-(void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    self.mapview.delegate = self;\n\n    NSString *csvFilePath = [[NSBundle mainBundle] pathForResource:@\"Data2\" ofType:@\"csv\"];\n    NSString *dataStr = [NSString stringWithContentsOfFile:csvFilePath encoding:NSUTF8StringEncoding error:nil];\n\n    NSArray *allLinedStrings = [dataStr componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];\n\n    NSMutableArray *filteredLocations = [NSMutableArray array];\n\n    for (int idx = 0; idx < [allLinedStrings count]; idx++)\n    {\n        NSArray *infos = [[allLinedStrings objectAtIndex:idx] componentsSeparatedByString:@\",\"];\n\n        if ([infos count] > 15)\n        {\n            NSString *latitude = [infos objectAtIndex:4];\n            NSString *longitude = [infos objectAtIndex:5];\n            NSString *description = [infos objectAtIndex:0];\n            NSString *address = [infos objectAtIndex:10];\n            NSString *temperature = [infos objectAtIndex:6];\n            NSString *time = [infos objectAtIndex:15];\n            NSString *ambient = [infos objectAtIndex:8];\n\n            if([latitude isEqualToString:@\"NULL\"]\n               || [longitude isEqualToString:@\"NULL\"]\n               || [description isEqualToString:@\"NULL\"]\n               || [address isEqualToString:@\"NULL\"]\n               || [temperature isEqualToString:@\"NULL\"]\n               || [time isEqualToString:@\"NULL\"]\n               || [ambient isEqualToString:@\"NULL\"])\n            {\n                continue;\n            }\n\n            CLLocationCoordinate2D coordinate;\n            coordinate.latitude = [latitude doubleValue];\n            coordinate.longitude = [longitude doubleValue];\n\n            Location *annotation = [[Location alloc] initWithName:description\n                                                          address:address\n                                                      temperature:temperature\n                                                             time:time\n                                                          ambient:ambient\n                                                       coordinate:coordinate];\n            [mapview addAnnotation:annotation];\n\n            [filteredLocations addObject:annotation];\n        }\n    }\n\n    MKMapPoint* pointArr = malloc(sizeof(MKMapPoint) * filteredLocations.count);\n\n    for (int flIndex = 0; flIndex < filteredLocations.count; flIndex++)\n    {\n        Location *location = [filteredLocations objectAtIndex:flIndex];\n        MKMapPoint point = MKMapPointForCoordinate(location.coordinate);\n        pointArr[flIndex] = point;\n    }\n\n    self.routeLine = [MKPolyline polylineWithPoints:pointArr count:filteredLocations.count];\n    [self.mapview addOverlay:self.routeLine];\n    free(pointArr);\n\n    [self.mapview showAnnotations:self.mapview.annotations animated:YES];\n}\n\n"
}