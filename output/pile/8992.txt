{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8992",
    "text": "Q:\n\nEntity Attempting to update incorrect table / multiple instances of IEntityChangeTracker issue\n\nThis is probably a stupid question but here I go anyways.\nSome facts. \n\nIm using entity 6.0.0.0 according to my refs. \nIm hitting an azure sql db. \nThe project is based of a mvc default template thingo.\n\nSo I'm attempting to add to table via the following code. Please note only 1 path has been attempted each time not all 3 or a combination at once.\npublic User(UserModel userModel)\n{\n    using (var db = new SqlDogContext())\n    {\n        // Path 1 this seem like there is a better way but throws an exception anyways\n        var sillyModel = new UserModel() { Id = userModel.Id };\n\n        db.UserLibarys.Add(new UserLib {User = sillyModel, Libary = RssLibObject});\n        db.SaveChanges();\n\n        db.UserLibarys.Add(new UserLib {User = sillyModel, Libary = KodiLibObject});\n        db.SaveChanges();\n\n        db.UserLibarys.Add(new UserLib {User = sillyModel, Libary = SoundCloudLibObject });\n        db.SaveChanges();\n\n        db.UserLibarys.Add(new UserLib {User = sillyModel, Libary = SpotifyBridgeObject });\n        db.SaveChanges();\n\n        // Path 2 I guess this would be ok\n        var sillyModel = new UserModel() { Id = userModel.Id };\n        db.UserLibarys.Add(new UserLib { User = sillyModel, Libary = RssLibObject });\n        db.UserLibarys.Add(new UserLib { User = sillyModel, Libary = KodiLibObject });\n        db.UserLibarys.Add(new UserLib { User = sillyModel, Libary = SoundCloudLibObject });\n        db.UserLibarys.Add(new UserLib { User = sillyModel, Libary = SpotifyBridgeObject });\n        db.SaveChanges();\n\n        // Path 3 - What i want to use..\n        db.UserLibarys.Add(new UserLib { User = userModel, Libary = RssLibObject });\n        db.UserLibarys.Add(new UserLib { User = userModel, Libary = KodiLibObject });\n        db.UserLibarys.Add(new UserLib { User = userModel, Libary = SoundCloudLibObject });\n        db.UserLibarys.Add(new UserLib { User = userModel, Libary = SpotifyBridgeObject });\n        db.SaveChanges();\n\n    }\n}\n\nAnd I'm getting the following exception for path 1.\n    {\"Violation of PRIMARY KEY constraint 'PK_dbo.UserModels'. \n     Cannot insert duplicate key in object 'dbo.UserModels'. \n     The duplicate key value is (009d1c33-a3cf-49db-8243-ff8a447eff16).\n     \\r\\nThe statement has been terminated.\"}\n\nAnd I'm getting the following exception for path 2.\n    An exception of type 'System.Data.Entity.Validation.DbEntityValidationException' occurred in EntityFramework.dll but was not handled in user code\n\nUsing this which I found somewhere on stackoverflow.\ntry\n{\n    // Your code...\n    // Could also be before try if you know the exception occurs in SaveChanges\n\n    db.SaveChanges();\n}\ncatch (DbEntityValidationException e)\n{\n    foreach (var eve in e.EntityValidationErrors)\n    {\n        Console.WriteLine(\"Entity of type \\\"{0}\\\" in state \\\"{1}\\\" has the following validation errors:\",\n            eve.Entry.Entity.GetType().Name, eve.Entry.State);\n        foreach (var ve in eve.ValidationErrors)\n        {\n            Console.WriteLine(\"- Property: \\\"{0}\\\", Error: \\\"{1}\\\"\",\n                ve.PropertyName, ve.ErrorMessage);\n        }\n    }\n    throw;\n}\n\nI get the following message\nThe User field is required.\n\nThis makes very little sense to me because as I see it I'm providing it.\nAnd I'm getting the following exception for path 3.\n    Additional information: An entity object cannot be referenced by multiple instances of IEntityChangeTracker.\n\nThis is confusing to me because it looks like its updating the wrong table.\nHere Are my models\npublic class UserLib\n{\n    [Key]\n    public int LibId { get; set; }\n\n    public bool UserEnabled { get; set; }\n\n    [Required]\n    public virtual Lib Libary { get; set; }\n\n    [Required]\n    public virtual UserModel User { get; set; }\n}\n\npublic class UserModel\n{\n    [Key, ForeignKey(\"ApplicationUser\")]\n    public string Id { get; set; }\n\n    public virtual UserLib Libary { get; set; }\n    public virtual ApplicationUser ApplicationUser { get; set; }\n}\n\npublic class Lib\n{\n    public string Name { get; set; }\n    public string Logo { get; set; }\n\n    [Key]\n    public int LibId { get; set; }\n\n    public virtual UserLib UserLib { get; set; }\n}\n\npublic class ApplicationUser : IdentityUser\n{\n    public virtual UserModel MyUserModel { get; set; }\n    // plus some other stuff in here that seems non relavent\n}\n\nHere is where the usermodel is created\nusing (var db = new SqlDogContext())\n{ \n     db.UserModels.Add(\n        new UserModel()\n        {\n            Id = currentId\n        }\n    );\n\n    db.SaveChanges();\n\n    query = from b in db.UserModels\n            where b.Id == currentId\n            select b;\n}\n\n_CurrentUser = new User(query.First());\n\nThe end goal is to have one user for one UserModel \nOne UserModel for Many UserLibaries \nAnd For UserLibaries to Have a foreign key to the library data base.\nSo I have probably made a rookie mistake but can anyone see my issue :).\n\nA:\n\nYou are trying to set the primary key: var sillyModel = new UserModel() { Id = userModel.Id }; and then store it multiple times which you can not do. Let entity framework set the primary keys. Also note that you do not have to keep calling SaveChanges() after each operation. You can do all of your inserts and then call it one time. \n\n"
}