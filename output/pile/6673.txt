{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['*', '*', '-', '-', '-', '-']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['Further, we want for example to assure that the contact form of the web page os displayed correctly. (0.194)']."
        }
    ],
    "doc_id": "6673",
    "text": "\n:imagesdir: ../../../images\n\n[[sahi-controller]]\n==== Sahi Controller\n\n[#git-edit-section]\n:page-path: docs/manual/testdefinition/advanced-topics/sahi-controller.adoc\ngit-link:{page-path}{git-view} | git-link:{page-path}{git-edit}\n\n\nTIP: Use the Sahi Controller to identify elements on the page to write and test Sahi methods!\n\nThere are two ways to get Sahi instructions into your testcase `your-testcase.js`:\n\n* identify, copy &amp; paste from the Sahi Controller\n* record by the Sahi Controller, copy &amp; paste from the file, see <<sahi-recorder>>\n\n[[sahi-open-controller]]\n.Open the Sahi Controller\n\nAdd to your testcase the following line, at position where you want to identify your HTML object:\n\n[source,js]\n----\n//.... your testcode\nenv.sleep(9999);\n----\n\nThen start your test suite and the Sakuli test should appear and stop at that position for 9999 seconds. The \"sleep\" statement is a nice trick when writing long tests; wherever you put a 9999s sleep in, the test will execute until this position and wait. Think of it like a breakpoint when debugging a program.\n\nNow open the Sahi Controller (hold the `ALT` key on Windows or `CTRL + ALT` on Linux and doubleclick anywhere on the page) to open this window:\n\nimage:tutorial_contoller.png[sahi_controller]\n\n[[sahi-controller-copy-paste]]\n.copy/paste code\n\nFirst, we want Sahi to check if there is for example the Sakuli Logo on the page. Hold the `CTRL` key and move the mouse pointer on the logo. Watch the Sahi Controller: it detects the HTML elements below the mouse pointer and generates the http://sahipro.com/docs/sahi-apis/accessor-apis.html#_image[accessor method for \"image\"] automatically:\n\nimage:tutorial_logo_accessor.png[logo_accessor]\n\nClick on \"Assert\" to let Sahi autogenerate http://sahipro.com/docs/sahi-apis/assertions.html[assertion methods]:\n\nimage:tutorial_assert2.png[assert]\n\nJust copy the second line (which checks the visibility of an element) into the clipboard and paste it into your testcase `your-testcase.js` before the `env.sleep(9999)` statement.\n\nFurther, we want for example to assure that the contact form of the web page os displayed correctly. Move the mouse pointer down to the \"Kontakt\" link; Sahi should display the accessor `_image(&quot;Kontakt zu ConSol&quot;)`\n\n. This time use the \"click\" button on the controller\n. To execute a click; this also generates the complete http://sahipro.com/docs/sahi-apis/action-apis.html[browser action] statement\n. copy/paste also into the test case\n\nimage:tutorial_click_action.png[click]\n\nIn the end, Sahi should check that the appeared popup window contains the text \"Schreiben Sie uns!\". You guessed it - move the mouse pointer over this text and click the \"Assert\" button again. The fourth assertion is the right one, which we also paste into the test script:\n\nimage:tutorial_contains_text.png[contains_text]\n\nNow remove the \"sleep\" statement from the script file; it should look now like that:\n\n[source,js]\n----\n_dynamicInclude($includeFolder);\nvar testCase = new TestCase(60, 70);\nvar env = new Environment()\n\ntry{\n    //your code\n    _assert(_isVisible(_image(\"sakuli.png\")));\n    _click(_image(\"Kontakt zu conSol\"));\n    _assertContainsText(\"Schreiben Sie uns!\", _heading3(\"Schreiben Sie uns!\"));\n    //env.sleep(9999);\n\n} catch (e) {\n    testCase.handleException(e);\n} finally {\n    testCase.saveResult();\n}\n----\n\nTIP: Perhaps you want Sahi to highlight the items it is acting on: just use the `_highlight()` method from the http://sahipro.com/docs/sahi-apis/debug-helper-apis.html[debug helper API] to mark each element with a red border before accessing it: `_highlight(_image(\"sakuli.png\"));`\n"
}