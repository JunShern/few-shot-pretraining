{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": true,
            "reason": "Text contains Markdown."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7377",
    "text": "// Copyright \u00a9 2014 C4\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions: The above copyright\n// notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\nimport UIKit\n\n/// A Image provides a view-based container for displaying a single image. You can create images from files, from other image objects, or from raw image data you receive.\nopen class Image: View, NSCopying {\n    open class ImageView: UIImageView {\n        var imageLayer: ImageLayer {\n            return self.layer as! ImageLayer // swiftlint:disable:this force_cast\n        }\n\n        override open class var layerClass: AnyClass {\n            return ImageLayer.self\n        }\n    }\n\n    /// Shape's contents are drawn on a ShapeLayer.\n    open var imageLayer: ImageLayer {\n        return self.imageView.imageLayer\n    }\n\n    // MARK: Initializers\n\n    /// Initializes an empty Image\n    public override init() {\n        super.init()\n        let uiimage = UIImage()\n        self.view = ImageView(image: uiimage)\n    }\n\n    public override init(frame: Rect) {\n        super.init(frame: frame)\n        let uiimage = UIImage()\n        let imageView = ImageView(image: uiimage)\n        imageView.frame = self.view.bounds\n        self.view = imageView\n    }\n\n    /// Initializes a new Image using the specified filename from the bundle (i.e. your project), it will also grab images\n    /// from the web if the filename starts with http.\n    /// ````\n    /// let img = Image(\"logo\")\n    /// canvas.add(img)\n    /// ````\n    /// - parameter name:\tThe name of the image included in your project, or a web address.\n    convenience public init?(_ name: String) {\n        self.init(name, scale: 1.0)\n    }\n\n    /// Initializes a new Image using the specified filename from the bundle (i.e. your project), it will also grab images\n    /// from the web if the filename starts with http.\n    /// ````\n    /// let img = Image(\"http://www.c4ios.com/images/logo@2x.png\", scale: 2.0)\n    /// canvas.add(img)\n    /// ````\n    /// - parameter name:\tThe name of the image included in your project, or a web address.\n    convenience public init?(_ name: String, scale: Double) {\n        guard let image = UIImage(named: name) else {\n            return nil\n        }\n        self.init(uiimage: image, scale: scale)\n    }\n\n    /// Initializes a new Image using an existing Image (basically like copying).\n    /// ````\n    /// let a = Image(\"logo\")\n    /// canvas.add(a)\n    /// let b = Image(image: a)\n    /// b.center = canvas.center\n    /// canvas.add(b)\n    /// ````\n    /// - parameter image: A Image.\n    convenience public init(copy image: Image) {\n        self.init()\n        let uiimage = image.uiimage\n        self.view = ImageView(image: uiimage)\n        copyViewStyle(image)\n    }\n\n    /// Initializes a new Image using a UIImage.\n    /// ````\n    /// if let uii = UIImage(named:\"logo\") {\n    ///     let img = Image(uiimage: uii)\n    ///     canvas.add(img)\n    /// }\n    /// ````\n    /// - parameter uiimage: A UIImage object.\n    convenience public init(uiimage: UIImage) {\n        self.init(uiimage: uiimage, scale: 1.0)\n    }\n\n    /// Initializes a new Image using a UIImage, with option for specifying the scale of the image.\n    /// ````\n    /// if let uii = UIImage(named:\"logo\") {\n    ///     let img = Image(uiimage: uii, scale: 2.0)\n    ///     canvas.add(img)\n    /// }\n    /// ````\n    /// - parameter uiimage: A UIImage object.\n    /// - parameter scale: A `Double` should be larger than 0.0\n    convenience public init(uiimage: UIImage, scale: Double) {\n        self.init()\n\n        if scale != 1.0 {\n            let scaledImage = UIImage(cgImage: uiimage.cgImage!, scale: CGFloat(scale), orientation: uiimage.imageOrientation)\n            self.view = ImageView(image: scaledImage)\n        } else {\n            self.view = ImageView(image: uiimage)\n        }\n        _originalSize = Size(view.frame.size)\n    }\n\n    /// Initializes a new Image using a CGImageRef.\n    /// ````\n    /// let cgi = CGImageCreate()\n    /// let img = Image(cgimage: cgi)\n    /// canvas.add(img)\n    /// ````\n    /// [Example](https://gist.github.com/C4Framework/06319d420426cb0f1cb3)\n    /// - parameter cgimage: A CGImageRef object.\n    convenience public init(cgimage: CGImage) {\n        let image = UIImage(cgImage: cgimage)\n        self.init(uiimage: image, scale: 1.0)\n    }\n\n    /// Initializes a new Image using a CGImageRef, with option for specifying the scale of the image.\n    /// ````\n    /// let cgi = CGImageCreate()\n    /// let img = Image(cgimage: cgi, scale: 2.0)\n    /// canvas.add(img)\n    /// ````\n    /// - parameter cgimage: A CGImageRef object.\n    /// - parameter scale: The scale of the image.\n    convenience public init(cgimage: CGImage, scale: Double) {\n        let image = UIImage(cgImage: cgimage)\n        self.init(uiimage: image, scale: scale)\n    }\n\n    /// Initializes a new Image using a CIImage.\n    /// Use this method if you're working with the output of a CIFilter.\n    /// - parameter ciimage: A CIImage object.\n    convenience public init(ciimage: CIImage) {\n        self.init(ciimage: ciimage, scale: 1.0)\n    }\n\n    /// Initializes a new Image using a CIImage, with option for specifying the scale of the image.\n    /// Use this method if you're working with the output of a CIFilter.\n    /// - parameter ciimage: A CIImage object.\n    /// - parameter scale: The scale of the image.\n    convenience public init(ciimage: CIImage, scale: Double) {\n        let image = UIImage(ciImage: ciimage)\n        self.init(uiimage: image, scale: scale)\n    }\n\n    /// Initializes a new Image using raw data.\n    /// Use this if you download an image as data you can pass it here to create an image.\n    /// See the body of init(url:) to see how to download an image as data.\n    /// - parameter data: An NSData object.\n    convenience public init(data: Data) {\n        self.init(data: data, scale: 1.0)\n    }\n\n    /// Initializes a new Image using raw data, with option for specifying the scale of the image.\n    /// Use this if you download an image as data you can pass it here to create an image.\n    /// See the body of init(url:) to see how to download an image as data.\n    /// - parameter data: An NSData object.\n    /// - parameter scale: The scale of the image.\n    convenience public init(data: Data, scale: Double) {\n        let image = UIImage(data: data)\n        self.init(uiimage: image!, scale: scale)\n    }\n\n    /// Initializes a new Image from an URL.\n    /// ````\n    ///  if let url = NSURL(string: \"http://www.c4ios.com/images/logo@2x.png\") {\n    ///      let img = Image(url: url)\n    ///      canvas.add(img)\n    /// }\n    /// ````\n    /// - parameter url: An NSURL object.\n    convenience public init(url: URL) {\n        self.init(url: url, scale: 1.0)\n    }\n\n    /// Initializes a new Image from an URL, with option for specifying the scale of the image.\n    /// ````\n    /// if let url = NSURL(string: \"http://www.c4ios.com/images/logo@2x.png\") {\n    ///     let img = Image(url: url, scale: 2.0)\n    ///     canvas.add(img)\n    /// }\n    /// ````\n    /// - parameter url: An NSURL object.\n    /// - parameter scale: The scale of the image.\n    convenience public init(url: URL, scale: Double) {\n        var error: NSError?\n        var data: Data?\n        do {\n            data = try Data(contentsOf: url, options: NSData.ReadingOptions.mappedIfSafe)\n        } catch let error1 as NSError {\n            error = error1\n            data = nil\n        }\n        if let d = data {\n            self.init(data: d, scale: scale)\n            return\n        }\n        if let e = error {\n            C4Log(\"There was an error loading image data from url:\\n ERROR: \\(e.localizedDescription)\\n URL:\\(url)\")\n        }\n        self.init()\n    }\n\n    /// Initializes a new Image using raw data. This method differs from `Image(data:...)` in that you can pass an array of\n    /// raw data to the initializer. This works if you're creating your own raw images by changing the values of individual\n    /// pixels. Pixel data should be RGBA.\n    /// - parameter pixels: An array of raw pixel data.\n    /// - parameter size: The size {w, h} of the image you're creating based on the pixel array.\n    convenience public init(pixels: [Pixel], size: Size) {\n        let rgbColorSpace = CGColorSpaceCreateDeviceRGB()\n        let bitmapInfo: CGBitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.premultipliedLast.rawValue)\n        let bitsPerComponent: Int = 8\n        let bitsPerPixel: Int = 32\n        let width: Int = Int(size.width)\n        let height: Int = Int(size.height)\n\n        assert(pixels.count == Int(width * height))\n\n        var provider: CGDataProvider?\n        pixels.withUnsafeBufferPointer { p in\n            if let address = p.baseAddress {\n                let data = Data(bytes: UnsafePointer(address), count: pixels.count * MemoryLayout<Pixel>.size)\n                provider = CGDataProvider(data: data as CFData)\n            }\n        }\n\n        let cgim = CGImage(\n            width: width,\n            height: height,\n            bitsPerComponent: bitsPerComponent,\n            bitsPerPixel: bitsPerPixel,\n            bytesPerRow: width * Int(MemoryLayout<Pixel>.size),\n            space: rgbColorSpace,\n            bitmapInfo: bitmapInfo,\n            provider: provider!,\n            decode: nil,\n            shouldInterpolate: true,\n            intent: CGColorRenderingIntent.defaultIntent\n        )\n\n        self.init(cgimage: cgim!)\n    }\n\n    /// Initializes a new Image using another image.\n    /// - parameter c4image: An Image around which the new image is created.\n    convenience public init(c4image: Image) {\n        let cgim = c4image.cgImage\n        self.init(cgimage: cgim, scale: c4image.scale)\n    }\n\n    /// Initializes a new copy of the receiver.\n    /// - parameter zone: This parameter is ignored. Memory zones are no longer used by Objective-C.\n    /// - returns: a new instance that\u2019s a copy of the receiver.\n    public func copy(with zone: NSZone? = nil) -> Any {\n        let uiimage = UIImage(cgImage: self.contents)\n        let img = Image(uiimage: uiimage, scale: scale)\n        img.frame = self.frame\n        img.constrainsProportions = self.constrainsProportions\n        img._originalSize = _originalSize\n        return img\n    }\n\n    // MARK: Properties\n\n    /// Returns the UIImageView of the object.\n    /// - returns: A UIImageView object.\n    open var imageView: ImageView {\n        return self.view as! ImageView // swiftlint:disable:this force_cast\n    }\n\n    /// Returns a UIImage representation of the receiver.\n    /// - returns:\tA UIImage object.\n    open var uiimage: UIImage {\n        let layer = imageView.layer as CALayer\n        let contents = layer.contents as! CGImage // swiftlint:disable:this force_cast\n        return UIImage(cgImage: contents, scale: CGFloat(scale), orientation: imageView.image!.imageOrientation)\n    }\n\n    /// Returns a CGImageRef representation of the receiver.\n    /// - returns:\tA CGImageRef object.\n    open var cgImage: CGImage {\n        return uiimage.cgImage!\n    }\n\n    /// Returns a CIImage representation of the receiver. Generally, this would be used to work with filters.\n    /// - returns:\tA CIImage object.\n    open var ciImage: CIImage {\n        return CIImage(cgImage: cgImage)\n    }\n\n    /// An object that provides the contents of the layer. Animatable.\n    /// The default value of this property is nil.\n    /// If you are using the layer to display a static image, you can set this property to the CGImageRef containing the image\n    /// you want to display. Assigning a value to this property causes the layer to use your image rather than create a\n    /// separate backing store.\n    open var contents: CGImage {\n        get {\n            let layer = imageView.layer as CALayer\n            return layer.contents as! CGImage // swiftlint:disable:this force_cast\n        } set(val) {\n            imageView.layer.contents = val\n        }\n    }\n\n    /// The current rotation value of the view. Animatable.\n    /// - returns: A Double value representing the cumulative rotation of the view, measured in Radians.\n    open override var rotation: Double {\n        get {\n            if let number = imageLayer.value(forKeyPath: Layer.rotationKey) as? NSNumber {\n                return number.doubleValue\n            }\n            return  0.0\n        }\n        set {\n            imageLayer.setValue(newValue, forKeyPath: Layer.rotationKey)\n        }\n    }\n\n    /// The scale factor of the image. (read-only)\n    var scale: Double {\n        return Double(imageView.image!.scale)\n    }\n\n    /// A variable that provides access to the width of the receiver. Animatable.\n    /// The default value of this property is defined by the image being created.\n    /// Assigning a value to this property causes the receiver to change the width of its frame. If the receiver's\n    /// `contrainsProportions` variable is set to `true` the receiver's height will change to match the new width.\n    open override var width: Double {\n        get {\n            return Double(view.frame.size.width)\n        } set(val) {\n            var newSize = Size(val, Double(view.frame.size.height))\n            if constrainsProportions {\n                let ratio = Double(self.size.height / self.size.width)\n                newSize.height = val * ratio\n            }\n            var rect = self.frame\n            rect.size = newSize\n            self.frame = rect\n        }\n    }\n\n    /// A variable that provides access to the height of the receiver. Animatable.\n    /// The default value of this property is defined by the image being created.\n    /// Assigning a value to this property causes the receiver to change the height of its frame. If the receiver's\n    /// `contrainsProportions` variable is set to `true` the receiver's width will change to match the new width.\n    open override var height: Double {\n        get {\n            return Double(view.frame.size.height)\n        } set(val) {\n            var newSize = Size(Double(view.frame.size.width), val)\n            if constrainsProportions {\n                let ratio = Double(self.size.width / self.size.height)\n                newSize.width = val * ratio\n            }\n            var rect = self.frame\n            rect.size = newSize\n            self.frame = rect\n        }\n    }\n\n    /// Assigning a value of true to this property will cause the receiver to scale its entire frame whenever its `width` or\n    /// `height` variables are set.\n    /// The default value of this property is `false`.\n    open var constrainsProportions: Bool = false\n\n    internal var _originalSize: Size = Size()\n    /// The original size of the receiver when it was initialized.\n    public var originalSize: Size {\n        return _originalSize\n    }\n\n    /// The original width/height ratio of the receiver when it was initialized.\n    public var originalRatio: Double {\n        return _originalSize.width / _originalSize.height\n    }\n\n    // MARK: Filters\n    lazy internal var output: CIImage = self.ciImage\n    lazy internal var filterQueue: DispatchQueue = {\n        return DispatchQueue.global(qos: .background)\n        }()\n    lazy internal var renderImmediately = true\n}\n"
}