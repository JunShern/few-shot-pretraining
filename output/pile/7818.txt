{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7818",
    "text": "Q:\n\nMoving a 2D numpy subarray efficiently\n\nI have a numpy array that represents a greyscale image, such as\nimage = numpy.array([\n    [.0, .0, .0, .0, .1, .3, .5, .0],\n    [.0, .0, .0, .0, .4, .4, .6, .0],\n    [.0, .0, .0, .0, .3, .3, .7, .0],\n    [.0, .0, .0, .0, .0, .0, .0, .0],\n    [.0, .0, .0, .0, .0, .0, .0, .0],\n    [.0, .0, .0, .0, .0, .0, .0, .0],\n])\n\nI would like to move a sub-array to a new location, filling the values left behind with some constant (say 0.0). For example, moving the 3x3 sub-array from center position of (1, 5) to center position (3, 3) would result in:\nnumpy.array([\n    [.0, .0, .0, .0, .0, .0, .0, .0],\n    [.0, .0, .0, .0, .0, .0, .0, .0],\n    [.0, .0, .1, .3, .5, .0, .0, .0],\n    [.0, .0, .4, .4, .6, .0, .0, .0],\n    [.0, .0, .3, .3, .7, .0, .0, .0],\n    [.0, .0, .0, .0, .0, .0, .0, .0],\n])\n\nIs there an efficient way to perform such a move?\n\nA:\n\nSince you know the starting index of where you want to move from and move to, we can use np.zeros_like and numpy indexing:\nh = w = 3\nsub = image[0:0+w,4:4+h]\nout = np.zeros_like(image)\n\nThen assign:\nout[2:2+w, 2:2+h] = sub\n\nOutput:\narray([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],\n       [0. , 0. , 0.1, 0.3, 0.5, 0. , 0. , 0. ],\n       [0. , 0. , 0.4, 0.4, 0.6, 0. , 0. , 0. ],\n       [0. , 0. , 0.3, 0.3, 0.7, 0. , 0. , 0. ],\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ]])\n\n"
}