{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['-', '-', '-', '-', '-', '-']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['When you feed this into your observations, for most places, beta will be a float, and so many of (0.177)']."
        }
    ],
    "doc_id": "1129",
    "text": "Q:\n\nUsing PyMC3 to fit a stretched exponential: bad initial energy\n\nI am trying to change the very simplest getting started - example of pymc3 (https://docs.pymc.io/notebooks/getting_started.html), the motivating example of linear regression into fitting a stretched exponential. \nThe simplest version of the model I tried is y = exp(-x**beta)\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-darkgrid')\n\n# Initialize random number generator\nnp.random.seed(1234)\n\n# True parameter values\nsigma = .1\nbeta = 1\n\n# Size of dataset\nsize = 1000\n\n# Predictor variable\nX1 = np.random.randn(size)\n\n# Simulate outcome variable\nY = np.exp(-X1**beta) + np.random.randn(size)*sigma\n\n# specify the model\nimport pymc3 as pm\nimport theano.tensor as tt\nprint('Running on PyMC3 v{}'.format(pm.__version__))\n\nbasic_model = pm.Model()\n\nwith basic_model:\n\n    # Priors for unknown model parameters\n    beta = pm.HalfNormal('beta', sigma=1)\n    sigma = pm.HalfNormal('sigma', sigma=1)\n\n    # Expected value of outcome\n    mu = pm.math.exp(-X1**beta)\n\n    # Likelihood (sampling distribution) of observations\n    Y_obs = pm.Normal('Y_obs', mu=mu, sigma=sigma, observed=Y)\n\nwith basic_model:\n    # draw 500 posterior samples\n    trace = pm.sample(500)\n\nwhich yields the output\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [sigma, beta]\nSampling 4 chains:   0%|          | 0/4000 [00:00<?, ?draws/s]/opt/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2920: RuntimeWarning: Mean of empty slice.\n  out=out, **kwargs)\n/opt/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2920: RuntimeWarning: Mean of empty slice.\n  out=out, **kwargs)\n\nBad initial energy, check any log probabilities that are inf or -inf, nan or very small:\nY_obs   NaN\n---------------------------------------------------------------------------\nRemoteTraceback                           Traceback (most recent call last)\nRemoteTraceback: \n\"\"\"\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.7/site-packages/pymc3/parallel_sampling.py\", line 160, in _start_loop\n    point, stats = self._compute_point()\n  File \"/opt/conda/lib/python3.7/site-packages/pymc3/parallel_sampling.py\", line 191, in _compute_point\n    point, stats = self._step_method.step(self._point)\n  File \"/opt/conda/lib/python3.7/site-packages/pymc3/step_methods/arraystep.py\", line 247, in step\n    apoint, stats = self.astep(array)\n  File \"/opt/conda/lib/python3.7/site-packages/pymc3/step_methods/hmc/base_hmc.py\", line 144, in astep\n    raise SamplingError(\"Bad initial energy\")\npymc3.exceptions.SamplingError: Bad initial energy\n\"\"\"\n\nThe above exception was the direct cause of the following exception:\n\nSamplingError                             Traceback (most recent call last)\nSamplingError: Bad initial energy\n\nThe above exception was the direct cause of the following exception:\n\nParallelSamplingError                     Traceback (most recent call last)\n<ipython-input-310-782c941fbda8> in <module>\n      1 with basic_model:\n      2     # draw 500 posterior samples\n----> 3     trace = pm.sample(500)\n\n/opt/conda/lib/python3.7/site-packages/pymc3/sampling.py in sample(draws, step, init, n_init, start, trace, chain_idx, chains, cores, tune, progressbar, model, random_seed, discard_tuned_samples, compute_convergence_checks, **kwargs)\n    435             _print_step_hierarchy(step)\n    436             try:\n--> 437                 trace = _mp_sample(**sample_args)\n    438             except pickle.PickleError:\n    439                 _log.warning(\"Could not pickle model, sampling singlethreaded.\")\n\n/opt/conda/lib/python3.7/site-packages/pymc3/sampling.py in _mp_sample(draws, tune, step, chains, cores, chain, random_seed, start, progressbar, trace, model, **kwargs)\n    967         try:\n    968             with sampler:\n--> 969                 for draw in sampler:\n    970                     trace = traces[draw.chain - chain]\n    971                     if (trace.supports_sampler_stats\n\n/opt/conda/lib/python3.7/site-packages/pymc3/parallel_sampling.py in __iter__(self)\n    391 \n    392         while self._active:\n--> 393             draw = ProcessAdapter.recv_draw(self._active)\n    394             proc, is_last, draw, tuning, stats, warns = draw\n    395             if self._progress is not None:\n\n/opt/conda/lib/python3.7/site-packages/pymc3/parallel_sampling.py in recv_draw(processes, timeout)\n    295             else:\n    296                 error = RuntimeError(\"Chain %s failed.\" % proc.chain)\n--> 297             raise error from old_error\n    298         elif msg[0] == \"writing_done\":\n    299             proc._readable = True\n\nParallelSamplingError: Bad initial energy\n\nINFO (theano.gof.compilelock): Waiting for existing lock by process '30255' (I am process '30252')\nINFO (theano.gof.compilelock): To manually release the lock, delete /home/jovyan/.theano/compiledir_Linux-4.4--generic-x86_64-with-debian-buster-sid-x86_64-3.7.3-64/lock_dir\n/opt/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2920: RuntimeWarning: Mean of empty slice.\n  out=out, **kwargs)\n/opt/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2920: RuntimeWarning: Mean of empty slice.\n  out=out, **kwargs)\n\nInstead of the stretched exponential, I have also tried power laws, and sine functions. It seems to me that the problem arises as soon as my model is not injective. Can this be an issue (as apparent, I am a newbie in this field)? Can I restrict sampling to only positive x values? Are there any tricks to this?\n\nA:\n\nSo the problem here is that\nX1**beta\n\nis only defined when X1 >= 0, or when beta is an integer. When you feed this into your observations, for most places, beta will be a float, and so many of \nmu = pm.math.exp(-X1**beta)\n\nwill be nan.\nI found this out with \n>>> basic_model.check_test_point()\n\nbeta_log__    -0.77\nsigma_log__   -0.77\nY_obs           NaN\nName: Log-probability of test_point, dtype: float64\n\nI am not sure what model you are trying to specify! There are ways to require beta to be an integer, and ways to require that X1 be positive, but I would need more details to help you describe the model.\n\n"
}