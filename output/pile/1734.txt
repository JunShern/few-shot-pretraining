{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1734",
    "text": "Q:\n\nHow to display invalid call exceptions from fluent controller in MVCContrib?\n\nHow can I pass the exception thorwn by the action in MVCContrib.FluentController CheckValidCall(action)? \n    [ExportModelStateToTempData]\n    public ActionResult Index(int itemId, int page)\n    {\n        return CheckValidCall(() => MyService.GetResults(itemId, page))\n            .Valid(x => View(x))\n            .Invalid(() => RedirectToAction(RestfulAction.Index));\n    } \n\nWhen GetResults() throws exception I want to display it in the view. I've tired ModelState\n    <%if (ViewData.ModelState.ContainsKey(\"_FORM\")) {%>\n    <div class=\"notificationError\">\n        <%= ViewData.ModelState[\"_FORM\"].Errors.FirstOrDefault().ErrorMessage %>            \n    </div>\n<%}%>\n\nbut the ModelState is valid and contains no errors. Is there any way to access the exception message without wrapping service method in try-catch block? If it helps here is my unit test to check ModelState which fails as TestController.ModelState.IsValid is true:\n    [Fact]\n    public void ServiceExceptionIsConvertedToModelStateErrorInFluentController()\n    {\n        // Set up\n        MockService.Setup(x => x.GetResults(It.IsAny<int>(), It.IsAny<int>()))\n            .Throws(new InvalidOperationException(\"Mocked Service Exception\"));\n\n        // Excercise\n        Assert.Throws<InvalidOperationException>(() => TestController.GetResults(1, 1));\n\n        // Verify\n        Assert.False(TestController.ModelState.IsValid);\n        Assert.True(TestController.ModelState[\"_FORM\"].Errors.Count > 0);\n    }\n\nA:\n\nI've manage to pass exception into ModelState by overriding MvcContrib.FluentController.AbsteactFluentController.ExecuteCheckValidCall(Func action):\n    protected override object ExecuteCheckValidCall(Func<object> action)\n    {\n        try\n        {\n            return base.ExecuteCheckValidCall(action);\n        }\n        catch (Exception exception)\n        {\n            ModelState.AddModelError(\"_Exception\", exception);\n            return null;\n        }\n    }\n\nWhich is called by CheckValidCall. However the method is described as \"public for testing purposes only and shouldn't be used\" the alternative way of doing it is to override MvcContrib.FluentController.AbstractFluentController.CheckValidCall().\n\n"
}