{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3275",
    "text": "Q:\n\nParsing an enum with the Flags attrubute not giving expected value\n\nMy enum:\n        [Flags]\n        public enum EqualityOperator\n        {\n            Equal,\n            NotEqual,\n            LessThan,\n            LessThanOrEqual,\n            GreaterThan,\n            GreaterThanOrEqual,\n            Like,\n            NotLike,\n            In,\n            NotIn\n        }\n\nMy code for parsing it:\nvar operatorVal = (EqualityOperator)Enum.Parse(typeof (EqualityOperator), filterInfo[3]);\n\nWhen I debug, I can see that filterInfo[3] is \"Like\"\nHowever, operatorVal comes out as \"LessThan | GreaterThan\"\nWhat am I missing? Can you not parse enums with the Flags attribute?\n\nA:\n\nYou need to also specify the values:\n[Flags]\npublic enum EqualityOperator {\n    Equal = 0,\n    NotEqual = 1,\n    LessThan = 2,\n    LessThanOrEqual = 4,\n    GreaterThan = 8,\n    GreaterThanOrEqual = 16,\n    Like = 32,\n    NotLike = 64,\n    In = 128,\n    NotIn = 256\n }\n\nThe reason that Like is parsing as LessThan | GreaterThan is because as you've defined it, LessThan has value 2 and GreaterThan has value 4. If you take the bitwise-or of these, you end up with LessThan | GreaterThan = 6. But look, Like has the value 6 as you've defined your enum! So, it did parse \"correctly\".\nI'll be frank with you though, I don't see the point of marking this enum with Flags though. The point of Flags is so that you can do bitwise operations on the enum values. Why do you think you need to do bitwise operations on the values of this enum? \n\n"
}