{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": true,
            "reason": "Text contains GRE."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['If number of items is limited (for example video content), then you can create all views and keep it ready for get view. (0.180)']."
        }
    ],
    "doc_id": "8665",
    "text": "Q:\n\nAndroid - ListView scrollig too slow\n\nI have a ListView that has one image and two lines of texts for each element (organized by a RelativeLayout). It works ok, but it's too slow and I know where the problem comes from!\nThis is the getView() method for the custom adapter that I'm using:\npublic View getView(int position, View convertView, ViewGroup parent) {\n            if (convertView == null) {\n                convertView = mLayoutInflater.inflate(R.layout.list_view_item, parent, false);\n                mViewHolder = new ViewHolder();\n                mViewHolder.cover = (ImageView) convertView.findViewById(R.id.app_icon);\n                mViewHolder.title = (TextView) convertView.findViewById(R.id.selection);\n                mViewHolder.description = (TextView) convertView.findViewById(R.id.app_short_description);\n                convertView.setTag(mViewHolder);\n            } else {\n                mViewHolder = (ViewHolder) convertView.getTag();\n            }\n\n            // Here is the origin of the issue ! \n            final Feed currentFeed = getItem(position);\n            mViewHolder.title.setText(currentFeed.getTitle());\n            mViewHolder.description.setText(currentFeed.getDescription());\n\n            try {\n                if(currentFeed.getThumbnailUrl() != null) {\n                     downloadThumbnail(mViewHolder.cover, currentFeed.getThumbnailUrl());\n                }\n            } catch(Exception e) {\n                e.printStackTrace();\n            }\n\n            return convertView;\n}\n\nprivate static class ViewHolder {\n        TextView title;\n        TextView description;\n        ImageView cover;\n}\n\nSo I have done some manual benchmarking and it appears that allocating an instance of Feed is the source of this slowness:\nfinal Feed currentFeed = getItem(position);\n\nI know this because I have written another version of this to compare the two:\n// Here is the origin of the issue ! \n            //final Feed currentFeed = getItem(position);\n            mViewHolder.title.setText(\"Title\");\n            mViewHolder.description.setText(\"Description\");\n\n            try {\n            if(currentFeed.getThumbnailUrl() != null) {\n                 downloadThumbnail(mViewHolder.cover, \"some url\");\n            }\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n\nThis one was way smoother (even with the downloadThumbnail() method working).\nI also precise that there are only 15 items on my ListView.\nI know that allocating objects is very expensive because of garbage collection but I can't any other way to do it!\nAny idea?\nThanks!\nEDIT\nDon't mind too much about the downloadThumbnail() method, it already does some caching. And actually even without any picture, it's still slow. \n\nA:\n\nWhen user scrolls the list, getView gets called on the adapter. Make sure that you dont do same things repeatedly, for example generating thumbnail. If number of items is limited (for example video content), then you can create all views and keep it ready for get view. Otherwise you may have to implement cacheing.\nBelow code shows an adapter and listView implementation, where in all listviews are created and stored in memory. Since this is meant for video browsing, memory does not pose any issue. (limited number of content, max 100)\nVideo List Adapter\nimport java.util.ArrayList;\nimport java.util.Formatter;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\n\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.database.Cursor;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.provider.MediaStore;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\nimport android.widget.LinearLayout.LayoutParams;\n\npublic class VideoListAdapter extends BaseAdapter {\n    private Context mContext = null;\n    private HashMap<String, VideoListItem> mHashedItems = new HashMap<String, VideoListItem>(); \n    private static final String TAG = \"VideoListAdapter\";\n\n    public static final int VIDEO_CONTENT_ID       = 0;\n    public static final int VIDEO_CONTENT_TITLE    = 1;\n    public static final int VIDEO_CONTENT_DURATION = 2;\n    public static final int VIDEO_CONTENT_RESOLUTION = 3;\n    public static final int VIDEO_CONTENT_MIME = 4;\n\n    private Cursor mCursorForVideoList = null;\n    private ContentResolver mContentResolver = null;\n    private int mListCount = 0;\n\n    VideoListAdapter(Context context, ContentResolver cr) {\n        mContext         = context;\n        mContentResolver = cr;\n        Log.i(TAG, \"In the Constructor\");\n\n        mCursorForVideoList = \n            mContentResolver.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, \n                                  new String[] { MediaStore.MediaColumns._ID, \n                                                 MediaStore.MediaColumns.TITLE, \n                                                 MediaStore.Video.VideoColumns.DURATION,\n                                                 MediaStore.Video.VideoColumns.RESOLUTION\n                                               }, \n                                  null, \n                                  null,  \n                                  null);\n        mListCount = mCursorForVideoList.getCount();\n    }\n\n    @Override\n    public int getCount() {\n        return mListCount;\n    }\n\n    @Override\n    public Object getItem(int arg0) {\n        return getVideoListItem(arg0);\n    }\n\n    @Override\n    public long getItemId(int position) {\n        //Log.i(TAG, \"position : \" + position);\n        return position;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        //Log.i(TAG, \"GetView :: Position : \" + position);\n        return getVideoListItem(position);\n    }\n\n    private VideoListItem getVideoListItem(int position)\n    {\n        //Log.i(TAG, \"getVideoListItem :: Position : \" + position);\n        String key = Integer.toString(position);\n        VideoListItem item = mHashedItems.get(key);\n        if(item == null)\n        {\n            //Log.i(TAG, \"New getVideoListItem :: Position : \" + position);\n            mCursorForVideoList.moveToPosition(position);\n            mHashedItems.put(key, new VideoListItem(mContext, mContentResolver, mCursorForVideoList));\n        }\n        return mHashedItems.get(key);\n    }\n\n};\n\nVideo List View \nimport java.util.Formatter;\nimport java.util.Locale;\n\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.database.Cursor;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.Typeface;\nimport android.provider.MediaStore;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TableLayout;\nimport android.widget.TextView;\nimport android.widget.LinearLayout.LayoutParams;\n\nclass VideoListItem extends LinearLayout\n{\n    private static final String TAG = \"VideoListAdapter\";\n\n    private ImageView mThumbnail = null;\n    private TextView mDuration   = null;\n    private TextView mTitle      = null;\n    private TextView mResolution = null;\n\n    private LayoutInflater mLayoutFactory = null;\n\n    private long mContentId = 0;\n\n    public VideoListItem(Context context, ContentResolver cr, Cursor cursor) {\n        super(context);\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);\n        params.setMargins(10, 10, 10, 10);\n\n        mLayoutFactory = LayoutInflater.from(context);\n        View thisView = mLayoutFactory.inflate(R.layout.videolistitem, null);\n        addView(thisView);\n\n        mThumbnail  = (ImageView) findViewById(R.id.thumbnail); \n        mDuration   = (TextView)  findViewById(R.id.DDuration);\n        mTitle      = (TextView)  findViewById(R.id.DTitle);\n        mResolution = (TextView)  findViewById(R.id.DResolution);\n\n        mThumbnail.setLayoutParams(new LinearLayout.LayoutParams(144, 144));\n\n        Resources r = this.getResources();\n        Bitmap bMap = MediaStore.Video.Thumbnails.getThumbnail(cr, cursor.getLong(VideoListAdapter.VIDEO_CONTENT_ID), MediaStore.Video.Thumbnails.MINI_KIND, null);\n        if(bMap != null)\n        {\n            mThumbnail.setImageBitmap(Bitmap.createScaledBitmap(bMap, 128, 128, true)); \n        }\n        else\n        {\n            mThumbnail.setImageDrawable(r.getDrawable(R.drawable.error));\n        }\n        mThumbnail.setPadding(16, 16, 16, 16);\n        mTitle.setText(cursor.getString(VideoListAdapter.VIDEO_CONTENT_TITLE));\n        mTitle.setSingleLine();\n        mTitle.setTextColor(Color.GREEN);\n\n        mResolution.setText(cursor.getString(VideoListAdapter.VIDEO_CONTENT_RESOLUTION));\n        mResolution.setSingleLine();\n        mResolution.setTextColor(Color.RED);\n\n        mDuration.setText(stringForTime(cursor.getInt(VideoListAdapter.VIDEO_CONTENT_DURATION)));\n        mDuration.setSingleLine();\n        mDuration.setTextColor(Color.CYAN);\n\n        mContentId = cursor.getLong(VideoListAdapter.VIDEO_CONTENT_ID);\n    }\n\n    public long getContentId()\n    {\n        return mContentId;\n    }\n\n    private StringBuilder mFormatBuilder = null;\n    private Formatter mFormatter = null;\n\n    private String stringForTime(int timeMs) {\n        int totalSeconds = timeMs / 1000;\n\n        mFormatBuilder = new StringBuilder();\n        mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());\n\n        int seconds = totalSeconds % 60;\n        int minutes = (totalSeconds / 60) % 60;\n        int hours   = totalSeconds / 3600;\n\n        mFormatBuilder.setLength(0);\n        if (hours > 0) {\n            return mFormatter.format(\"%d:%02d:%02d\", hours, minutes, seconds).toString();\n        } else {\n            return mFormatter.format(\"%02d:%02d\", minutes, seconds).toString();\n        }\n    }\n\n};\n\nShash\n\n"
}