{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7129",
    "text": "Q:\n\nDictionary (ObservableCollection) binding to ListView in Windows Phone 8.1\n\nI am trying to bind a dictionary to two textblocks in a listview. The listview ItemsSource binding is defined in the code behind and the text blocks content is in the XAML. \nI am able to display the items but they are displayed with square brackets around each row like [stringA, stringB]. However, this format will not work. The latest code that I tried was by setting the Key and Value which did not work was:\nXAML:\n           <ListView Name=\"lvListLogs\" \n                      Margin=\"0,10,0,0\">\n                <ListView.ItemTemplate>\n\n                    <DataTemplate x:Name=\"ListItemTemplate\">\n                        <Grid Margin=\"5,0,0,0\">\n                            <Grid.ColumnDefinitions>\n                                <ColumnDefinition Width=\"122\"/>\n                                <ColumnDefinition Width=\"*\"/>\n                            </Grid.ColumnDefinitions>\n                            <Grid.RowDefinitions>\n                                <RowDefinition MaxHeight=\"104\"></RowDefinition>\n                            </Grid.RowDefinitions>\n                            <TextBlock x:Name=\"tb_PointName\" Grid.Column=\"1\"\n                                                   Text=\"{Binding Key}\"\n                                                   Margin=\"10,0,0,0\" FontSize=\"40\" \n                                                   TextWrapping=\"Wrap\"\n                                                   MaxHeight=\"72\" \n                                                   Foreground=\"#FFFE5815\" />\n\n                            <TextBlock x:Name=\"tb_PointValue\" Grid.Column=\"1\"\n                                                   Text=\"{Binding Value}\"\n                                                   Margin=\"10,0,0,0\" FontSize=\"40\" \n                                                   TextWrapping=\"Wrap\"\n                                                   MaxHeight=\"72\" \n                                                   Foreground=\"#FFFE5815\" />\n\n                        </Grid>\n                    </DataTemplate>\n                </ListView.ItemTemplate>\n            </ListView>\n\nC# (abridged for clarity):\npublic Dictionary<string, string> mydict2 { get; set; }\n\nmydict2 = new Dictionary<string, string>();\n\n        if (item != null)\n            {\n                var props = item.GetType().GetRuntimeProperties();\n\n                foreach (var prop in props)\n                {\n                    foreach (var itm in group1.Items.Where(x => x.UniqueId == prop.Name))\n                    {\n                        var _Title = prop.Name;\n                        var _Value = prop.GetValue(item, null);\n\n                        string propertyValue;\n                        string propertyName;\n\n                        propertyValue = Convert.ToString(_Value);\n                        propertyName = _Title;\n\n                        mydict2.Add(_Title, propertyValue);\n                    }\n                }\n                //binding here\n                lvListLogs.ItemsSource = mydict2;\n\n            }\n\nAny assistance would be appreciated.\n\nA:\n\nTo achieve the required binding, instead of the Dictionary I used an ObservableCollection with the class and constructor.\nTo databind the listview (xaml) to ObservableCollection:\nCreate the Class with Constructor\n    public class PointInfoClass\n    {\n        public string PointName { get; set; }\n        public string PointValue { get; set; }\n\n        public PointInfoClass(string pointname, string pointvalue)\n        {\n            PointName = pointname;\n            PointValue = pointvalue;\n\n        }\n    }\n\nCreate collection of the PointInfoClass\n    public ObservableCollection<PointInfoClass> PointInfo\n    {\n        get\n        {\n            return returnPointInfo;\n        }\n    }\n\nInstantiate the collection\n    ObservableCollection<PointInfoClass> returnPointInfo = new ObservableCollection<PointInfoClass>();\n\nAdd item to collection\nreturnPointInfo.Add(new PointInfoClass(string1, string2));\n\nDatabind to the ObservableCollection name.\nThe xaml code:\n    <ListView\n        Grid.Row=\"1\"\n        ItemsSource=\"{Binding PointInfo}\" \n        IsItemClickEnabled=\"True\"\n        ItemClick=\"ItemView_ItemClick\"\n        Margin=\"19,0.5,22,-0.333\"\n        x:Name=\"lvPointInfo\" \n    Background=\"White\">\n        <ListView.ItemTemplate>\n            <DataTemplate >\n                <Grid Margin=\"0,0,0,20\">\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"Auto\"/>\n                        <ColumnDefinition Width=\"270\"/>\n                        <ColumnDefinition Width=\"60\"/>\n                    </Grid.ColumnDefinitions>\n\n                    <StackPanel Orientation=\"Vertical\"  Grid.Column=\"1\" VerticalAlignment=\"Top\">                           \n                        <TextBlock x:Name=\"tb_PointSubTitle\" Grid.Column=\"1\"\n                                    Text=\"{Binding PointName}\"\n                                    Margin=\"10,0,0,0\" FontSize=\"20\" \n                                    TextWrapping=\"Wrap\"\n                                    MaxHeight=\"72\" \n                                   Foreground=\"#FF5B5B5B\"\n                                                    />\n                    </StackPanel>\n                    <StackPanel Orientation=\"Vertical\"  Grid.Column=\"2\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Right\">\n                        <TextBlock x:Name=\"tb_PointValue\" \n                                    Grid.Column=\"1\"\n                                    Text=\"{Binding PointValue}\"\n                                    Margin=\"0,5,0,0\" FontSize=\"20\" \n                                    HorizontalAlignment=\"Right\"\n                                    TextWrapping=\"Wrap\"\n                                   FontWeight=\"Normal\"\n                                   Foreground=\"Black\" />\n\n                    </StackPanel>\n                </Grid>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n\nSet the DataContext of the ListView\nlvPointInfo.DataContext = this;\n\nThis code is edited for clarity. \n\n"
}