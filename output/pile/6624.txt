{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['Our simple example only scratches the surface of what you can do with regions. (0.182)', 'In our example, the named flow will be the elements that contain the text of our article: (0.173)', 'Our example only has one, but a document can have any number of named flows, each with its own name. (0.189)', 'Most of the time, to achieve an interesting layout, there will be more than one region associated with a named flow, and when that is the case those regions form a region chain. (0.177)', 'One key thing to remember about regions is that they are only visual containers. (0.190)', 'For example, if you wanted to change the color of the text displayed in the second region of the article flow, you could do so with region styling: (0.195)', 'For example, authors can use the API to determine whether or not there are enough regions to display the content from the named flow. (0.180)']."
        }
    ],
    "doc_id": "6624",
    "text": "Co-written by Beth Dakin and Mihnea-Vlad Ovidenie\n\nCSS Regions is an exciting technology that makes it easier than ever to create rich, magazine-like layouts within web content. Regions have been under development in WebKit for a while now, and we\u2019re delighted to tell you that they are available for use in Safari on iOS 7, Safari 7 on Mavericks, and Safari 6.1 on Mountain Lion.\n\nMagazine-like Layout\n\nSo I wrote this little article for my personal blog:\n\nThat\u2019s cool and all, but wouldn\u2019t it be so much cooler if it had a more interesting layout like this?\n\nSo fab! Without regions, achieving a layout like this is a pain. You have to figure out exactly which parts of the article can fit into each box and then hard-code the article content into the appropriate boxes. And after all that work, the design will get totally messed up if the user changes the font size! The layout looks cool, but doing it this way is a lot of work, and it isn\u2019t even a little bit flexible.\n\nRegions make achieving this layout as easy as pie. They allow authors to indicate that some sections of content are intended to define an overall layout template for a portion of the document and that other sections of markup represent the content that is intended to fill that template. The semantically-related content that will flow through the template is called a \u201cnamed flow.\u201d In our example above, the named flow is the text of my article. Once it has been named, the named flow is distributed into disjointed containers called regions, which can be positioned in any way to achieve the desired layout.\n\nOur simple example only scratches the surface of what you can do with regions. We\u2019ll get to more sophisticated applications later, but first let\u2019s take a closer look at the code.\n\nWhat is a Named Flow?\n\nA named flow is a collection of HTML elements extracted from the document\u2019s normal flow and displayed separately. Any HTML element can be part of a named flow. When an element is collected in a named flow, all of its children are collected with it.\n\nYou identify a collection of HTML elements as a named flow by using the CSS property -webkit-flow-into . In our example, the named flow will be the elements that contain the text of our article:\n\n< style > #flow-content { -webkit-flow-into: pizza-manifesto; } </ style > < div id = \"flow-content\" > < h1 > Pizza is amazing </ h1 > \u2026 </ div >\n\nOur example only has one, but a document can have any number of named flows, each with its own name.\n\nFlowing Into Regions\n\nA region is a block-level element that displays content from a named flow instead of its own content. Regions can have any size and can be positioned anywhere in the document. They are not required to be siblings or to be positioned next to each other in the layout.\n\nA region consumes content from a single named flow. Most of the time, to achieve an interesting layout, there will be more than one region associated with a named flow, and when that is the case those regions form a region chain. When content from a named flow does not fit into a region, the content simply flows into the next region in the chain.\n\nMaking an element a region is as easy as adding the -webkit-flow-from CSS property. In our example, the regions are the elements that form the layout template for the document\u2019s overall design:\n\n< style > .region { -webkit-flow-from: pizza-manifesto; } </ style > < div class = \"region\" id = \"region-1\" > </ div > < img src = \"pizza.jpg\" width = \"512\" height = \"342\" > < div class = \"region\" id = \"region-2\" > </ div > < div class = \"region\" id = \"region-3\" > </ div > < div class = \"region\" id = \"region-4\" > </ div > < div class = \"region\" id = \"region-5\" > </ div >\n\nTake a look at the code for the actual document to see the code for the regions side-by-side with the code for the named flow.\n\nOne key thing to remember about regions is that they are only visual containers. Region elements do not become the DOM parents of the elements flowed inside them; they only establish the bounding boxes that visually constrain the flow content.\n\nAdvanced Regions Features\n\nOne cool feature in the CSS Regions specification is region styling. With region styling, a designer can style the content based on which region it ends up flowing through. For example, if you wanted to change the color of the text displayed in the second region of the article flow, you could do so with region styling:\n\n@-webkit-region #region-2 { p { color : green ; } }\n\nThe extra styles are dynamically applied behind the scenes whenever the layout of the article content in the regions changes. So for example, if the user resizes the browser window and different pieces of content end up flowing through the styled region, the content will update dynamically. At this time, you can only style regions with the CSS properties color and background-color , but we intend to progressively add support for more properties, so stay tuned! In the meantime, check out this version of our article that uses region styling.\n\nThere is also a whole object model available for interacting with regions and named flows from within JavaScript. The proposed API will make it even easier to create fluid designs that adapt to layout changes. For example, authors can use the API to determine whether or not there are enough regions to display the content from the named flow. Handy stuff!\n\nDreaming with Regions\n\nCSS regions are powerful, and when they are combined with other advanced CSS features like shapes, filters, flexible boxes, transforms, and media queries, incredibly sophisticated designs can emerge.\n\nBack in February, during a CSS regions pattern rodeo hosted by CodePen, Tyler Fry and Joshua Hibbert created some awesome regions demos. Tyler won the contest with his reading carousel made out of regions and transforms, and Joshua created an exploding book, featuring a nice hover effect when opening the book.\n\nThe Adobe WebPlatform team has created some very compelling demos with regions in partnership with National Geographic. Check out this article that seamlessly integrates text and photographs to create a flexible design. Adobe has also created a demo that is so cutting edge you will need to download a WebKit Nightly to view it properly. This beautiful prototype uses regions, so the article content breaks up automatically across the different containers, and if font size or window size changes, or if the user zooms in, everything reflows automatically. Check out the source code here!\n\nWe are so excited about regions as a technology and excited that they are already available for use in shipping browsers. We plan to continue to refine our implementation in WebKit and to add additional features, so be sure to check back for improvements."
}