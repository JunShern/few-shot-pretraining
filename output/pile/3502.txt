{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3502",
    "text": "Q:\n\nAngular Code Coverage wrong output\n\nMy stack is: Angular.js, Karma, Karma-coverage (Istanbul) and Jasmine.\nI have been running Code Coverage analysis over my app, the problem, and thus the question, is\nthat I get Service A marked as covered by tests (in green) when it actually does not have any tests associated.\nI suspect that the following scenario is to blame:\n\nI know that Service A is used by Controller B.\nController B is covered by tests, and the Code Coverage results mark it correctly as covered by tests.\nService A is not being mocked when testing Controller B.\n\nI think that since service A is indirectly called by Controller B's tests, I get the wrong result.\nAny ideas? Am I suspecting the right thing? Is there any ways around it so I can get an accurate test coverage result in this aspect?\nThanks in advance!\n\nA:\n\nUnfortunately, this is how code coverage is evaluated. If the code is executed, it is considered to be \"covered\". Luckily, there is something you can do to reduce some of the false positives. You can mock out your dependencies!\nThe following example will execute a jasmine spy instead of the actual service:\ndescribe('Controller Tests', function() {\n  var $scope, mockServiceA;\n\n  beforeEach(module('app', function($provide) {\n    mockServiceA = jasmine.createSpyObj('mockServiceA', ['foo']);\n    $provide.value('ServiceA', mockServiceA);\n  }));\n\n  beforeEach(inject(function($rootScope, $controller) {\n    $scope = $rootScope.$new();\n    $controller('ControllerB', {\n      $scope: $scope\n    });\n  }));\n\n  describe('ControllerB', function() {\n    it('should call mock service', function() {\n      expect(mockServiceA.foo).not.toHaveBeenCalled();\n      $scope.useServiceA();\n      expect(mockServiceA.foo).toHaveBeenCalled();\n    });\n  });\n});\n\nHere is a working Plunker: http://plnkr.co/edit/x8gQQNsHT0R5n5iJSxKw?p=info\n\n"
}