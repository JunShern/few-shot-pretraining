{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 14 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3026",
    "text": "/* SPDX-License-Identifier: GPL-2.0 */\n/*\n * Copyright (c) 2018 MediaTek Inc.\n * Author: Weijie Gao <weijie.gao@mediatek.com>\n */\n\n#ifndef _MT753X_H_\n#define _MT753X_H_\n\n#include <linux/list.h>\n#include <linux/mutex.h>\n#include <linux/netdevice.h>\n#include <linux/of_mdio.h>\n#include <linux/workqueue.h>\n#include <linux/gpio/consumer.h>\n\n#ifdef CONFIG_SWCONFIG\n#include <linux/switch.h>\n#endif\n\n#include \"mt753x_vlan.h\"\n\n#define MT753X_DFL_CPU_PORT\t6\n#define MT753X_NUM_PHYS\t\t5\n\n#define MT753X_DFL_SMI_ADDR\t0x1f\n#define MT753X_SMI_ADDR_MASK\t0x1f\n\nstruct gsw_mt753x;\n\nenum mt753x_model {\n\tMT7530 = 0x7530,\n\tMT7531 = 0x7531\n};\n\nstruct mt753x_port_cfg {\n\tstruct device_node *np;\n\tint phy_mode;\n\tu32 enabled: 1;\n\tu32 force_link: 1;\n\tu32 speed: 2;\n\tu32 duplex: 1;\n};\n\nstruct mt753x_phy {\n\tstruct gsw_mt753x *gsw;\n\tstruct net_device netdev;\n\tstruct phy_device *phydev;\n};\n\nstruct gsw_mt753x {\n\tu32 id;\n\n\tstruct device *dev;\n\tstruct mii_bus *host_bus;\n\tstruct mii_bus *gphy_bus;\n\tstruct mutex mii_lock;\t/* MII access lock */\n\tu32 smi_addr;\n\tu32 phy_base;\n\tint direct_phy_access;\n\n\tenum mt753x_model model;\n\tconst char *name;\n\n\tstruct mt753x_port_cfg port5_cfg;\n\tstruct mt753x_port_cfg port6_cfg;\n\n\tint phy_status_poll;\n\tstruct mt753x_phy phys[MT753X_NUM_PHYS];\n\n\tint phy_link_sts;\n\n\tint irq;\n\tint reset_pin;\n\tstruct work_struct irq_worker;\n\n#ifdef CONFIG_SWCONFIG\n\tstruct switch_dev swdev;\n\tu32 cpu_port;\n#endif\n\n\tint global_vlan_enable;\n\tstruct mt753x_vlan_entry vlan_entries[MT753X_NUM_VLANS];\n\tstruct mt753x_port_entry port_entries[MT753X_NUM_PORTS];\n\n\tint (*mii_read)(struct gsw_mt753x *gsw, int phy, int reg);\n\tvoid (*mii_write)(struct gsw_mt753x *gsw, int phy, int reg, u16 val);\n\n\tint (*mmd_read)(struct gsw_mt753x *gsw, int addr, int devad, u16 reg);\n\tvoid (*mmd_write)(struct gsw_mt753x *gsw, int addr, int devad, u16 reg,\n\t\t\t  u16 val);\n\n\tstruct list_head list;\n};\n\nstruct chip_rev {\n\tconst char *name;\n\tu32 rev;\n};\n\nstruct mt753x_sw_id {\n\tenum mt753x_model model;\n\tint (*detect)(struct gsw_mt753x *gsw, struct chip_rev *crev);\n\tint (*init)(struct gsw_mt753x *gsw);\n\tint (*post_init)(struct gsw_mt753x *gsw);\n};\n\nextern struct list_head mt753x_devs;\n\nstruct gsw_mt753x *mt753x_get_gsw(u32 id);\nstruct gsw_mt753x *mt753x_get_first_gsw(void);\nvoid mt753x_put_gsw(void);\nvoid mt753x_lock_gsw(void);\n\nu32 mt753x_reg_read(struct gsw_mt753x *gsw, u32 reg);\nvoid mt753x_reg_write(struct gsw_mt753x *gsw, u32 reg, u32 val);\n\nint mt753x_mii_read(struct gsw_mt753x *gsw, int phy, int reg);\nvoid mt753x_mii_write(struct gsw_mt753x *gsw, int phy, int reg, u16 val);\n\nint mt753x_mmd_read(struct gsw_mt753x *gsw, int addr, int devad, u16 reg);\nvoid mt753x_mmd_write(struct gsw_mt753x *gsw, int addr, int devad, u16 reg,\n\t\t      u16 val);\n\nint mt753x_mmd_ind_read(struct gsw_mt753x *gsw, int addr, int devad, u16 reg);\nvoid mt753x_mmd_ind_write(struct gsw_mt753x *gsw, int addr, int devad, u16 reg,\n\t\t\t  u16 val);\n\nvoid mt753x_irq_worker(struct work_struct *work);\nvoid mt753x_irq_enable(struct gsw_mt753x *gsw);\n\n/* MDIO Indirect Access Registers */\n#define MII_MMD_ACC_CTL_REG\t\t0x0d\n#define MMD_CMD_S\t\t\t14\n#define MMD_CMD_M\t\t\t0xc000\n#define MMD_DEVAD_S\t\t\t0\n#define MMD_DEVAD_M\t\t\t0x1f\n\n/* MMD_CMD: MMD commands */\n#define MMD_ADDR\t\t\t0\n#define MMD_DATA\t\t\t1\n\n#define MII_MMD_ADDR_DATA_REG\t\t0x0e\n\n/* Procedure of MT753x Internal Register Access\n *\n * 1. Internal Register Address\n *\n *    The MT753x has a 16-bit register address and each register is 32-bit.\n *    This means the lowest two bits are not used as the register address is\n *    4-byte aligned.\n *\n *    Rest of the valid bits are divided into two parts:\n *      Bit 15..6 is the Page address\n *      Bit 5..2 is the low address\n *\n *    -------------------------------------------------------------------\n *    | 15  14  13  12  11  10   9   8   7   6 | 5   4   3   2 | 1   0  |\n *    |----------------------------------------|---------------|--------|\n *    |              Page Address              |    Address    | Unused |\n *    -------------------------------------------------------------------\n *\n * 2. MDIO access timing\n *\n *    The MT753x uses the following MDIO timing for a single register read\n *\n *      Phase 1: Write Page Address\n *    -------------------------------------------------------------------\n *    | ST | OP | PHY_ADDR | TYPE | RSVD | TA |  RSVD |    PAGE_ADDR    |\n *    -------------------------------------------------------------------\n *    | 01 | 01 |   11111  |   1  | 1111 | xx | 00000 | REG_ADDR[15..6] |\n *    -------------------------------------------------------------------\n *\n *      Phase 2: Write low Address & Read low word\n *    -------------------------------------------------------------------\n *    | ST | OP | PHY_ADDR | TYPE |    LOW_ADDR    | TA |      DATA     |\n *    -------------------------------------------------------------------\n *    | 01 | 10 |   11111  |   0  | REG_ADDR[5..2] | xx |  DATA[15..0]  |\n *    -------------------------------------------------------------------\n *\n *      Phase 3: Read high word\n *    -------------------------------------------------------------------\n *    | ST | OP | PHY_ADDR | TYPE | RSVD | TA |           DATA          |\n *    -------------------------------------------------------------------\n *    | 01 | 10 |   11111  |   1  | 0000 | xx |       DATA[31..16]      |\n *    -------------------------------------------------------------------\n *\n *    The MT753x uses the following MDIO timing for a single register write\n *\n *      Phase 1: Write Page Address (The same as read)\n *\n *      Phase 2: Write low Address and low word\n *    -------------------------------------------------------------------\n *    | ST | OP | PHY_ADDR | TYPE |    LOW_ADDR    | TA |      DATA     |\n *    -------------------------------------------------------------------\n *    | 01 | 01 |   11111  |   0  | REG_ADDR[5..2] | xx |  DATA[15..0]  |\n *    -------------------------------------------------------------------\n *\n *      Phase 3: write high word\n *    -------------------------------------------------------------------\n *    | ST | OP | PHY_ADDR | TYPE | RSVD | TA |           DATA          |\n *    -------------------------------------------------------------------\n *    | 01 | 01 |   11111  |   1  | 0000 | xx |       DATA[31..16]      |\n *    -------------------------------------------------------------------\n *\n */\n\n/* Internal Register Address fields */\n#define MT753X_REG_PAGE_ADDR_S\t\t6\n#define MT753X_REG_PAGE_ADDR_M\t\t0xffc0\n#define MT753X_REG_ADDR_S\t\t2\n#define MT753X_REG_ADDR_M\t\t0x3c\n#endif /* _MT753X_H_ */\n"
}