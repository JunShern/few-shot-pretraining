{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 12 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1356",
    "text": "package cn.neural.common;\n\nimport lombok.Getter;\n\nimport java.util.concurrent.*;\n\n/**\n * A specialized <em>semaphore</em> implementation that provides a number of permits in a given time frame.\n * <p>\n * TimedSemaphore sem = new TimedSemaphore(1, TimeUnit.SECOND, 10);\n *\n * @author lry\n */\n@Getter\npublic class TimedSemaphore {\n\n    /**\n     * Constant for a value representing no limit.\n     * If the limit is set to a value less or equal this constant,\n     * the {@code TimedSemaphore} will be effectively switched off.\n     */\n    public static final int NO_LIMIT = 0;\n\n    /**\n     * Constant for the thread pool size for the executor.\n     */\n    private static final int THREAD_POOL_SIZE = 1;\n    /**\n     * The executor service for managing the timer thread.\n     */\n    private final ScheduledExecutorService executorService;\n    /**\n     * Stores the period for this timed semaphore.\n     */\n    private final long period;\n    private final TimeUnit unit;\n    /**\n     * A flag whether the executor service was created by this object.\n     */\n    private final boolean ownExecutor;\n    /**\n     * A future object representing the timer task.\n     */\n    private ScheduledFuture<?> task;\n    /**\n     * Stores the total number of invocations of the acquire() method.\n     */\n    private long totalAcquireCount;\n    /**\n     * The counter for the periods. This counter is increased every time a period ends.\n     */\n    private long periodCount;\n    private int limit;\n    /**\n     * The current counter.\n     */\n    private int acquireCount;\n    /**\n     * The number of invocations of acquire() in the last period.\n     */\n    private int lastCallsPerPeriod;\n    /**\n     * A flag whether shutdown() was called.\n     */\n    private boolean shutdown;\n\n\n    public TimedSemaphore(long timePeriod, TimeUnit timeUnit, int limit) {\n        this(null, timePeriod, timeUnit, limit);\n    }\n\n    public TimedSemaphore(ScheduledExecutorService service, long timePeriod, TimeUnit timeUnit, int limit) {\n        if (timePeriod < 1) {\n            throw new IllegalArgumentException(\"Time period must be greater than 0!\");\n        }\n\n        this.period = timePeriod;\n        this.unit = timeUnit;\n        if (service != null) {\n            this.executorService = service;\n            this.ownExecutor = false;\n        } else {\n            ScheduledThreadPoolExecutor timerExecutor = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE, r -> {\n                Thread t = new Thread(r);\n                t.setDaemon(true);\n                t.setName(\"MANAGING_TIMER_THREAD\");\n                return t;\n            });\n            timerExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n            timerExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n            this.executorService = timerExecutor;\n            this.ownExecutor = true;\n        }\n\n        setLimit(limit);\n    }\n\n    /**\n     * Returns the limit enforced by this semaphore. The limit determines how\n     * many invocations of {@link #acquire()} are allowed within the monitored period.\n     *\n     * @return the limit\n     */\n    public final synchronized int getLimit() {\n        return limit;\n    }\n\n    /**\n     * Sets the limit. This is the number of times the {@link #acquire()} method\n     * can be called within the time period specified. If this limit is reached,\n     * further invocations of {@link #acquire()} will block. Setting the limit\n     * to a value &lt;= {@link #NO_LIMIT} will cause the limit to be disabled,\n     * i.e. an arbitrary number of{@link #acquire()} invocations is allowed in the time period.\n     *\n     * @param limit the limit\n     */\n    public final synchronized void setLimit(final int limit) {\n        this.limit = limit;\n    }\n\n    /**\n     * Initializes a shutdown. After that the object cannot be used any more.\n     * This method can be invoked an arbitrary number of times. All invocations\n     * after the first one do not have any effect.\n     */\n    public synchronized void shutdown() {\n        if (!shutdown) {\n            if (ownExecutor) {\n                // if the executor was created by this instance, it has to be shutdown\n                getExecutorService().shutdownNow();\n            }\n            if (task != null) {\n                task.cancel(false);\n            }\n            shutdown = true;\n        }\n    }\n\n    /**\n     * Tests whether the {@link #shutdown()} method has been called on this object.\n     * <p>\n     * If this method returns <b>true</b>, this instance cannot be used any longer.\n     *\n     * @return a flag whether a shutdown has been performed\n     */\n    public synchronized boolean isShutdown() {\n        return shutdown;\n    }\n\n    /**\n     * Acquires a permit from this semaphore. This method will block if\n     * the limit for the current period has already been reached. If\n     * {@link #shutdown()} has already been invoked, calling this method will\n     * cause an exception. The very first call of this method starts the timer\n     * task which monitors the time period set for this {@code TimedSemaphore}.\n     * From now on the semaphore is active.\n     *\n     * @throws InterruptedException  if the thread gets interrupted\n     * @throws IllegalStateException if this semaphore is already shut down\n     */\n    public synchronized void acquire() throws InterruptedException {\n        prepareAcquire();\n        boolean canPass;\n        do {\n            canPass = acquirePermit();\n            if (!canPass) {\n                wait();\n            }\n        } while (!canPass);\n    }\n\n    /**\n     * Tries to acquire a permit from this semaphore. If the limit of this semaphore has\n     * not yet been reached, a permit is acquired, and this method returns\n     * <strong>true</strong>. Otherwise, this method returns immediately with the result\n     * <strong>false</strong>.\n     *\n     * @return <strong>true</strong> if a permit could be acquired; <strong>false</strong> otherwise\n     * @throws IllegalStateException if this semaphore is already shut down\n     */\n    public synchronized boolean tryAcquire() {\n        prepareAcquire();\n        return acquirePermit();\n    }\n\n    /**\n     * Returns the number of (successful) acquire invocations during the last\n     * period. This is the number of times the {@link #acquire()} method was\n     * called without blocking. This can be useful for testing or debugging\n     * purposes or to determine a meaningful threshold value. If a limit is set,\n     * the value returned by this method won't be greater than this limit.\n     *\n     * @return the number of non-blocking invocations of the {@link #acquire()} method\n     */\n    public synchronized int getLastAcquiresPerPeriod() {\n        return lastCallsPerPeriod;\n    }\n\n    /**\n     * Returns the number of invocations of the {@link #acquire()} method for\n     * the current period. This may be useful for testing or debugging purposes.\n     *\n     * @return the current number of {@link #acquire()} invocations\n     */\n    public synchronized int getAcquireCount() {\n        return acquireCount;\n    }\n\n    /**\n     * Returns the number of calls to the {@link #acquire()} method that can\n     * still be performed in the current period without blocking. This method\n     * can give an indication whether it is safe to call the {@link #acquire()}\n     * method without risking to be suspended. However, there is no guarantee\n     * that a subsequent call to {@link #acquire()} actually is not-blocking\n     * because in the mean time other threads may have invoked the semaphore.\n     *\n     * @return the current number of available {@link #acquire()} calls in the\n     * current period\n     */\n    public synchronized int getAvailablePermits() {\n        return getLimit() - getAcquireCount();\n    }\n\n    /**\n     * Returns the average number of successful (i.e. non-blocking)\n     * {@link #acquire()} invocations for the entire life-time of this {@code\n     * TimedSemaphore}. This method can be used for instance for statistical\n     * calculations.\n     *\n     * @return the average number of {@link #acquire()} invocations per time\n     * unit\n     */\n    public synchronized double getAverageCallsPerPeriod() {\n        return periodCount == 0 ? 0 : (double) totalAcquireCount / (double) periodCount;\n    }\n\n    /**\n     * Starts the timer. This method is called when {@link #acquire()} is called\n     * for the first time. It schedules a task to be executed at fixed rate to\n     * monitor the time period specified.\n     *\n     * @return a future object representing the task scheduled\n     */\n    protected ScheduledFuture<?> startTimer() {\n        return getExecutorService().scheduleAtFixedRate(this::endOfPeriod, getPeriod(), getPeriod(), getUnit());\n    }\n\n    /**\n     * The current time period is finished. This method is called by the timer\n     * used internally to monitor the time period. It resets the counter and\n     * releases the threads waiting for this barrier.\n     */\n    private synchronized void endOfPeriod() {\n        lastCallsPerPeriod = acquireCount;\n        totalAcquireCount += acquireCount;\n        periodCount++;\n        acquireCount = 0;\n        notifyAll();\n    }\n\n    /**\n     * Prepares an acquire operation.\n     * <p>\n     * Checks for the current state and starts the internal timer if necessary.\n     */\n    private void prepareAcquire() {\n        if (isShutdown()) {\n            throw new IllegalStateException(\"TimedSemaphore is shut down!\");\n        }\n        if (task == null) {\n            task = startTimer();\n        }\n    }\n\n    /**\n     * Internal helper method for acquiring a permit.\n     *\n     * @return a flag whether a permit could be acquired\n     */\n    private boolean acquirePermit() {\n        if (getLimit() <= NO_LIMIT || acquireCount < getLimit()) {\n            acquireCount++;\n            return true;\n        }\n\n        return false;\n    }\n\n}\n"
}