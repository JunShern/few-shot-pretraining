{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8527",
    "text": "Q:\n\nSpring/Angular get current user and save post to that user\n\nSorry, I am back with just one more question. I have am using Spring security and Angular front end. My question is once I log in, how do I save a post to the current user.\nPost model:  \n@Id\n@GeneratedValue\nprivate Long id;\n\nprivate String title;\n\n@Column(columnDefinition = \"TEXT\")\nprivate String body;\n\n@JsonFormat(pattern = \"yyyy-MM-dd hh:mm:ss a\", timezone = \"America/New_York\")\nprivate Date createdAt;\n\nprivate String pictureUrl;\n\n@ManyToOne(fetch = FetchType.LAZY)\n@JoinColumn(name = \"user\")\nprivate User user;\n\nUserDetailsServiceImpl:\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserRepository repository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws \n         UsernameNotFoundException {\n\n         // Get the user's username\n         User currentUser = repository.findByUsername(username);\n\n    // Create a new UserDetails called user and set to user's :\n    // username, current users password, user is enabled, account Non expired, creds non expired\n    // account non locked,\n    UserDetails user = new org.springframework.security.core.userdetails.User(username, currentUser.getPassword(),\n            true, true, true, true,\n            AuthorityUtils.createAuthorityList(currentUser.getRole()));\n\n    return user;\n}\n\n}\nObviously this works fine with the command line runner:\nPost post1 = new Post(\"Title\", \"Some content\", date, user1);\n\nAngular: \naddPost() {\n    const title = this.eventForm.get('title').value;\n    const body = this.eventForm.get('body').value;\n\n    const newTask: Task = {\n        post,\n        body\n    };\n\n    this.data.addPost(newPost).subscribe((res) => {\n       console.log(res);\n       this.getPost();\n    });\n}\n\nHow can I, once logged in, get the actual user object to save the post object.\n\nA:\n\nI have no idea if this is the correct way to do this, but it works at least! Lol...\nIt works for now anyways, haha. \n@Autowired\nprivate PostRepository repository;\n\n@Autowired \nUserRepository userRepository;\n\n@PostMapping(\"/posts\")\npublic void addPost(@RequestBody Post post) {\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n    User user = userRepository.findByUsername(auth.getName());\n    post.setUser(user);\n    this.repository.save(post);\n}\n\n"
}