{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7965",
    "text": "Q:\n\nValidar n\u00famero Cart\u00e3o de cr\u00e9dito\n\nComo fa\u00e7o para validar n\u00fameros de cart\u00f5es de cr\u00e9dito?\nN\u00e3o farei integra\u00e7\u00e3o com operadora de cart\u00e3o, preciso apenas validar o n\u00famero, assim como ocorre com a valida\u00e7\u00e3o com CPF. \n\nA:\n\nVoc\u00ea pode utilizar o atributo CreditCardAttribute para validar. Como est\u00e1 utilizando asp.net-mvc-5 creio que j\u00e1 est\u00e1 familiarizado com o Data Annotations. Ele possui um atributo chamado [CreditCard], que voc\u00ea pode utilizar para esse fim. Para utilizar o mesmo basta fazer a marca\u00e7\u00e3o em sua propriedade da seguinte forma:\n[CreditCard(ErrorMessage = \"Cart\u00e3o de cr\u00e9dito inv\u00e1lido\")]\npublic string CartaoCredito { get; set; }\n\nNesta resposta voc\u00ea conseguir\u00e1 ver mais detalhado.\nVoc\u00ea pode implementar seus pr\u00f3prios atributos ou m\u00e9todos para validar, caso deseje.\nAlguns links para ajudar:\nCredit Card Validation Client Asp.Net.\nCredit Card Attribute.\n\nA:\n\nA valida\u00e7\u00e3o de n\u00fameros de cart\u00e3o de cr\u00e9dito normalmente \u00e9 feita pelo algoritmo de Luhn:\n\nRetire o \u00faltimo d\u00edgito do n\u00famero. Ele \u00e9 o verificador;\nEscreva os n\u00fameros na ordem inversa;\nMultiplique os d\u00edgitos das casas \u00edmpares por 2 e subtraia 9 de todos os resultados maiores que 9;\nSome todos os n\u00fameros;\nO d\u00edgito verificador (aquele do passo 1) \u00e9 o n\u00famero que voc\u00ea precisa somar a todos os outros n\u00fameros somados pra obter um m\u00f3dulo 10.\n\nExemplo\nPasso                                                                                                       Total\nN\u00famero Original                          :  4   5   5   6   7   3   7   5   8   6   8   9   9   8   5   5   \nTirando o \u00faltimo d\u00edgito                  :  4   5   5   6   7   3   7   5   8   6   8   9   9   8   5       \nInvertendo                               :  5   8   9   9   8   6   8   5   7   3   7   6   5   5   4       \nMultiplicando casas \u00edmpares por 2        :  10  8   18  9   16  6   16  5   14  3   14  6   10  5   8       \nSubtraia 9 de todos os n\u00fameros acima de 9:  1   8   9   9   7   6   7   5   5   3   5   6   1   5   8       \nSomando todos os n\u00fameros                 :  1   8   9   9   7   6   7   5   5   3   5   6   1   5   8       85\nMod 10: 85, m\u00f3dulo 10 = 5 (\u00faltimo d\u00edgito do cart\u00e3o)\n\nFormatos de Operadoras Conhecidas\nBandeira                    Intervalo de In\u00edcio             N\u00famero de D\u00edgitos\n-----------------------------------------------------------------------------\nAmerican Express            34, 37                          15\nDiners Club - Carte Blanche 300, 301, 302, 303, 304, 305    14\nDiners Club - International 36                              14\nDiners Club - USA & Canada  54                              16\nDiscover                    6011, 622126 at\u00e9 622925, 644,   16\n                            645, 646, 647, 648, 649, 65     \nInstaPayment                637, 638, 639                   16\nJCB                         3528 at\u00e9 3589                   16\nLaser                       6304, 6706, 6771, 6709          16-19\nMaestro                     5018, 5020, 5038, 5893, 6304,   16-19\n                            6759, 6761, 6762, 6763          \nMasterCard                  51, 52, 53, 54, 55              16-19\nVisa                        4                               13-16\nVisa Electron               4026, 417500, 4508, 4844, 4913, 16\n                            4917    \n\nTirei daqui.\nNo ASP.NET MVC\nPor atributo, conforme a resposta do @Randrade. \n\nA:\n\nO Algoritmo utilizado para calcular o digito de verifica\u00e7\u00e3o (Check Digit) de N\u00fameros de Cart\u00e3o de Cr\u00e9dito \u00e9 o Algoritmo de Luhn, por\u00e9m n\u00e3o basta apenas validar a informa\u00e7\u00e3o sem levar em conta as caracter\u00edsticas de um n\u00famero de Cart\u00e3o de Cr\u00e9dito que s\u00e3o:\n\nPossuir somente n\u00fameros\nTer entre 12 e 19 d\u00edgitos (na verdade n\u00e3o h\u00e1 CC com 17 d\u00edgitos)\nOs 6 primeiros d\u00edgitos devem indicar um IIN (Issuer identification number) v\u00e1lido. Ele \u00e9 chamado de BIN no meio banc\u00e1rio.\nPassar na valida\u00e7\u00e3o do Algoritmo de Luhnn\n\nA verifica\u00e7\u00e3o do item BIN necessita de uma base de informa\u00e7\u00f5es para compara\u00e7\u00e3o. N\u00e3o existe uma l\u00f3gica na gera\u00e7\u00e3o dos BINs. Voc\u00ea pode ter faixas por exemplo que tem saltos e dentro destes saltos o BIN pertecer a uma institui\u00e7\u00e3o diferente, inclusive de pa\u00eds diferente.\n\u00c9 um cl\u00e1ssico erro acreditar que todo cart\u00e3o que comece com 4 \u00e9 VISA e com 5 seja Mastercard, por exemplo. Atualmente no Brasil isso \u00e9 at\u00e9 v\u00e1lido, pois temos poucas empresas de Cart\u00e3o o que acaba reservando o 4 e o 5 apenas para estas duas Bandeiras.\nDeixando estes aspectos de lado, pois n\u00e3o h\u00e1 como validar um BIN via c\u00f3digo sem que seja feita algum tipo de consulta, a valida\u00e7\u00e3o pode ser feita com o seguinte algoritmo\n\nVerificar se o tamanho do numero do cart\u00e3o est\u00e1 entre 12 e 19. Atualmente no Brasil \u00e9 raro ter um cart\u00e3o diferente de 16. Alguns Hipercard tinham 19 mas j\u00e1 est\u00e3o saindo com 16 tamb\u00e9m.\nVerificar se o valor possui somente n\u00fameros\nVerificar se o n\u00famero passa pela valida\u00e7\u00e3o do Algoritmo de Luhnn\n\nAbaixo um c\u00f3digo em C#. Ele \u00e9 apenas uma forma de entender pois j\u00e1 h\u00e1 nas vers\u00f5es atuais do ASP.net, valida\u00e7\u00e3o por Attributes para esta verifica\u00e7\u00e3o, conforme resposta do @Randrade\nO Algoritmo de Luhnn est\u00e1 representado na resposta do @Cigano Morrison Mendez com a ressalva que na \u00faltima linha, onde est\u00e1 \nMod 10: 85, m\u00f3dulo 10 = 5 (\u00faltimo d\u00edgito do cart\u00e3o)\n\nDeveria estar\nMod 10: 85, m\u00f3dulo 10 = 5, Check Digit = 10 - 5 = 5 (\u00faltimo d\u00edgito da sequencia)\n\nNa verdade, n\u00e3o h\u00e1 a necessidade de calcular o check digit. Basta incluir o termo na soma e calcular o m\u00f3dulo 10 dela. Se for zero \u00e9 v\u00e1lido.\n    // About the Algorithm\n    /**\n        @See https://en.wikipedia.org/wiki/Luhn_algorithm\n        Steps:\n        1 - From the rightmost Digit of a Numeric String, Double the value of every digit on odd positions\n        2 - If the obtained value is greather than 9, subtract 9 from it\n        3 - Sum all values\n        4 - Calculate the Modulus of the value on 10 basis, if is zero so the String has a Luhnn Check Valid\n    **/\n\n    public static bool IsValidLuhnn(string val) {\n\n        int currentDigit;\n        int valSum = 0;\n        int currentProcNum = 0; \n\n        for (int i = val.Length-1; i >= 0; i--) {           \n            //parse to int the current rightmost digit, if fail return false (not-valid id)\n            if(!int.TryParse(val.Substring(i,1), out currentDigit))\n                return false ;              \n\n            currentProcNum = currentDigit << (1 +i & 1);                                                                    \n            //summarize the processed digits\n            valSum +=  (currentProcNum > 9 ? currentProcNum - 9 : currentProcNum);\n\n        }  \n\n        // if digits sum is exactly divisible by 10, return true (valid), else false (not-valid)\n        // valSum must be greater than zero to avoid validate 0000000...00 value\n        return (valSum > 0 && valSum % 10 == 0) ;\n    } \n\n    public static bool isValidCreditCardNumber(string cc) {\n        // rule #1, must be only numbers\n        if (cc.All(Char.IsDigit) == false) {\n            return false;\n        }\n        // rule #2, must have at least 12 and max of 19 digits\n        if (12 > cc.Length || cc.Length > 19) {\n            return false;\n        }\n        // rule #3, must pass Luhnn Algorithm\n        return IsValidLuhnn(cc);\n\n    }\n\nPode ser testado aqui\n\n"
}