{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['There currently are up to three pieces of information */ (0.178)']."
        }
    ],
    "doc_id": "4063",
    "text": "/* dporfsx.f -- translated by f2c (version 20061008).\n   You must link the resulting object file with libf2c:\n\ton Microsoft Windows system, link with libf2c.lib;\n\ton Linux or Unix systems, link with .../path/to/libf2c.a -lm\n\tor, if you install libf2c.a in a standard place, with -lf2c -lm\n\t-- in that order, at the end of the command line, as in\n\t\tcc *.o -lf2c -lm\n\tSource for libf2c is in /netlib/f2c/libf2c.zip, e.g.,\n\n\t\thttp://www.netlib.org/f2c/libf2c.zip\n*/\n\n#include \"f2c.h\"\n#include \"blaswrap.h\"\n\n/* Table of constant values */\n\nstatic integer c_n1 = -1;\nstatic integer c__0 = 0;\nstatic integer c__1 = 1;\n\n/* Subroutine */ int dporfsx_(char *uplo, char *equed, integer *n, integer *\n\tnrhs, doublereal *a, integer *lda, doublereal *af, integer *ldaf, \n\tdoublereal *s, doublereal *b, integer *ldb, doublereal *x, integer *\n\tldx, doublereal *rcond, doublereal *berr, integer *n_err_bnds__, \n\tdoublereal *err_bnds_norm__, doublereal *err_bnds_comp__, integer *\n\tnparams, doublereal *params, doublereal *work, integer *iwork, \n\tinteger *info)\n{\n    /* System generated locals */\n    integer a_dim1, a_offset, af_dim1, af_offset, b_dim1, b_offset, x_dim1, \n\t    x_offset, err_bnds_norm_dim1, err_bnds_norm_offset, \n\t    err_bnds_comp_dim1, err_bnds_comp_offset, i__1;\n    doublereal d__1, d__2;\n\n    /* Builtin functions */\n    double sqrt(doublereal);\n\n    /* Local variables */\n    doublereal illrcond_thresh__, unstable_thresh__, err_lbnd__;\n    integer ref_type__, j;\n    doublereal rcond_tmp__;\n    integer prec_type__;\n    extern doublereal dla_porcond__(char *, integer *, doublereal *, integer *\n\t    , doublereal *, integer *, integer *, doublereal *, integer *, \n\t    doublereal *, integer *, ftnlen);\n    doublereal cwise_wrong__;\n    extern /* Subroutine */ int dla_porfsx_extended__(integer *, char *, \n\t    integer *, integer *, doublereal *, integer *, doublereal *, \n\t    integer *, logical *, doublereal *, doublereal *, integer *, \n\t    doublereal *, integer *, doublereal *, integer *, doublereal *, \n\t    doublereal *, doublereal *, doublereal *, doublereal *, \n\t    doublereal *, doublereal *, integer *, doublereal *, doublereal *,\n\t     logical *, integer *, ftnlen);\n    char norm[1];\n    logical ignore_cwise__;\n    extern logical lsame_(char *, char *);\n    doublereal anorm;\n    logical rcequ;\n    extern doublereal dlamch_(char *);\n    extern /* Subroutine */ int xerbla_(char *, integer *), dpocon_(\n\t    char *, integer *, doublereal *, integer *, doublereal *, \n\t    doublereal *, doublereal *, integer *, integer *);\n    extern doublereal dlansy_(char *, char *, integer *, doublereal *, \n\t    integer *, doublereal *);\n    extern integer ilaprec_(char *);\n    integer ithresh, n_norms__;\n    doublereal rthresh;\n\n\n/*     -- LAPACK routine (version 3.2.1)                                 -- */\n/*     -- Contributed by James Demmel, Deaglan Halligan, Yozo Hida and -- */\n/*     -- Jason Riedy of Univ. of California Berkeley.                 -- */\n/*     -- April 2009                                                   -- */\n\n/*     -- LAPACK is a software package provided by Univ. of Tennessee, -- */\n/*     -- Univ. of California Berkeley and NAG Ltd.                    -- */\n\n/*     .. */\n/*     .. Scalar Arguments .. */\n/*     .. */\n/*     .. Array Arguments .. */\n/*     .. */\n\n/*     Purpose */\n/*     ======= */\n\n/*     DPORFSX improves the computed solution to a system of linear */\n/*     equations when the coefficient matrix is symmetric positive */\n/*     definite, and provides error bounds and backward error estimates */\n/*     for the solution.  In addition to normwise error bound, the code */\n/*     provides maximum componentwise error bound if possible.  See */\n/*     comments for ERR_BNDS_NORM and ERR_BNDS_COMP for details of the */\n/*     error bounds. */\n\n/*     The original system of linear equations may have been equilibrated */\n/*     before calling this routine, as described by arguments EQUED and S */\n/*     below. In this case, the solution and error bounds returned are */\n/*     for the original unequilibrated system. */\n\n/*     Arguments */\n/*     ========= */\n\n/*     Some optional parameters are bundled in the PARAMS array.  These */\n/*     settings determine how refinement is performed, but often the */\n/*     defaults are acceptable.  If the defaults are acceptable, users */\n/*     can pass NPARAMS = 0 which prevents the source code from accessing */\n/*     the PARAMS argument. */\n\n/*     UPLO    (input) CHARACTER*1 */\n/*       = 'U':  Upper triangle of A is stored; */\n/*       = 'L':  Lower triangle of A is stored. */\n\n/*     EQUED   (input) CHARACTER*1 */\n/*     Specifies the form of equilibration that was done to A */\n/*     before calling this routine. This is needed to compute */\n/*     the solution and error bounds correctly. */\n/*       = 'N':  No equilibration */\n/*       = 'Y':  Both row and column equilibration, i.e., A has been */\n/*               replaced by diag(S) * A * diag(S). */\n/*               The right hand side B has been changed accordingly. */\n\n/*     N       (input) INTEGER */\n/*     The order of the matrix A.  N >= 0. */\n\n/*     NRHS    (input) INTEGER */\n/*     The number of right hand sides, i.e., the number of columns */\n/*     of the matrices B and X.  NRHS >= 0. */\n\n/*     A       (input) DOUBLE PRECISION array, dimension (LDA,N) */\n/*     The symmetric matrix A.  If UPLO = 'U', the leading N-by-N */\n/*     upper triangular part of A contains the upper triangular part */\n/*     of the matrix A, and the strictly lower triangular part of A */\n/*     is not referenced.  If UPLO = 'L', the leading N-by-N lower */\n/*     triangular part of A contains the lower triangular part of */\n/*     the matrix A, and the strictly upper triangular part of A is */\n/*     not referenced. */\n\n/*     LDA     (input) INTEGER */\n/*     The leading dimension of the array A.  LDA >= max(1,N). */\n\n/*     AF      (input) DOUBLE PRECISION array, dimension (LDAF,N) */\n/*     The triangular factor U or L from the Cholesky factorization */\n/*     A = U**T*U or A = L*L**T, as computed by DPOTRF. */\n\n/*     LDAF    (input) INTEGER */\n/*     The leading dimension of the array AF.  LDAF >= max(1,N). */\n\n/*     S       (input or output) DOUBLE PRECISION array, dimension (N) */\n/*     The row scale factors for A.  If EQUED = 'Y', A is multiplied on */\n/*     the left and right by diag(S).  S is an input argument if FACT = */\n/*     'F'; otherwise, S is an output argument.  If FACT = 'F' and EQUED */\n/*     = 'Y', each element of S must be positive.  If S is output, each */\n/*     element of S is a power of the radix. If S is input, each element */\n/*     of S should be a power of the radix to ensure a reliable solution */\n/*     and error estimates. Scaling by powers of the radix does not cause */\n/*     rounding errors unless the result underflows or overflows. */\n/*     Rounding errors during scaling lead to refining with a matrix that */\n/*     is not equivalent to the input matrix, producing error estimates */\n/*     that may not be reliable. */\n\n/*     B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS) */\n/*     The right hand side matrix B. */\n\n/*     LDB     (input) INTEGER */\n/*     The leading dimension of the array B.  LDB >= max(1,N). */\n\n/*     X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS) */\n/*     On entry, the solution matrix X, as computed by DGETRS. */\n/*     On exit, the improved solution matrix X. */\n\n/*     LDX     (input) INTEGER */\n/*     The leading dimension of the array X.  LDX >= max(1,N). */\n\n/*     RCOND   (output) DOUBLE PRECISION */\n/*     Reciprocal scaled condition number.  This is an estimate of the */\n/*     reciprocal Skeel condition number of the matrix A after */\n/*     equilibration (if done).  If this is less than the machine */\n/*     precision (in particular, if it is zero), the matrix is singular */\n/*     to working precision.  Note that the error may still be small even */\n/*     if this number is very small and the matrix appears ill- */\n/*     conditioned. */\n\n/*     BERR    (output) DOUBLE PRECISION array, dimension (NRHS) */\n/*     Componentwise relative backward error.  This is the */\n/*     componentwise relative backward error of each solution vector X(j) */\n/*     (i.e., the smallest relative change in any element of A or B that */\n/*     makes X(j) an exact solution). */\n\n/*     N_ERR_BNDS (input) INTEGER */\n/*     Number of error bounds to return for each right hand side */\n/*     and each type (normwise or componentwise).  See ERR_BNDS_NORM and */\n/*     ERR_BNDS_COMP below. */\n\n/*     ERR_BNDS_NORM  (output) DOUBLE PRECISION array, dimension (NRHS, N_ERR_BNDS) */\n/*     For each right-hand side, this array contains information about */\n/*     various error bounds and condition numbers corresponding to the */\n/*     normwise relative error, which is defined as follows: */\n\n/*     Normwise relative error in the ith solution vector: */\n/*             max_j (abs(XTRUE(j,i) - X(j,i))) */\n/*            ------------------------------ */\n/*                  max_j abs(X(j,i)) */\n\n/*     The array is indexed by the type of error information as described */\n/*     below. There currently are up to three pieces of information */\n/*     returned. */\n\n/*     The first index in ERR_BNDS_NORM(i,:) corresponds to the ith */\n/*     right-hand side. */\n\n/*     The second index in ERR_BNDS_NORM(:,err) contains the following */\n/*     three fields: */\n/*     err = 1 \"Trust/don't trust\" boolean. Trust the answer if the */\n/*              reciprocal condition number is less than the threshold */\n/*              sqrt(n) * dlamch('Epsilon'). */\n\n/*     err = 2 \"Guaranteed\" error bound: The estimated forward error, */\n/*              almost certainly within a factor of 10 of the true error */\n/*              so long as the next entry is greater than the threshold */\n/*              sqrt(n) * dlamch('Epsilon'). This error bound should only */\n/*              be trusted if the previous boolean is true. */\n\n/*     err = 3  Reciprocal condition number: Estimated normwise */\n/*              reciprocal condition number.  Compared with the threshold */\n/*              sqrt(n) * dlamch('Epsilon') to determine if the error */\n/*              estimate is \"guaranteed\". These reciprocal condition */\n/*              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some */\n/*              appropriately scaled matrix Z. */\n/*              Let Z = S*A, where S scales each row by a power of the */\n/*              radix so all absolute row sums of Z are approximately 1. */\n\n/*     See Lapack Working Note 165 for further details and extra */\n/*     cautions. */\n\n/*     ERR_BNDS_COMP  (output) DOUBLE PRECISION array, dimension (NRHS, N_ERR_BNDS) */\n/*     For each right-hand side, this array contains information about */\n/*     various error bounds and condition numbers corresponding to the */\n/*     componentwise relative error, which is defined as follows: */\n\n/*     Componentwise relative error in the ith solution vector: */\n/*                    abs(XTRUE(j,i) - X(j,i)) */\n/*             max_j ---------------------- */\n/*                         abs(X(j,i)) */\n\n/*     The array is indexed by the right-hand side i (on which the */\n/*     componentwise relative error depends), and the type of error */\n/*     information as described below. There currently are up to three */\n/*     pieces of information returned for each right-hand side. If */\n/*     componentwise accuracy is not requested (PARAMS(3) = 0.0), then */\n/*     ERR_BNDS_COMP is not accessed.  If N_ERR_BNDS .LT. 3, then at most */\n/*     the first (:,N_ERR_BNDS) entries are returned. */\n\n/*     The first index in ERR_BNDS_COMP(i,:) corresponds to the ith */\n/*     right-hand side. */\n\n/*     The second index in ERR_BNDS_COMP(:,err) contains the following */\n/*     three fields: */\n/*     err = 1 \"Trust/don't trust\" boolean. Trust the answer if the */\n/*              reciprocal condition number is less than the threshold */\n/*              sqrt(n) * dlamch('Epsilon'). */\n\n/*     err = 2 \"Guaranteed\" error bound: The estimated forward error, */\n/*              almost certainly within a factor of 10 of the true error */\n/*              so long as the next entry is greater than the threshold */\n/*              sqrt(n) * dlamch('Epsilon'). This error bound should only */\n/*              be trusted if the previous boolean is true. */\n\n/*     err = 3  Reciprocal condition number: Estimated componentwise */\n/*              reciprocal condition number.  Compared with the threshold */\n/*              sqrt(n) * dlamch('Epsilon') to determine if the error */\n/*              estimate is \"guaranteed\". These reciprocal condition */\n/*              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some */\n/*              appropriately scaled matrix Z. */\n/*              Let Z = S*(A*diag(x)), where x is the solution for the */\n/*              current right-hand side and S scales each row of */\n/*              A*diag(x) by a power of the radix so all absolute row */\n/*              sums of Z are approximately 1. */\n\n/*     See Lapack Working Note 165 for further details and extra */\n/*     cautions. */\n\n/*     NPARAMS (input) INTEGER */\n/*     Specifies the number of parameters set in PARAMS.  If .LE. 0, the */\n/*     PARAMS array is never referenced and default values are used. */\n\n/*     PARAMS  (input / output) DOUBLE PRECISION array, dimension NPARAMS */\n/*     Specifies algorithm parameters.  If an entry is .LT. 0.0, then */\n/*     that entry will be filled with default value used for that */\n/*     parameter.  Only positions up to NPARAMS are accessed; defaults */\n/*     are used for higher-numbered parameters. */\n\n/*       PARAMS(LA_LINRX_ITREF_I = 1) : Whether to perform iterative */\n/*            refinement or not. */\n/*         Default: 1.0D+0 */\n/*            = 0.0 : No refinement is performed, and no error bounds are */\n/*                    computed. */\n/*            = 1.0 : Use the double-precision refinement algorithm, */\n/*                    possibly with doubled-single computations if the */\n/*                    compilation environment does not support DOUBLE */\n/*                    PRECISION. */\n/*              (other values are reserved for future use) */\n\n/*       PARAMS(LA_LINRX_ITHRESH_I = 2) : Maximum number of residual */\n/*            computations allowed for refinement. */\n/*         Default: 10 */\n/*         Aggressive: Set to 100 to permit convergence using approximate */\n/*                     factorizations or factorizations other than LU. If */\n/*                     the factorization uses a technique other than */\n/*                     Gaussian elimination, the guarantees in */\n/*                     err_bnds_norm and err_bnds_comp may no longer be */\n/*                     trustworthy. */\n\n/*       PARAMS(LA_LINRX_CWISE_I = 3) : Flag determining if the code */\n/*            will attempt to find a solution with small componentwise */\n/*            relative error in the double-precision algorithm.  Positive */\n/*            is true, 0.0 is false. */\n/*         Default: 1.0 (attempt componentwise convergence) */\n\n/*     WORK    (workspace) DOUBLE PRECISION array, dimension (4*N) */\n\n/*     IWORK   (workspace) INTEGER array, dimension (N) */\n\n/*     INFO    (output) INTEGER */\n/*       = 0:  Successful exit. The solution to every right-hand side is */\n/*         guaranteed. */\n/*       < 0:  If INFO = -i, the i-th argument had an illegal value */\n/*       > 0 and <= N:  U(INFO,INFO) is exactly zero.  The factorization */\n/*         has been completed, but the factor U is exactly singular, so */\n/*         the solution and error bounds could not be computed. RCOND = 0 */\n/*         is returned. */\n/*       = N+J: The solution corresponding to the Jth right-hand side is */\n/*         not guaranteed. The solutions corresponding to other right- */\n/*         hand sides K with K > J may not be guaranteed as well, but */\n/*         only the first such right-hand side is reported. If a small */\n/*         componentwise error is not requested (PARAMS(3) = 0.0) then */\n/*         the Jth right-hand side is the first with a normwise error */\n/*         bound that is not guaranteed (the smallest J such */\n/*         that ERR_BNDS_NORM(J,1) = 0.0). By default (PARAMS(3) = 1.0) */\n/*         the Jth right-hand side is the first with either a normwise or */\n/*         componentwise error bound that is not guaranteed (the smallest */\n/*         J such that either ERR_BNDS_NORM(J,1) = 0.0 or */\n/*         ERR_BNDS_COMP(J,1) = 0.0). See the definition of */\n/*         ERR_BNDS_NORM(:,1) and ERR_BNDS_COMP(:,1). To get information */\n/*         about all of the right-hand sides check ERR_BNDS_NORM or */\n/*         ERR_BNDS_COMP. */\n\n/*     ================================================================== */\n\n/*     .. Parameters .. */\n/*     .. */\n/*     .. Local Scalars .. */\n/*     .. */\n/*     .. External Subroutines .. */\n/*     .. */\n/*     .. Intrinsic Functions .. */\n/*     .. */\n/*     .. External Functions .. */\n/*     .. */\n/*     .. Executable Statements .. */\n\n/*     Check the input parameters. */\n\n    /* Parameter adjustments */\n    err_bnds_comp_dim1 = *nrhs;\n    err_bnds_comp_offset = 1 + err_bnds_comp_dim1;\n    err_bnds_comp__ -= err_bnds_comp_offset;\n    err_bnds_norm_dim1 = *nrhs;\n    err_bnds_norm_offset = 1 + err_bnds_norm_dim1;\n    err_bnds_norm__ -= err_bnds_norm_offset;\n    a_dim1 = *lda;\n    a_offset = 1 + a_dim1;\n    a -= a_offset;\n    af_dim1 = *ldaf;\n    af_offset = 1 + af_dim1;\n    af -= af_offset;\n    --s;\n    b_dim1 = *ldb;\n    b_offset = 1 + b_dim1;\n    b -= b_offset;\n    x_dim1 = *ldx;\n    x_offset = 1 + x_dim1;\n    x -= x_offset;\n    --berr;\n    --params;\n    --work;\n    --iwork;\n\n    /* Function Body */\n    *info = 0;\n    ref_type__ = 1;\n    if (*nparams >= 1) {\n\tif (params[1] < 0.) {\n\t    params[1] = 1.;\n\t} else {\n\t    ref_type__ = (integer) params[1];\n\t}\n    }\n\n/*     Set default parameters. */\n\n    illrcond_thresh__ = (doublereal) (*n) * dlamch_(\"Epsilon\");\n    ithresh = 10;\n    rthresh = .5;\n    unstable_thresh__ = .25;\n    ignore_cwise__ = FALSE_;\n\n    if (*nparams >= 2) {\n\tif (params[2] < 0.) {\n\t    params[2] = (doublereal) ithresh;\n\t} else {\n\t    ithresh = (integer) params[2];\n\t}\n    }\n    if (*nparams >= 3) {\n\tif (params[3] < 0.) {\n\t    if (ignore_cwise__) {\n\t\tparams[3] = 0.;\n\t    } else {\n\t\tparams[3] = 1.;\n\t    }\n\t} else {\n\t    ignore_cwise__ = params[3] == 0.;\n\t}\n    }\n    if (ref_type__ == 0 || *n_err_bnds__ == 0) {\n\tn_norms__ = 0;\n    } else if (ignore_cwise__) {\n\tn_norms__ = 1;\n    } else {\n\tn_norms__ = 2;\n    }\n\n    rcequ = lsame_(equed, \"Y\");\n\n/*     Test input parameters. */\n\n    if (! lsame_(uplo, \"U\") && ! lsame_(uplo, \"L\")) {\n\t*info = -1;\n    } else if (! rcequ && ! lsame_(equed, \"N\")) {\n\t*info = -2;\n    } else if (*n < 0) {\n\t*info = -3;\n    } else if (*nrhs < 0) {\n\t*info = -4;\n    } else if (*lda < max(1,*n)) {\n\t*info = -6;\n    } else if (*ldaf < max(1,*n)) {\n\t*info = -8;\n    } else if (*ldb < max(1,*n)) {\n\t*info = -11;\n    } else if (*ldx < max(1,*n)) {\n\t*info = -13;\n    }\n    if (*info != 0) {\n\ti__1 = -(*info);\n\txerbla_(\"DPORFSX\", &i__1);\n\treturn 0;\n    }\n\n/*     Quick return if possible. */\n\n    if (*n == 0 || *nrhs == 0) {\n\t*rcond = 1.;\n\ti__1 = *nrhs;\n\tfor (j = 1; j <= i__1; ++j) {\n\t    berr[j] = 0.;\n\t    if (*n_err_bnds__ >= 1) {\n\t\terr_bnds_norm__[j + err_bnds_norm_dim1] = 1.;\n\t\terr_bnds_comp__[j + err_bnds_comp_dim1] = 1.;\n\t    } else if (*n_err_bnds__ >= 2) {\n\t\terr_bnds_norm__[j + (err_bnds_norm_dim1 << 1)] = 0.;\n\t\terr_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] = 0.;\n\t    } else if (*n_err_bnds__ >= 3) {\n\t\terr_bnds_norm__[j + err_bnds_norm_dim1 * 3] = 1.;\n\t\terr_bnds_comp__[j + err_bnds_comp_dim1 * 3] = 1.;\n\t    }\n\t}\n\treturn 0;\n    }\n\n/*     Default to failure. */\n\n    *rcond = 0.;\n    i__1 = *nrhs;\n    for (j = 1; j <= i__1; ++j) {\n\tberr[j] = 1.;\n\tif (*n_err_bnds__ >= 1) {\n\t    err_bnds_norm__[j + err_bnds_norm_dim1] = 1.;\n\t    err_bnds_comp__[j + err_bnds_comp_dim1] = 1.;\n\t} else if (*n_err_bnds__ >= 2) {\n\t    err_bnds_norm__[j + (err_bnds_norm_dim1 << 1)] = 1.;\n\t    err_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] = 1.;\n\t} else if (*n_err_bnds__ >= 3) {\n\t    err_bnds_norm__[j + err_bnds_norm_dim1 * 3] = 0.;\n\t    err_bnds_comp__[j + err_bnds_comp_dim1 * 3] = 0.;\n\t}\n    }\n\n/*     Compute the norm of A and the reciprocal of the condition */\n/*     number of A. */\n\n    *(unsigned char *)norm = 'I';\n    anorm = dlansy_(norm, uplo, n, &a[a_offset], lda, &work[1]);\n    dpocon_(uplo, n, &af[af_offset], ldaf, &anorm, rcond, &work[1], &iwork[1], \n\t     info);\n\n/*     Perform refinement on each right-hand side */\n\n    if (ref_type__ != 0) {\n\tprec_type__ = ilaprec_(\"E\");\n\tdla_porfsx_extended__(&prec_type__, uplo, n, nrhs, &a[a_offset], lda, \n\t\t&af[af_offset], ldaf, &rcequ, &s[1], &b[b_offset], ldb, &x[\n\t\tx_offset], ldx, &berr[1], &n_norms__, &err_bnds_norm__[\n\t\terr_bnds_norm_offset], &err_bnds_comp__[err_bnds_comp_offset],\n\t\t &work[*n + 1], &work[1], &work[(*n << 1) + 1], &work[1], \n\t\trcond, &ithresh, &rthresh, &unstable_thresh__, &\n\t\tignore_cwise__, info, (ftnlen)1);\n    }\n/* Computing MAX */\n    d__1 = 10., d__2 = sqrt((doublereal) (*n));\n    err_lbnd__ = max(d__1,d__2) * dlamch_(\"Epsilon\");\n    if (*n_err_bnds__ >= 1 && n_norms__ >= 1) {\n\n/*     Compute scaled normwise condition number cond(A*C). */\n\n\tif (rcequ) {\n\t    rcond_tmp__ = dla_porcond__(uplo, n, &a[a_offset], lda, &af[\n\t\t    af_offset], ldaf, &c_n1, &s[1], info, &work[1], &iwork[1],\n\t\t     (ftnlen)1);\n\t} else {\n\t    rcond_tmp__ = dla_porcond__(uplo, n, &a[a_offset], lda, &af[\n\t\t    af_offset], ldaf, &c__0, &s[1], info, &work[1], &iwork[1],\n\t\t     (ftnlen)1);\n\t}\n\ti__1 = *nrhs;\n\tfor (j = 1; j <= i__1; ++j) {\n\n/*     Cap the error at 1.0. */\n\n\t    if (*n_err_bnds__ >= 2 && err_bnds_norm__[j + (err_bnds_norm_dim1 \n\t\t    << 1)] > 1.) {\n\t\terr_bnds_norm__[j + (err_bnds_norm_dim1 << 1)] = 1.;\n\t    }\n\n/*     Threshold the error (see LAWN). */\n\n\t    if (rcond_tmp__ < illrcond_thresh__) {\n\t\terr_bnds_norm__[j + (err_bnds_norm_dim1 << 1)] = 1.;\n\t\terr_bnds_norm__[j + err_bnds_norm_dim1] = 0.;\n\t\tif (*info <= *n) {\n\t\t    *info = *n + j;\n\t\t}\n\t    } else if (err_bnds_norm__[j + (err_bnds_norm_dim1 << 1)] < \n\t\t    err_lbnd__) {\n\t\terr_bnds_norm__[j + (err_bnds_norm_dim1 << 1)] = err_lbnd__;\n\t\terr_bnds_norm__[j + err_bnds_norm_dim1] = 1.;\n\t    }\n\n/*     Save the condition number. */\n\n\t    if (*n_err_bnds__ >= 3) {\n\t\terr_bnds_norm__[j + err_bnds_norm_dim1 * 3] = rcond_tmp__;\n\t    }\n\t}\n    }\n    if (*n_err_bnds__ >= 1 && n_norms__ >= 2) {\n\n/*     Compute componentwise condition number cond(A*diag(Y(:,J))) for */\n/*     each right-hand side using the current solution as an estimate of */\n/*     the true solution.  If the componentwise error estimate is too */\n/*     large, then the solution is a lousy estimate of truth and the */\n/*     estimated RCOND may be too optimistic.  To avoid misleading users, */\n/*     the inverse condition number is set to 0.0 when the estimated */\n/*     cwise error is at least CWISE_WRONG. */\n\n\tcwise_wrong__ = sqrt(dlamch_(\"Epsilon\"));\n\ti__1 = *nrhs;\n\tfor (j = 1; j <= i__1; ++j) {\n\t    if (err_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] < \n\t\t    cwise_wrong__) {\n\t\trcond_tmp__ = dla_porcond__(uplo, n, &a[a_offset], lda, &af[\n\t\t\taf_offset], ldaf, &c__1, &x[j * x_dim1 + 1], info, &\n\t\t\twork[1], &iwork[1], (ftnlen)1);\n\t    } else {\n\t\trcond_tmp__ = 0.;\n\t    }\n\n/*     Cap the error at 1.0. */\n\n\t    if (*n_err_bnds__ >= 2 && err_bnds_comp__[j + (err_bnds_comp_dim1 \n\t\t    << 1)] > 1.) {\n\t\terr_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] = 1.;\n\t    }\n\n/*     Threshold the error (see LAWN). */\n\n\t    if (rcond_tmp__ < illrcond_thresh__) {\n\t\terr_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] = 1.;\n\t\terr_bnds_comp__[j + err_bnds_comp_dim1] = 0.;\n\t\tif (params[3] == 1. && *info < *n + j) {\n\t\t    *info = *n + j;\n\t\t}\n\t    } else if (err_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] < \n\t\t    err_lbnd__) {\n\t\terr_bnds_comp__[j + (err_bnds_comp_dim1 << 1)] = err_lbnd__;\n\t\terr_bnds_comp__[j + err_bnds_comp_dim1] = 1.;\n\t    }\n\n/*     Save the condition number. */\n\n\t    if (*n_err_bnds__ >= 3) {\n\t\terr_bnds_comp__[j + err_bnds_comp_dim1 * 3] = rcond_tmp__;\n\t    }\n\t}\n    }\n\n    return 0;\n\n/*     End of DPORFSX */\n\n} /* dporfsx_ */\n"
}