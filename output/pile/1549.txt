{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains FAQ."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'FAQ', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1549",
    "text": "Q:\n\nHow can you quickly check if you package.json file has modules that could be updated to newer versions?\n\nHow can you quickly check if you package.json file has modules that could be updated to newer versions?\nFor example, a quick way to check if either express or nodemailer has an available update?\n{\n    \"name\": \"some_module_name\"\n  , \"description\": \"\"\n  , \"version\": \"0.0.3\"\n  , \"dependencies\":  {\n           \"express\": \"3.1\"\n         , \"nodemailer\" : \"0.4.0\"\n    }\n}\n\nI read over the FAQs, but didn't see anything:\nhttps://npmjs.org/doc/faq.html\nThanks.\n\nA:\n\nYes there is an option :\nnpm outdated\n\nThis will list modules, with available updates. It supports syntax for specifying the module name.\nAccording to the Documentation, the syntax is \nnpm outdated [<name> [<name> ...]]\n\nThis gives you to specify the module name you wish to check exclusively, like\n$ npm outdated mongoose\n\nNote\nTo use this properly, you'll have to add a version number of the target module(s) with range greater than or greater than or equal. You can check node-semver, which is integrated into npm to check the syntax. \nExample\n{\n    \"dependencies\": {\n        \"express\": \"3.2.0\",\n        \"mongoose\": \">= 3.5.6\",\n    },\n}\n\nWill give the following result ( since today the latest mongoose version is 3.6.9 )\n$ npm outdated\n...\nmongoose@3.6.9 node_modules/mongoose current=3.6.7\n$\n\nWhile if you place\n{\n    \"dependencies\": {\n        \"express\": \">= 3.2.0\",\n        \"mongoose\": \">= 3.5.6\",\n    },\n}\n\nThe result will be :\n$ npm outdated\n...\nmongoose@3.6.9 node_modules/mongoose current=3.6.7\nexpress@3.2.3 node_modules/express current=3.2.0\n$\n\nA:\n\nthere's a service like travis that checks it automatically:\nhttps://gemnasium.com\n\n"
}