{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6201",
    "text": "Q:\n\nSkipping the BufferedReader readLine() method in java\n\nIs there a easy way to skip the readLine() method in java if it takes longer than, say, 2 seconds?\nHere's the context in which I'm asking this question:\npublic void run()\n{\n    boolean looping = true;\n    while(looping) {\n        for(int x = 0; x<clientList.size(); x++) {\n            try {\n                Comm s = clientList.get(x);\n                String str = s.recieve();\n                // code that does something based on the string in the line above\n            }\n            // other stuff like catch methods\n        }\n    }\n}\n\nComm is a class I wrote, and the receive method, which contains a BufferedReader called \"in\", is this:\npublic String recieve()\n{\n    try { if(active) return in.readLine(); }\n    catch(Exception e) { System.out.println(\"Comm Error 2: \"+e); }\n    return \"\";\n}\n\nI've noticed that the program stops and waits for the input stream to have something to read before continuing. Which is bad, because I need the program to keep looping (as it loops, it goes to all the other clients and asks for input). Is there a way to skip the readLine() process if there's nothing to read?\nI'm also pretty sure that I'm not explaining this well, so please ask me questions if I'm being confusing.\n\nA:\n\nThe timeout alone is not a good idea. Use one thread per client (or use asynchronous I/O, but unless you're building some high performance application, that's unnecessarily complicated).\nAs for the timeout itself, it must be done on the stream that's encapsulated. See for example How can I set a timeout against a BufferedReader based upon a URLConnection in Java?\n\n"
}