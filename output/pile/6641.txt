{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6641",
    "text": "Q:\n\ncall functions on events NodeJs\n\nactually i'm trying to call the function demandConnexion after an event, but it is working for me , it telles me that \"this.demandeConnexion is not a function\" . how can i get it to work ? help , this is the code  : \nServeur.prototype.demandConnexion = function(idZEP) {\n\n     if (this.ZP.createZE(idZEP))\n\n         {\n\n         console.log(' ==> socket : demande de creation ZE pour '+idZEP +' accepte');\n\n         }\n\n     else\n\n         {\n\n         console.log(' ==> socket : demande de creation ZE pour '+idZEP +' refuse');\n\n         }\n};\n\nServeur.prototype.traitementSurConnection = function(socket) {\n\n    // console.log('connexion');\n\n    console.log(' ==> socket connexion');\n\n    // traitement de l'evenement DEMANDE DE CONNEXION D'UNE ZE\n\n    socket.on('connection', (function(idZEP) { this.demandConnexion(idZEP)\n\n        console.log('good')\n\n}))\n\nA:\n\nIt's because when the callback is called \"this\" isn't your \"Serveur\" instance. In your case try something like\n\nvar that = this;\r\nsocket.on('connection', (function(idZEP) { \r\n    that.demandConnexion(idZEP)\r\n    console.log('good')\r\n}))\n\nor \n\nsocket.on('connection', this.demandConnexion.bind(this));\n\nAn other solution (the best in my opinion) would be to use the arrow functions to keep the same scope as the closure\nsocket.on('connection', ()=>{\n  //here this refers to your Serveur (the enclosing scope)\n});\n\n"
}