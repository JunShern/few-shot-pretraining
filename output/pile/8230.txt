{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8230",
    "text": "Q:\n\n\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 python(\u043a\u0443\u0440\u0441\u044b)\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u044c, \u0432 \u0447\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0430 \u0442\u043e\u0447\u043d\u0435\u0435 \u0433\u0434\u0435, \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \"\u0432\u043e\u043f\u0440\u043e\u0441\u044b\".\n   def __mul__(self, alpha):\n        if isinstance(alpha, Matrix):\n            result = []\n            numbers = []\n            for i in range(len(self.lists)):\n                for j in range(len(self.lists[0])):\n                    numbers.append(int(alpha * self.lists[i][j]))\n                    if len(numbers) == len(self.lists[0]):\n                        result.append(numbers)\n                        numbers = []\n        else:\n            result = []\n            numbers = []\n            for i in range(len(self.lists)):\n                for j in range(len(self.lists[0])):\n                    numbers.append(int(self.lists[i][j] * alpha))\n                    if len(numbers) == len(self.lists[0]):\n                        result.append(numbers)\n                        numbers = []\n        return Matrix(result)\n\n    __rmul__ = __mul__\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 - \u0432\u0435\u0440\u043d\u043e\u0435, \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0435\u0440\u043d\u044b\u0439.\n\u041d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0440\u0443\u0433\u0430\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0442\u0438\u043f\u0430 \"Runtime error\"\n\u041e\u0442\u0441\u044e\u0434\u0430 \u0432\u043e\u043f\u0440\u043e\u0441, \u0433\u0434\u0435 \u044f \u043d\u0435\u0432\u0435\u0440\u043d\u043e \u0438\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0435\u0442\u043e\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043a\u043b\u0430\u0441\u0441...\n\u041f\u043e\u043b\u043d\u044b\u0439 \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0438\u0436\u0435:\n\u041a\u043b\u0430\u0441\u0441:\nfrom sys import stdin\nfrom copy import deepcopy\n\nclass MatrixError(BaseException):\n    def __init__(self, r1, other):\n        self.matrix1 = r1\n        self.matrix2 = other\n\nclass Matrix:\n    def __init__(self, lists):\n        self.lists = deepcopy(lists)\n\n    def __str__(self):\n        strRep = \"\"\n        amount = 0\n        for lists in self.lists:\n            if amount != 0:\n                strRep += \"\\n\"\n            new_str = \"\\t\".join(str(elem) for elem in lists)\n            strRep += new_str\n            amount += 1\n        return strRep\n\n    def size(self):\n        return len(self.lists), len(self.lists[0])\n\n    def __add__(self, other):\n        if len(self.lists) == len(other.lists):\n            lenght = len(self.lists[0])\n            for row in self.lists:\n                if len(row) != lenght:\n                    raise MatrixError(self, other)\n            for row2 in other.lists:\n                if len(row2) != lenght:\n                    raise MatrixError(self, other)\n            result = []\n            numbers = []\n            for i in range(len(self.lists)):\n                for j in range(len(self.lists[0])):\n                    summa = other.lists[i][j] + self.lists[i][j]\n                    numbers.append(summa)\n                    if len(numbers) == len(self.lists[0]):\n                        result.append(numbers)\n                        numbers = []\n            return Matrix(result)\n        else:\n            raise MatrixError(self, other)\n\n    def __mul__(self, alpha):\n        if isinstance(alpha, Matrix):\n            result = []\n            numbers = []\n            for i in range(len(self.lists)):\n                for j in range(len(self.lists[0])):\n                    numbers.append(int(alpha * self.lists[i][j]))\n                    if len(numbers) == len(self.lists[0]):\n                        result.append(numbers)\n                        numbers = []\n        else:\n            result = []\n            numbers = []\n            for i in range(len(self.lists)):\n                for j in range(len(self.lists[0])):\n                    numbers.append(int(self.lists[i][j] * alpha))\n                    if len(numbers) == len(self.lists[0]):\n                        result.append(numbers)\n                        numbers = []\n        return Matrix(result)\n\n    __rmul__ = __mul__\n\n    def transpose(self):\n        t_matrix = list(zip(*self.lists))\n        self.lists = t_matrix\n        return Matrix(t_matrix)\n\n    def transposed(self):\n        t_matrix = list(zip(*self.lists))\n        return Matrix(t_matrix)\n\n# Task 2 check 3\nm = Matrix([[1, 1, 0], [0, 2, 10], [10, 15, 30]])\nalpha = 15\nprint(m * alpha)\nprint(alpha * m)\n#exec(stdin.read())\n\n\u0412 \u043a\u043e\u043d\u0446\u0435 \u043a\u0430\u043a \u0440\u0430\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430.\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0435\u0440\u043d\u044b\u0439, \u043d\u043e \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 - \u043d\u0435\u0442.\n\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f:\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 Matrix. \u041e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c:\n\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u043e\u0432. \n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0441\u043f\u0438\u0441\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0443\u0441\u0442\u044b \u0438 \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440. \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u043e\u0432, \u0442. \u0435. \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u0432, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0430 \u0441\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e.\n\u041c\u0435\u0442\u043e\u0434 str, \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044f\u0449\u0438\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u0438, \u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430\u043c\u0438 \u0441\u0442\u0440\u043e\u043a. \u041f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u0438 \u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041c\u0435\u0442\u043e\u0434 size \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u0440\u0442\u0435\u0436 \u0432\u0438\u0434\u0430 (\u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a, \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432).\nadd, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u0432\u0442\u043e\u0440\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0442\u043e\u0433\u043e \u0436\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 \u0441\u0443\u043c\u043c\u0443 \u043c\u0430\u0442\u0440\u0438\u0446.\nmul, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u0447\u0438\u0441\u043b\u043e \u0442\u0438\u043f\u0430 int \u0438\u043b\u0438 float \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0443, \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u0441\u043a\u0430\u043b\u044f\u0440.\nrmul, \u0434\u0435\u043b\u0430\u044e\u0449\u0438\u0439 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 mul. \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043f\u0440\u0430\u0432\u0430. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u043a\u043e\u0434\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c rmul = mul.\n\u0418\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u044f:\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0437\u043e\u0432\u0435\u0442\u0441\u044f mul: Matrix([[0, 1], [1, 0]) * 10.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0437\u043e\u0432\u0435\u0442\u0441\u044f rmul (\u0442\u0430\u043a \u043a\u0430\u043a \u0443 int \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d mul \u0434\u043b\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441\u043f\u0440\u0430\u0432\u0430): 10 * Matrix([[0, 1], [1, 0]).\n\u0420\u0430\u0437\u0443\u043c\u0435\u0435\u0442\u0441\u044f, \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043c\u0435\u043d\u044f\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0441 MatrixError, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 self \u043f\u043e\u043b\u044f matrix1 \u0438 matrix2 \u2014 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\u0412 \u043a\u043b\u0430\u0441\u0441 Matrix \u0432\u043d\u0435\u0441\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:\n\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 add \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0441\u043b\u043e\u0436\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0431\u044b\u043b\u043e \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 MatrixError \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b matrix1 \u043f\u043e\u043b\u0435 MatrixError \u0441\u0442\u0430\u043b\u043e \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c add (\u043f\u0440\u043e\u0441\u0442\u043e self), \u0430 matrix2 \u2014 \u0432\u0442\u043e\u0440\u044b\u043c (\u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u043d\u0434 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f).\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 transpose, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0443\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Matrix)\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 transposed, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 Matrix \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u044f \u043f\u043e\u0442\u0435\u0440\u044f\u043d.\n\nA:\n\n\u042f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u043b \u0438 \u0447\u0443\u0442\u043a\u0430 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u043b \u0432\u0430\u0448 \u043a\u043e\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 add& \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0438\u043c\nif isinstance(other, Matrix) and self.size() == other.size():\n\n\u0432\u0435\u0441\u044c \u043a\u043e\u0434\nclass Matrix:\n    def __init__(self, lists):\n        self.lists = deepcopy(lists)\n\n    def __str__(self):\n        return '\\n'.join(['\\t'.join(map(str, row)) for row in self.lists])\n\n    def size(self):\n        return len(self.lists), len(self.lists[0])\n\n    def __mul__(self, alpha):\n        lst = [[ alpha * el for el in row] for row in self.lists]\n        return Matrix(lst)\n\n    __rmul__ = __mul__\n\n    def transpose(self):\n        self.lists = list(zip(*self.lists))\n        return self\n\n    @staticmethod\n    def transposed(self):\n        t_matrix = list(zip(*self.lists))\n        return Matrix(t_matrix)\n\n    def __add__(self, other):\n        if isinstance(other, Matrix) and self.size() == other.size():\n            return Matrix([[a+b for a,b in zip(x,y)] for x,y in zip(self.lists, other.lists)])\n        else:\n            raise MatrixError(self, other)\n\n"
}