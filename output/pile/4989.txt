{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['2', '3', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '9', '9', '9', '8', '1', '2', '3', '3', '4', '5', '6', '6', '6', '1', '7', '7', '8', '9', '5', '1', '5']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4989",
    "text": "      INCLUDE 'VICMAIN_FOR'\n      SUBROUTINE MAIN44\nC     PROGRAM QPLOT2\nC     10 JUL 95   ...CRS (CRI) MST S/W CONVERSION (VICAR PORTING)\nC     22 AUG 85   ...JHR...    CONVERTED TO VICAR2, RENAMED QPLOT2\nC     22 APR 82   ...JHR...    INITIAL RELEASE\nC      E,QPLOT2,IN,*,,PARAMS\nC     THIS PROGRAM PLOTS LINES OF DN VS RELATIVE SAMPLE NUMBER.\nC     A MAXIMUM OF 10 LINES MAY BE PLOTTED ON THE GRAPH\nC     A MAXIMUM OF 10 DATA SETS MAY BE USED\nC     ANY LINE DIRECTION MAY BE SPECIFIED\nC     IF THE LINE DIRECTION IS NOT HORIZONTAL OR VERTICAL\nC     THE OUTPUT SAMPLE POINTS ARE SPACED THE SAME AS THE X AND Y\nC     AXES, I.E. IF THE LINE DIRECTION IS 45 DEGREES THE NUMBER OF\nC     OUTPUT SAMPLES WILL BE THE SQUARE ROOT OF 2 TIMES THE NUMBER\nC     OF INPUT SAMPLES\nC\nC      * PROCESS IN,SL,SS,EL,ES     SPECIFIES THE INPUT NUMBER,\nC          STARTING LINE, STARTING SAMPLE, ENDING LINE, AND\nC          ENDING SAMPLE.\nC\nC\n\timplicit none\n      EXTERNAL EQUIV\n      COMMON/C1/ SIZE,displace,RDS,XMIN,XMAX,YMIN,YMAX\n     &          ,XSCLMN,XSCLMX,YSCLMN,YSCLMX,XSCLDT\n     &          ,YSCLDT,XLNGTH,YLNGTH,FORMAT,NORM,NCHAN\n     &          ,xsclset,ysclset\n      COMMON/C2/ SL,SS,EL,ES,IN,UNIT,ILINE,NLINES\n     &          ,NLI,NSI,NSCHAN,GTYPE,XPAGE,LB,LABTOP\n      common/files/filename\n      common/commonheader/headermsg,nheadermsg,iiline,i2line\n\n      \tinteger*4    iiline,i2line,nheadermsg(220)  !! index into header strings\n      \tINTEGER*4 IN(10),SL(10),SS(10),EL(10),ES(10),UNIT(10)\n      \tINTEGER*4 GTYPE,TTLTOP,NLI(10),NSI(10),NBI(10)\n\tinteger*4 STAT,IPARM(256),TICS\n\tinteger*4 i,ii,j,jj,n,icount,idef,iline,ind,isize,psize\n\tinteger*4 labtop,lcheck,lx,ly,lb,ni,nlines,np,nschan,ntest\n\tinteger*4 ntics,ntitle,ntitx,ntity,nx,ny,nchan,naline\n\tinteger*4 plotwid,plotht,ntbl,nplotgpi,nplotout\n\tinteger*4 nplotgpi2,nploteps,ntmptbl,charsize,charsteps\n        integer*4 pttype(20),lntype(20),ptcolorl(20)\n\n      \tREAL*4 RPARM(256),XAXIS(4),YAXIS(4)\n      \tREAL*4 XMAX(10),XMIN(10),YMAX(10),YMIN(10)\n      \tREAL*4 XSCLMN,XSCLMX,YSCLMN,YSCLMX,XLNGTH,YLNGTH\n\treal*4 displace,rds,size,xpage,xscldt,yscldt\n\tlogical*4 XVPTST, NORM, xsclset, ysclset, epsplot, nolabel\n        character*1 LPARM(1024)\n\tcharacter*4 FORMAT(10),aline\n        character*8 plotfmt\n        character*24 tbl,tmptbl\n\tcharacter*30 alinenum\n\n      \tCHARACTER*63 XTTL,YTTL,TTL,CBUF,XTITLE,YTITLE,TITLE\n      \tcharacter*63 msg,plotgpi,plotgpi2,ploteps\n      \tcharacter*56 headermsg(220) !! Labels * (lines per label+2) \n\tCHARACTER*63 plotout\n\tcharacter*120 filename(10)\nc\n        character*8 ptcolor(20),lncolor(20)\n\tcharacter*4 gpi/'.gpi'/,eps/'.eps'/,asc/'.asc'/\nc\n        character*1 num(5)\n\n        character bash\nc\n        data num/'1','2','3','4','5'/\n        data tmptbl/'tmptbl.'/\n\tdata aline/'line'/\nC\n        data pttype/ 5, 9, 7,13,11, 1, 2, 3, 5, 9, 7,13,11, 1, 2, 3, 5, 9, 7,13/\n        data lntype/ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1/\n        data ptcolor/'green','purple','magenta','blue','brown',\n     1 'red','cyan','orange','green','purple',\n     2 'magenta','blue','brown','red','cyan',\n     3 'orange','green','purple','magenta','blue'/\n        data ptcolorl/5,6,7,4,5, 3,4,6,5,6, 7,4,5,3,4, 6,5,6,7,4/\n        data lncolor/'beige','red','green','cyan','purple',\n     1 'blue','orange','magenta','beige','red',\n     2 'green','cyan','purple','blue','orange',\n     3 'magenta','beige','red','green','cyan'/\nc\n      call xvmessage('qplot2 version 2015-08-19',' ')\n      bash=achar(92)\nC\nC   SET DEFAULTS AND INITIALIZE\nc\ttbl='tmptbl.x'\nc\tntbl=index(tbl,'   ') - 1\n      YTITLE = 'DN VALUE'\n      XTITLE = 'RELATIVE SAMPLE NUMBER'\n      TITLE  = 'IPL LINE PLOT'\nC        'PLOTNAME'\n\tepsplot=.false.\n        nplotgpi = 0\n        nplotgpi2 = 0\n        nplotout = 0\n\tnploteps = 0\n\tntbl = 0\n\n        epsplot = .false.\n        CALL XVPARM ('PLOTFMT',plotfmt,icount,idef,1)\n            if (plotfmt .eq. 'EPS' .or. plotfmt .eq. 'eps') epsplot = .true.\n\n\n      PLOTOUT= 'qplot.eps'\n      nplotout=index(plotout,'   ') - 1\n      plotgpi= 'qplot.gpi'\n      nplotgpi=index(plotgpi,'   ') - 1\n      plotgpi2= 'qplot.eps.gpi'\n      nplotgpi2=index(plotgpi2,'   ') - 1\n      tbl='qplot.asc'\n      ntbl = index(tbl,'  ') - 1\n      CALL XVPARM('PLOTOUT',cbuf,ICOUNT,IDEF,1)\n        IF (IDEF .EQ. 0) THEN\n            if (cbuf .eq. \"YES\" .or. cbuf .eq.\"yes\") then\nc               epsplot = .true.\n                plotout='qplot'\n                nplotout=index(plotout,'   ') - 1\n                plotgpi=plotout(1:nplotout)//gpi\n                nplotgpi=index(plotgpi,'  ') - 1\n                plotgpi2=plotout(1:nplotout)//eps//gpi\n                nplotgpi2=index(plotgpi2,'  ') - 1\n\t\tploteps=plotout(1:nplotout)//eps\n                nploteps=index(ploteps,'  ') - 1\n                tbl = plotout(1:nplotout)//asc\n                ntbl = index(tbl,'  ') - 1\n\t        tmptbl = tbl(1:ntbl) \n\nc               Plotout and nplotout from above\n            elseif (cbuf .eq. \"NONE\" .or. cbuf .eq.\"none\") then\nc               epsplot = .false.\n               plotgpi='qplot.gpi'\n               nplotgpi=index(plotgpi,'  ') - 1\n            else\n               plotout = CBUF\n               nplotout=index(plotout,'   ') - 1\n               plotgpi=plotout(1:nplotout)//gpi\n               nplotgpi=index(plotgpi,'  ') - 1\n               plotgpi2=plotout(1:nplotout)//eps//gpi\n               nplotgpi2=index(plotgpi2,'  ') - 1\n\t       ploteps=plotout(1:nplotout)//eps\n\t       nploteps=index(ploteps,'  ') - 1\n                tbl = plotout(1:nplotout)//asc\n                ntbl = index(tbl,'  ') - 1\n\t\ttmptbl = tbl(1:ntbl)\nc               epsplot = .true.\n            endif\n      ELSE\nc            epsplot = .false.\n            plotgpi='qplot.gpi'\n            nplotgpi=index(plotgpi,'  ') - 1\n\t    tbl = plotout(1:nplotout)//asc\n            ntbl = index(tbl,'  ') - 1\n      END IF\n\n      GTYPE=0\t\t\t\t!graph type: 1=PROCESS 2=SPROCESS\n      NCHAN=1\t\t\t\t!number of channels (bands in MSS data)\n\t\t\t\t\t! 5 bands\n      SIZE=.10\n\tisize = 10\t\t!gnuplot file\n\tpsize = 16\t\t!eps file\n      displace=0.\n      RDS=0.\n      NTITX=22\n      NTITY=8\n      NTITLE=13\n      NORM=.FALSE.\n\tnolabel=.false.\t!Put vicar labels on graph\n      TICS=1\t\t\t!set default to tics\n      LABTOP=1\n      TTLTOP=1\n      XLNGTH=9.0\n      YLNGTH=7.0\n      XSCLMN=1.\n      XSCLMX=1.\n      YSCLMN=0.\n      YSCLMX=0.\n\txsclset = .false.\n\tysclset = .false.\n      TTL='IPL LINE PLOT'\n      XTTL='RELATIVE SAMPLE NUMBER'\n      YTTL='DN VALUE'\n      DO 5 J=1,10\n        XMIN(J)=0.\n        XMAX(J)=0.\n        YMIN(J)=0.\n        YMAX(J)=255.\n    5 CONTINUE\n      XPAGE=0.5\n      iiline = 1\n      i2line = 0\nC\nC        OPEN INPUT DATA SETS\nC\n      CALL XVP('INP',LPARM,NI)  \t\t!max = 10\n      DO 10 I=1,NI\n         CALL XVUNIT(UNIT(I),'INP',I,STAT,' ')\n         CALL XVOPEN(UNIT(I),STAT,'U_FORMAT','REAL',' ')\n         CALL XVGET(UNIT(I),STAT,'NL',NLI(I),'NS',NSI(I),\n     &           'FORMAT',FORMAT(I),'NB',NBI(I),' ')\nc         IF (FORMAT(I) .EQ. 'HALF') HALF(I)=1\nc\tprint *, 'Number of bands = ',nbi(i)\n\tif (nbi(i) .gt. 1) then \n\t    call xvmessage(\"??E - Multiband images not supported\",\" \")\n\t    call xvmessage(\"      Convert to MSS format with TRAN\",\" \")\n\t    call abend\n\tendif\n   10 CONTINUE\nc\n      CALL XVP('INP',FILENAME,ICOUNT)   !INPUT FILENAMES\nC\nC        *** PROCESS PARAMETERS ***\nC\nC  'NCHAN'\n      CALL XVPARM('NCHAN',NCHAN,ICOUNT,IDEF,1)\n      NSCHAN=NSI(1)/NCHAN\nc\tprint *,\"nchan = \",nchan\nC  'PROCESS' - profile plot for\n      CALL XVPARM('PROCESS',IPARM,ICOUNT,IDEF,50)\nc   5 numbers, DataSetNum   SL,SS,EL,ES    \n      IF (ICOUNT .NE. 0) THEN\n         GTYPE=1\n         NLINES=ICOUNT/5\n         IF (5*NLINES .NE. ICOUNT) THEN\n            CALL XVMESSAGE('??E - Invalid count for parameter \"PROCESS\"',' ')\n            CALL ABEND\n         END IF\n         DO I=1,NLINES\n            IN(I)=IPARM(5*(I-1)+1)\n            SL(I)=IPARM(5*(I-1)+2)\n            SS(I)=IPARM(5*(I-1)+3)\n            EL(I)=IPARM(5*(I-1)+4)\n            ES(I)=IPARM(5*(I-1)+5)\n            IF (IN(I) .LT. 1 .OR. IN(I) .GT. NI) THEN\n                call xvmessage ('??E - Invalid input number specified',' ')\n\t\tcall abend\n            ENDIF\n            IF (SL(I) .LT. 1) CALL MABEND('??E - invalid starting line')\n            IF (SS(I) .LT. 1) CALL MABEND('??E - Invalid starting sample')\n            IF (EL(I) .GT. NLI(IN(I))) CALL MABEND('??E - invalid ending line')\n            IF (ES(I) .GT. NSI(IN(I)))CALL MABEND('??E - invalid ending sample')\n\t    IF (SL(I) .EQ. EL(I) .AND. SS(I) .EQ. ES(I)) then\n       \t       call mabend('??E - null line segment specified')\n            endif\n            if (format(IN(I)) .EQ. 'HALF') YMAX(I)=32767\n\t    if (format(IN(i)) .EQ. 'FULL') YMAX(i)=65536\n            if (format(IN(i)) .EQ. 'REAL') YMAX(i)=65536.\n         END DO\n      END IF\nC  'SPROCESS' - Spectral Plots\n      CALL XVPARM('SPROCESS',IPARM,ICOUNT,IDEF,20)\nc\tprint *,\"sprocess icount = \",icount,\" idef = \",idef\n      IF (ICOUNT .NE. 0) THEN\n         IF (GTYPE .NE. 0) THEN\n            CALL XVMESSAGE\n     &        ('??E - Cannot specify both PROCESS and SPROCESS',' ')\n            CALL ABEND\n         END IF\n         IF (NI .NE. 1) THEN\n            CALL XVMESSAGE\n     &         ('??E - Spectral plots require 1 input in MSS format',' ')\n            CALL ABEND\n         END IF\n         IF (NCHAN .EQ. 1) THEN\n            CALL XVMESSAGE('??E - Must specify nchan for spectral plots',' ')\n            CALL ABEND\n         END IF\n         GTYPE=2\n         NLINES=ICOUNT/2\n         IF (2*NLINES .NE. ICOUNT) THEN\n            CALL XVMESSAGE('??E - invalid count for parameter \"SPROCESS\"',' ')\n            CALL ABEND\n         END IF\n         DO I=1,NLINES\n            IN(I)=1\n            SL(I)=IPARM(2*(I-1)+1)\n            SS(I)=IPARM(2*(I-1)+2)\nc\tprint *, \"sl,ss = \",sl(i),ss(i)\n         END DO\n\tTITLE = 'IPL SPECTRAL PLOT' \nc        NTITLE=17 - change to automatically compute string length if TITLE were to change\n\tntitle = index(title,'  ') - 1\n\tXTITLE = 'CHANNEL NUMBER'\nc         NTITX=14\n\tntitx = index(xtitle,'  ') - 1\nc         IF (FORMAT(1) .EQ. 'HALF') YMAX(1)=32767\n\n      END IF\t!IF (ICOUNT .NE. 0)\nC  'LABELSIZ'\n      CALL XVPARM('LABELSIZ',ISIZE,ICOUNT,IDEF,1)\t!font in points\nc\tprint *, 'size = ',isize\t\nC  'LOLABEL'\n      IF (XVPTST('LOLABEL')) LABTOP=0\nc  'Nolabel'\n\tif (XVPTST('NOLABEL')) nolabel=.true.\nC  'TICS'\n      IF (XVPTST('NOTICS')) TICS=0\nC  'DISPLACEMENT'\n      CALL XVPARM('DISPLACE',displace,ICOUNT,IDEF,1)\n\n        plotwid =  648  !640 @72dpi = 8.888.. inches    9 inch = 648\n        plotht  =  504  !480 @72dpi = 6.666.. inches    7 inch = 504\nC  'XLENGTH'\n      CALL XVPARM('XLENGTH',XLNGTH,ICOUNT,IDEF,1)\nc\tif idef = 1 then default used\n\tif (idef.eq.0) then\n\t\tplotwid = 72 * xlngth \n\tendif\nC  'YLENGTH'\n      CALL XVPARM('YLENGTH',YLNGTH,ICOUNT,IDEF,1)\n        if (idef.eq.0) then\n                plotht = 72 * ylngth\n        endif\n\nC  'XSCALE'\n      CALL XVPARM('XSCALE',RPARM,ICOUNT,IDEF,2)\n      IF(ICOUNT .EQ. 2) THEN\n         XSCLMN=RPARM(1)\n         XSCLMX=RPARM(2)\n\t xsclset = .true.\n      ENDIF\nC  'YSCALE'\n      CALL XVPARM('YSCALE',RPARM,ICOUNT,IDEF,2)\n      IF(ICOUNT .EQ. 2) THEN\n         YSCLMN=RPARM(1)\n         YSCLMX=RPARM(2)\n\t ysclset = .true.\n      ENDIF\nC  'XVALUES'\n      CALL XVPARM('XVALUES',RPARM,ICOUNT,IDEF,20)\n      IF(ICOUNT .GE. 2) THEN\n         N=ICOUNT/2\n         IF (2*N.NE.ICOUNT) THEN\n            CALL XVMESSAGE('??E - invalid count for parameter \"XVALUES\"',' ')\n            CALL ABEND\n         END IF\n         DO I=1,N\n            XMIN(I)=RPARM(2*(I-1)+1)\n            XMAX(I)=RPARM(2*(I-1)+2)\n         END DO\n      ENDIF\nC  'YVALUES'\n      CALL XVPARM('YVALUES',RPARM,ICOUNT,IDEF,20)\n      IF(ICOUNT .GE. 2) THEN\n         N=ICOUNT/2\n         IF (2*N .NE. ICOUNT) THEN\n            CALL XVMESSAGE('??E - Invalid count for parameter \"YVALUES\"',' ')\n            CALL ABEND\n         END IF\n         DO I=1,N\n            YMIN(I)=RPARM(2*(I-1)+1)\n            YMAX(I)=RPARM(2*(I-1)+2)\n         END DO\n      ENDIF\nC  'LOTITLE'\n      IF (XVPTST('LOTITLE')) TTLTOP=0\nC  'NORM'\n      NORM = XVPTST('NORM')\n      IF (NORM) YLNGTH=5.\n      IF (NORM) YSCLMX=1.\nC  'RDS'\n      CALL XVPARM('RDS',RDS,ICOUNT,IDEF,1)\nC  'XTITLE'\n      CALL XVPARM('XTITLE',CBUF,ICOUNT,IDEF,1)\n      IF (CBUF .NE. XTTL) THEN\n\t XTITLE = ' '\n\t WRITE(XTITLE(1:),'(A)') CBUF\n         NTITX=INDEX(CBUF,'   ') - 1\n         IF (NTITX .LE. 0) NTITX=52\n      END IF\nC  'YTITLE'\n      CALL XVPARM('YTITLE',CBUF,ICOUNT,IDEF,1)\n      IF (CBUF .NE. YTTL) THEN\n\t YTITLE = ' '\n\t WRITE(YTITLE(1:),'(A)') CBUF\n         NTITY=INDEX(CBUF,'   ') - 1\n         IF (NTITY .LE. 0) NTITY=52\n      END IF\nC  'TITLE'\n      CALL XVPARM('TITLE',CBUF,ICOUNT,IDEF,1)\n      IF (CBUF .NE. TTL) THEN\n\t TITLE = ' '\n\t WRITE(TITLE(1:),'(A)') CBUF\n         NTITLE=INDEX(CBUF,'   ') - 1\n         IF (NTITLE .LE. 0) NTITLE=52\n      END IF\nC\nC  FIND LENGTH OF LONGEST LINE\n      NP=0\n      IF (GTYPE .EQ. 1) THEN\t\t\t!PROCESS\nc         NP=0\n         DO J=1,NLINES\n            NX=IABS(SL(J)-EL(J))\n            NY=IABS(SS(J)-ES(J))\n            NTEST=SQRT(FLOAT(NX*NX+NY*NY))+1\n            IF (NTEST .GT. NP) NP=NTEST\n         ENDDO\n      ENDIF\nc\tprint *, \"np = \",np\n      IF (GTYPE .EQ. 2) NP=NCHAN\t\t!SPROCESS\nC\nC   LX IS NUMBER OF BYTES NEEDED FOR X ARRAY.\nC    (ONE FULLWORD FOR EACH PT. PLUS TWO MORE FOR XSCLMN AND XSCLDT)\nc\tused for stacka\n      LX=4*(NP+2)\n      LY=LX\n      LCHECK=LX    \t!check of bytes\nC\nC  DRAW X AXIS\n      GOTO 230\n      XSCLDT=(XSCLMX-XSCLMN)/XLNGTH\n      IF (XSCLDT .NE. 0.) GO TO 230\n      XAXIS(1)=XMIN(1)\n      XAXIS(2)=XMAX(1)\n      DO J=1,NLINES\n         XAXIS(1)=AMIN1(XAXIS(1),XMIN(J))\n         XAXIS(2)=AMAX1(XAXIS(2),XMAX(J))\n      END DO\n      IF (XAXIS(1) .GE. XAXIS(2)) XAXIS(2)=NP\nccc---      CALL SCALE(XAXIS,XLNGTH,2,1)\n      XAXIS(4) = XSCLDT\n      XAXIS(3) = XSCLMN\nc -- the following is not really needed with gnuplot\n230   continue\n      IF (TICS .EQ. 1) THEN\nC  SMALL\n         NTICS=10*XLNGTH\n         NTICS=2*XLNGTH\n      END IF\nC\nC  DRAW Y AXIS\n      GOTO 330\n      YSCLDT=(YSCLMX-YSCLMN)/YLNGTH\n      IF (YSCLDT .NE. 0) GO TO 330\n      YAXIS(1)=YMIN(1)\n      YAXIS(2)=YMAX(1)\n      DO J=1,NLINES\n         YAXIS(1)=AMIN1(YAXIS(1),YMIN(J))\n         YAXIS(2)=AMAX1(YAXIS(2),YMAX(J))\n      END DO\nccc---      CALL SCALE(YAXIS,YLNGTH,2,1)\n      YAXIS(3) = YSCLMN\n      YAXIS(4) = YSCLDT\n      YSCLMX=YSCLMN+YLNGTH*YSCLDT\nc -- the following is not really needed with gnuplot\n330   Continue\n      IF (TICS .EQ. 1) THEN\nC           SMALL\n         NTICS=10*YLNGTH\n         NTICS=2*YLNGTH\n      END IF\nC\nC  DRAW TITLE  (DEFAULT = 'IPL LINE PLOT')\n      headermsg(iiline) = title\n      iiline = iiline + 1\t\t!+ 3\n\nc -- the following is not really needed with gnuplot\nc  here is where \"line\" is called\nc      labels (1) = ' '\nc      do II = 1, 10\nc         write (msg (1:),'(a)') 'Line   ' \nc         write (msg (6:),'(i2)') II\nc         write (msg (9:50),'(a)') filename(ii)(1:40) \nc         labels (II+1) = msg\nc\tprint *,'label (ii+1) = ', labels (II+1)\nc      end do\n\n\nc\tprint *,'before DO 850 ILINE=1,NLINES  tbl = ',tbl(1:ntbl)\nC\n      DO 850 ILINE=1,NLINES\nC  SET LB=1 IF DATA SET IS SAME AS PREVIOUS ONE\n         LB=0\n         IF (ILINE .GT. 1) THEN\n            IF (IN(ILINE) .EQ. IN(ILINE-1)) LB=1\n         END IF\n         if (iline .eq. 6) then\n            i2line = iiline\n            headermsg(iiline) = title\n            iiline = iiline + 3\n         endif\nC\nC  ENSURE X ARRAY IS LARGE ENOUGH TO USE AS INPUT BUFFER ALSO\n         IF (LX .LT. 4*NSI(IN(ILINE))) LX=4*NSI(IN(ILINE))\nC\n\nC CALL SUBROUTINE GRAPH VIA STACKA AND EQUIV\nc\nc\tprint *, 'before CALL STACKA(9,EQUIV,.... tmptbl = ',tmptbl(1:ntbl)    \n         CALL STACKA(9,EQUIV,2,LX,LY,LCHECK,iline,IND,tmptbl,ntbl)\n         IF (IND .EQ. 1) GO TO 999\n\t\nc\tprint *, 'after CALL STACKA(9,EQUIV,.... tmptbl = ',tmptbl(1:ntbl)\n  850 CONTINUE\nc        print *, \"y-\",ysclmn, ysclmx\nc        print *, \"x-\",xsclmn, xsclmx\nc This calculation is used for positioning the labels on the chart\nc\toriginal method was percentage of height in fpos\ncc        labstep = 0.04\n\tiiline = iiline - 2\ncc\tgo to 10000\nc c       if (iiline .gt. 16) then\ncc           tmp = iiline/16\ncc           plotht = int(plotht * 0.75*tmp)\ncc           labstep =(labstep/tmp)\ncc        endif\nc\tcompute y-scale height\ncc\ttmp = ysclmx - ysclmn\ncc\tysclmx = ysclmx + 50*labstep*ysclmx\ncc\tif ((ysclmx-ysclmn) .gt. 2*tmp) ysclmx = 2*tmp\t\n\ncc10000 continue\n\tcharsize = 9\n\tcharsteps = (plotht)/(charsize*2) + 4\t\t!divide by 2 for line spacing\n\tif (charsteps .gt. 54) charsteps = charsteps - 1\t!adjust for floating point\nc\tprint *, 'charsteps = ',charsteps\n\n\tif (iiline .gt. (charsteps - 5).and. .not.nolabel) then\n\t   write (msg,10010) \n10010 format ('Plot needs to be taller for all labels to print' )\n\t   call xvmessage(msg,' ')\n\tendif \ncc\ncc  open gpi data set\ncc\n        open(98,file=plotgpi(1:nplotgpi),status='UNKNOWN',iostat=jj,err=995)\n10100 format('# Created by program qplot2')              !#'s are ignored in gnuplot\n        write(98,fmt=10100,iostat=jj,err=995)\n10105 format('# Gnuplot commands for line plot(s)')\n        write(98,fmt=10105,iostat=jj,err=995)\n10110 format('# Data in ',a)\n        write(98,fmt=10110,iostat=jj,err=995) tbl(1:ntbl)\n10115 format('set term x11 font \"ariel,',i2,'\" size ',i4,', ',i4)\nC  size = XX,YY\n        write(98,fmt=10115,iostat=jj,err=995) isize,plotwid,plotht\n10116 format('set output')                              !set output to screen\n        write(98,fmt=10116,iostat=jj,err=995)\n        if (tics .eq. 1) then\n10120 format('set grid ')\n                write(98,fmt=10120,iostat=jj,err=995)\n\telse\n10121 format (\"set noxtics\")\n\t        write(98,fmt=10121,iostat=jj,err=995)\n10122 format (\"set noytics\")\n\t        write(98,fmt=10122,iostat=jj,err=995)\n        endif\n10125 format(\"set ylab '\",a,\"'\" )\n       write(98,fmt=10125,iostat=jj,err=995) ytitle(1:ntity)\n10130 format(\"set xlab '\",a,\"'\")\n       write(98,fmt=10130,iostat=jj,err=995) xtitle(1:ntitx)\n10141 format(\"set clip points\")                         !how to deal with points out of range\n        write(98,fmt=10142,iostat=jj,err=995)\n10142 format(\"set clip one\")                            !how to deal with connecting lines out of range\n        write(98,fmt=10141,iostat=jj,err=995)\n10145 format('set title \"',a,'\" font \"Ariel,',i2,'\"')\n       write(98,fmt=10145,iostat=jj,err=995) title(1:ntitle),isize\n\n10135 format(\"set yrange [\",f8.0,\":\",f8.0,\"]\")\n       write(98,fmt=10135,iostat=jj,err=995) ysclmn,ysclmx\n10140 format(\"set xrange [\",f8.0,\":\",f7.0,\"]\")\n       write(98,fmt=10140,iostat=jj,err=995) xsclmn,xsclmx\n\ncc\tgo to 11000\nc output labels for only top 60% of plot\ncc        fpos=1.0 !\t\t\t+ labstep\ncc        do ii=2,iiline\ncc                i = ii - 1\ncc                fpos = fpos - labstep\ncc10160 format('set label ',i2,' \"',a,'\" at graph .30 ,',f5.2,\ncc     1 ' font \"ariel,9\" front nopoint tc def')\nc       1 ' font \"ariel 8\" front nopoint tc def')\ncc        write(98,fmt=10160,iostat=jj,err=995) i,headermsg(ii)(1:nheadermsg(ii)), fpos\ncc      print 10160, i,headr(ii)(1:nheadr(ii)), fpos\ncc10155 format(\"set label 2 '\",a,\"' at graph 0.4, 0.90 front nopoint tc def\")\ncc        write(98,fmt=10155,iostat=jj,err=995) headr(3)\ncc        enddo\n\ncc11000 continue\n\tif (.not.nolabel) then\n\tdo ii=2,iiline\n\t   i = ii - 1\n           j = charsteps - ii  \t       \n10170 format('set label ',i2,' \"',a,'\" at character 15 ,',i2,\n     1 ' font \"ariel,9\" front nopoint tc def')\nc       1 ' font \"ariel 8\" front nopoint tc def')\n        write(98,fmt=10170,iostat=jj,err=995) i,headermsg(ii)(1:nheadermsg(ii)), j\n\n\tenddo\t\n      !! Display labels on the 2nd and possibly the 3rd page \n      if (i2line .eq. 0) then\n         !! If i2line == 0, then 5 or less samples\nccc---         call header (headermsg, iiline, 0) !! Title string, lines, adjust left\n      else\n         !! Display first set of labels and header\n      endif\n\t\n\tendif !if (.not.nlabel\n\n        if (nlines .eq. 1) then\n\t   iline=1\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\nc\tprint *, 'if (nlines .eq. 1) tbl = ',tbl(1:ntbl)\n\t   if (gtype .eq. 1) then\n           \talinenum=aline//num(iline)\n\t        naline=index(alinenum,'  ') - 1\n\t   else\n\t\twrite (alinenum,10248) sl(iline),ss(iline)\n10248 format(\"pixel[\",i4,\",\",i4,\"]\") \n\t\tnaline=index(alinenum,'     ') - 1\n\t   endif\n\n\n10250 format(\"plot '\",a,\"' u 1:2 t '\",a,\"' w linespoints lt \",i2,\n     1 \" pt \",i2,\" ps 2 lc rgb '\",a,\"'\")\n        write(98,fmt=10250,iostat=jj,err=995) tbl(1:ntbl),alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline))\n\n\n        elseif (nlines .eq. 2) then\n\n           iline = 1\n\t   ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\nc\tprint *, 'if (nlines .eq. 2) tbl = ',tbl(1:ntbl)\n\t   if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\nc     terminated with bash\n10251 format(\"plot '\",a,\"' u 1:2 t '\",a,\"' w linespoints lt \",i2,\n     1 \" pt \",i2,\" ps 2 lc rgb '\",a,\"', \",a)\n      write(98,fmt=10251,iostat=jj,err=995) tbl(1:ntbl),\n     1 alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline)),\n     1 bash\n           iline = 2\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\nc\tprint *, 'iline .eq. 2 tbl = ',tbl(1:ntbl)\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n\t   endif\n10252 format (\" '\",a,\"' u 1:2 t '\",a,\"' w linespoints lt \",i2,\n     1 \" pt \",i2,\" ps 2 lc rgb '\",a,\"'\")\n        write(98,fmt=10252,iostat=jj,err=995) tbl(1:ntbl),alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline))\n\n        elseif (nlines .gt. 2) then\n\n           iline = 1\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\nc\tprint *, 'elseif (nlines .gt. 2) tbl = ',tbl(1:ntbl)\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n\t   endif\n        write(98,fmt=10251,iostat=jj,err=995) tbl(1:ntbl),\n     1   alinenum(1:naline),\n     1   lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline)),\n     1   bash\n\n        do iline=2,nlines-1\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\nc\t  print *, 'do iline=2,nlines-1 ntbl = ',tbl(1:ntbl)\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n\t   endif\n10253 format (\" '\",a,\"' u 1:2 t '\",a,\"' w linespoints lt \",i2,\n     1 \" pt \",i2,\" ps 2 lc rgb '\",a,\"', \",a)\n      write(98,fmt=10253,iostat=jj,err=995) tbl(1:ntbl),\n     1  alinenum(1:naline),\n     1  lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline)),\n     1  bash\n\n        enddo\n            iline = nlines\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\nc\t   print *, 'iline = nlines tbl = ',tbl(1:ntbl)\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n\t   endif\n        write(98,fmt=10252,iostat=jj,err=995) tbl(1:ntbl),alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline))\n\n\tendif\n\n10255 format(\"pause mouse any\")                 !allows plot to display on screen until mouse click\n       write(98,fmt=10255,iostat=jj,err=995)\n\n\tclose(98)\n\n\tif (epsplot) then\ncc\ncc  open eps data set\ncc\n        open(97,file=plotgpi2(1:nplotgpi2),status='UNKNOWN',iostat=jj,err=996)\n        write(97,fmt=10100,iostat=jj,err=996)\n        write(97,fmt=10105,iostat=jj,err=996)\n        write(97,fmt=10110,iostat=jj,err=996) tbl(1:ntbl)\n10300 format('set terminal postscript eps enhanced \"Ariel\" ',i2,' size 11 ,8')\n        write(97,fmt=10300,iostat=jj,err=996) psize\t\t!\tplotwid,plotht\n10305 format(\"set output '\",a,\"'\")\n        write(97,fmt=10305,iostat=jj,err=996) ploteps(1:nploteps)\n        if (tics .eq. 1) then\n                write(97,fmt=10120,iostat=jj,err=995)\n        else\n                write(97,fmt=10121,iostat=jj,err=995)\n                write(97,fmt=10122,iostat=jj,err=995)\n        endif\n       write(97,fmt=10125,iostat=jj,err=996) ytitle(1:ntity)\n       write(97,fmt=10130,iostat=jj,err=996) xtitle(1:ntitx)\n        write(97,fmt=10142,iostat=jj,err=996)\n        write(97,fmt=10141,iostat=jj,err=996)\n       write(97,fmt=10145,iostat=jj,err=996) title(1:ntitle),psize\n       write(97,fmt=10135,iostat=jj,err=996) ysclmn,ysclmx\n       write(97,fmt=10140,iostat=jj,err=996) xsclmn,xsclmx\n\nc output labels for only top 60% of plot\ncc        fpos=1.0 + labstep\ncc        do ii=2,iiline\ncc                i = ii - 1\ncc                fpos = fpos - labstep\ncc10161 format('set label ',i2,' \"',a,'\" at graph .30 ,',f5.2,\ncc     1 ' font \"ariel,16\" front nopoint tc def')\nc       1 ' font \"ariel 8\" front nopoint tc def')\ncc        write(97,fmt=10161,iostat=jj,err=996) i,headermsg(ii)(1:nheadermsg(ii)), fpos\ncc      print 10160, i,headr(ii)(1:nheadr(ii)), fpos\ncc10155 format(\"set label 2 '\",a,\"' at graph 0.4, 0.90 front nopoint tc def\")\ncc        write(98,fmt=10155,iostat=jj,err=995) headr(3)\ncc        enddo\n\nc\n       do ii=2,iiline\n           i = ii - 1\n           j = charsteps - ii\nc       1 ' font \"ariel 8\" front nopoint tc def')\n        write(97,fmt=10170,iostat=jj,err=995) i,headermsg(ii)(1:nheadermsg(ii)), j\n\n        enddo\n\n       if (nlines .eq. 1) then\n           iline=1\n          ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\n        write(97,fmt=10250,iostat=jj,err=996) tbl(1:ntbl),alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline))\n        elseif (nlines .eq. 2) then\n\n           iline = 1\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\n        write(97,fmt=10251,iostat=jj,err=996) tbl(1:ntbl),\n     1    alinenum(1:naline),\n     1    lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline)),\n     1    bash\n           iline = 2\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\n        write(97,fmt=10252,iostat=jj,err=996) tbl(1:ntbl),alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline))\n\n        elseif (nlines .gt. 2) then\n\n           iline = 1\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\n        write(97,fmt=10251,iostat=jj,err=996) tbl(1:ntbl),\n     1    alinenum(1:naline),\n     1    lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline)),\n     1    bash\n\n        do iline=2,nlines-1\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\n       write(97,fmt=10253,iostat=jj,err=996) tbl(1:ntbl),\n     1   alinenum(1:naline),\n     1   lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline)),\n     1   bash\n\n        enddo\n            iline = nlines\n           ntmptbl=index(tmptbl,'  ') - 1\n           tbl=tmptbl(1:ntmptbl)//num(iline)\n           ntbl=index(tbl,'  ') - 1\n           if (gtype .eq. 1) then\n                alinenum=aline//num(iline)\n                naline=index(alinenum,'  ') - 1\n           else\n                write (alinenum,10248) sl(iline),ss(iline)\n                naline=index(alinenum,'     ') - 1\n           endif\n        write(97,fmt=10252,iostat=jj,err=996) tbl(1:ntbl),alinenum(1:naline),\n     1 lntype(iline),pttype(iline),ptcolor(iline)(1:ptcolorl(iline))\n\n        endif\n\n        close(97)\n\tendif\n\nC\nC  CLOSE INPUT DATA SETS\nc  9999  continue\n      DO I=1,NI\n         CALL XVCLOSE(UNIT(I),STAT,' ')\n      ENDDO   \nC\n      RETURN\nC\n995     call xvmessage('??E - Error opening/writing gnuplot file',' ')\n        call abend\n\n996\tcall xvmessage('??E - Error opening/writing gnuplot eps file',' ')\n        call abend\n\n999   CALL XVMESSAGE('??E - Stacka error',' ')\n      CALL ABEND\n      END\nC\nC  **********************************************************\nC\n      SUBROUTINE EQUIV(X,LX,Y,LY,LCHECK,LINE,IND,tmptbl,ntbl)\nc\tX is array of LX bytes\nc\tY is array of LY bytes\nc\tLCHECK verifies the the number of bytes in LY\nc\tIND is a return, 0=OK, 1= insufficient memory\nc\n\timplicit none\nC\n\tinteger*4 ind,lcheck,lx,ly,dum\n\tinteger*4 line,ntbl\n\treal*4 x(lx),y(ly)\n\tcharacter*24 tmptbl\nc\n      IND=0\n\tdum=lx\t\t!to suppress warning msg in compiler\n      IF (LY .LT. LCHECK) GO TO 899\n      CALL GRAPH(X,X,Y,line,tmptbl,ntbl)\t\t\t!,tbl,ntbl)\n      RETURN\nC\nC   INSUFFICIENT MEMORY RETURN\n899   IND=1\n      RETURN\n      END\nC\nC  **********************************************************\nC\n      SUBROUTINE GRAPH(X,RBUF,Y,line,tmptbl,ntbl)\t\t\t\t\t!,tbl,ntbl)\n\timplicit none\nC\n      COMMON/C1/ SIZE,displace,RDS,XMIN,XMAX,YMIN,YMAX\n     &          ,XSCLMN,XSCLMX,YSCLMN,YSCLMX,XSCLDT\n     &          ,YSCLDT,XLNGTH,YLNGTH,FORMAT,NORM,NCHAN\n     &          ,xsclset,ysclset\n      COMMON/C2/ SLX,SSX,ELX,ESX,INX,UNIT,ILINE,NLINES\n     &          ,NLI,NSI,NSCHAN,GTYPE,XPAGE,LB,LABTOP\n      common/files/filename\n      common/commonheader/headermsg,nheadermsg,iiline,i2line\nc\n      integer*4  iiline,i2line,nheadermsg(220)  !! index into header strings\n\nC\n      \tREAL*8 MEAN,SIGMA,DBLV\n      \tREAL*4 XMAX(10),XMIN(10),YMAX(10),YMIN(10)\n      \tREAL*4 XSCLMN,XSCLMX,YSCLMN,YSCLMX\n\tREAL*4 TXSCLMN,TXSCLMX,TYSCLMN,TYSCLMX\n      \tREAL*4 XLNGTH,YLNGTH\n      \tREAL*4 X(1),RBUF(1),Y(1),YT(4)\n\treal*4 adx,ady,dnmax,displace,dx,dy,dz,rds,size\n\treal*4 xinc,xl,xl1,xl2,xpage,xscldt,yinc,ypage,ypeak,yscldt\n      \tINTEGER*4 INX(10),SLX(10),SSX(10),ELX(10),ESX(10),NLI(10),NSI(10)\n      \tINTEGER*4 UNIT(10),SN,SL,SS,EL,ES,STAT,GTYPE,sinc\n\tinteger*4 id,idense,ilab,iline,in,inline,inteq,ipt,iq\n\tinteger*4 labtop,lb,linc,ln,ln2,nchan,nlab,nlines,npts\n\tinteger*4 nsamp,nschan,nx,ny,ntmptbl,ntbl\n\tinteger*4 i,j,line\n      \tLOGICAL*4 NORM,xsclset,ysclset\n\tcharacter*1 tab\n\tcharacter*4 format(10)\n\tcharacter*24 tbl,tmptbl\n      \tCHARACTER*24 STLAB1\n      \tCHARACTER*12 STLAB2\n      \tCHARACTER*56  LABEL(20),xheadermsg\n\tcharacter*56 headermsg(220) !! Labels * (lines per label+2)\n        character*120 filename(10)\n\nC\n        character*1 num(5)\nc\n        data num/'1','2','3','4','5'/\nc        data tmptbl/'tmptbl.'/\n\n      STLAB1 = 'AVE GRAY LEVEL = '\n      STLAB2 = 'STD DEV = '\n      MEAN=0.0\n      SIGMA=0.0\n      INTEQ=ILINE-1\n      IN=1\n      LN=SLX(ILINE)\n      SN=SSX(ILINE)\nC\n      LINC=0\n      SINC=0\n\ttxsclmn = 40000000\n\ttxsclmx = 1\n\ttysclmn = 40000000\n\ttysclmx = 0\n        if (line .gt. 1) then\n           txsclmn = xsclmn\n           txsclmx = xsclmx\n           tysclmn = ysclmn\n           tysclmx = ysclmx\n        endif\n\n\n      IF (GTYPE .EQ. 1) THEN\nC\n         IN=INX(ILINE)\n         SL=SLX(ILINE)\n         SS=SSX(ILINE)\n         EL=ELX(ILINE)\n         ES=ESX(ILINE)\n         NSAMP=MAX0(SS,ES)\nc         LINC=0\n         IF (EL .GT. SL) LINC=+1\n         IF (EL .LT. SL) LINC=-1\nc         SINC=0\n         IF (ES .GT. SS) SINC=+1\n         IF (ES .LT. SS) SINC=-1\n      END IF\nC\n      IF (GTYPE .EQ. 2) GO TO 400\n      IF (EL .EQ. SL) GO TO 100\n      IF (ES .EQ. SS) GO TO 200\n      GO TO 300\nC\nC  HORIZONTAL LINE\n100   continue\n      CALL XVREAD(UNIT(IN),RBUF,STAT,'LINE',LN,'NSAMPS',NSAMP,' ')\nC      CALL XVCHECK('XVREAD  ',1,'INP',IN,STAT)\n      NPTS=IABS(ES-SS)+1\n      DO 150 IPT=1,NPTS\n         Y(IPT)=RBUF(SN)\n         DBLV=Y(IPT)\n         MEAN=MEAN+DBLV\n         SIGMA=SIGMA+DBLV*DBLV\n         SN=SN+SINC\n  150 CONTINUE\nc        print *,\"HORIZONTAL LINE:\"\ncc        do i=1,npts\ncc                print *,\"-\", x(i),y(i)\ncc        enddo\nc        print *,\"mean, sigma\"\nc        print *, mean,sigma\n\n      GO TO 500\nC\nC  VERTICAL LINE\n200   continue\n      NPTS=IABS(EL-SL)+1\n      DO 250 IPT=1,NPTS\n      CALL XVREAD(UNIT(IN),RBUF,STAT,'LINE',LN,'NSAMPS',NSAMP,' ')\nC      CALL XVCHECK('XVREAD  ',2,'INP',IN,STAT)\n         Y(IPT)=RBUF(SN)\n         DBLV=Y(IPT)\n         MEAN=MEAN+DBLV\n         SIGMA=SIGMA+DBLV*DBLV\n         LN=LN+LINC\n  250 CONTINUE\nc        print *,\"VERTICAL LINE:\"\ncc        do i=1,npts\ncc                print *,\"-\", x(i),y(i)\ncc        enddo\nc        print *,\"mean, sigma  summations\"\nc        print *, mean,sigma\n\n      GO TO 500\nC\nC  SLANT LINE\n300   continue\n      NX=IABS(SS-ES)\n      NY=IABS(SL-EL)\n      NPTS=IFIX(SQRT(FLOAT(NY*NY+NX*NX)))+1\n      DZ=ATAN2(FLOAT(NY),FLOAT(NX))\n      ADX=COS(DZ)\n      ADY=SIN(DZ)\n      DX=0.0\n      DY=0.0\nC\n      DO 350 IPT=1,NPTS\n      CALL XVREAD(UNIT(IN),RBUF,STAT,'LINE',LN,'NSAMPS',NSAMP,' ')\nC      CALL XVCHECK('XVREAD  ',3,'INP',IN,STAT)\n         YT(1)=RBUF(SN)\n         YT(2)=RBUF(SN+SINC)\nC        READ NEXT LINE OF DATA (EXCEPT FOR FIRST OR LAST POINT -\nC        IN THAT CASE READ SAME LINE)\n         LN2=LN+LINC\n         IF (IPT .EQ. 1 .OR. IPT .EQ. NPTS) LN2=LN\n      CALL XVREAD(UNIT(IN),RBUF,STAT,'LINE',LN2,'NSAMPS',NSAMP,' ')\nC      CALL XVCHECK('XVREAD  ',4,'INP',IN,STAT)\n         YT(3)=RBUF(SN)\n         YT(4)=RBUF(SN+SINC)\nC\n         Y(IPT)=YT(1)+DX*(YT(2)-YT(1))+DY*(YT(3)+DX*(YT(4)-YT(3))-YT(1)\n     &             -DX*(YT(2)-YT(1)))\n         DBLV=Y(IPT)\n         MEAN=MEAN+DBLV\n         SIGMA=SIGMA+DBLV*DBLV\nC\nC        CHECK FOR LINE/SAMPLE INCREMENTING\n         DX=DX+ADX\n         DY=DY+ADY\n         IF (DX .LT. 1.0) GO TO 330\nC        INCREMENT SAMPLE NUMBER\n         SN=SN+SINC\n         DX=DX-1.0\n         IF (DY .LT. 1.0) GO TO 350\nC        INCREMENT LINE NUMBER\n330      LN=LN+LINC\n         DY=DY-1.0\n  350 CONTINUE\ncc\tprint *,\"SLANT LINE:\"\ncc\tdo i=1,npts\ncc\t\tprint *,\"-\", x(i),y(i)\ncc\tenddo\nc\tprint *,\"mean, sigma\"\nc\tprint *, mean,sigma\n      GO TO 500\nC\nC        SPECTRAL PLOT\n400   continue\n      CALL XVREAD(UNIT(IN),RBUF,STAT,'LINE',LN,' ')\nC      CALL XVCHECK('XVREAD  ',5,'INP',IN,STAT)\n      NPTS=NCHAN\n      DO 450 IPT=1,NPTS\n         Y(IPT)=RBUF((IPT-1)*NSCHAN+SN)\n         DBLV=Y(IPT)\n         MEAN=MEAN+DBLV\n         SIGMA=SIGMA+DBLV*DBLV\n  450 CONTINUE\nC\nC\nC        SCALE DATA ACCORDING TO YVALUES PARAMETERS\n500   continue\n      DNMAX=255.0\n      IF (FORMAT(IN) .EQ. 'HALF') DNMAX=32767.0\n      IF (FORMAT(IN) .EQ. 'FULL') DNMAX=65536.0\n      IF (FORMAT(IN) .EQ. 'REAL') DNMAX=65536.0\n      YINC=(YMAX(ILINE)-YMIN(ILINE))/DNMAX\n      yinc = 1.0\n      IF ((YINC .EQ. 1.) .AND. (YMIN(ILINE) .EQ. 0.)) GO TO 620\n      DO 610 ID=1,NPTS\n         Y(ID)=Y(ID)*YINC+YMIN(ILINE)\n  610 CONTINUE\ncc        print *,\"scale to YVALUES:\"\ncc        do i=1,npts\ncc                print *,\"-\", x(i),y(i)\ncc        enddo\n\nC\nC        SCALE DATA ACCORDING TO RDS PARAMETER\n620   continue\n      IF (RDS .EQ. 0) GO TO 630\n      DO 625 ID=1,NPTS\n         Y(ID)=SQRT(AMAX1(Y(ID)**2-RDS**2,0.))\n  625 CONTINUE\ncc        print *,\"scale to RDS:\"\ncc        do i=1,npts\ncc                print *,\"-\", x(i),y(i)\ncc        enddo\n\nC\nC        NORMALIZE DATA\n630   continue\n      IF (.NOT.NORM) GO TO 640\n      YPEAK=Y(1)\n      DO 635 ID=2,NPTS\n         IF (YPEAK .LT. Y(ID)) YPEAK=Y(ID)\n  635 CONTINUE\n      DO 638 ID=1,NPTS\n         Y(ID)=Y(ID)/YPEAK\n  638 CONTINUE\ncc        print *,\"NORMALIZE:\"\ncc        do i=1,npts\ncc                print *,\"-\", x(i),y(i)\ncc        enddo\n\nC\nC        ADD DISPLACEMENT\n640   continue\n      IF (displace .NE. 0.) then\n      \tDO  ID=1,NPTS\n            Y(ID)=Y(ID)+INTEQ*displace\n\tENDDO\n      ENDIF\ncc        print *,\"ADD DISPLACEMENT:\"\ncc        do i=1,npts\ncc                print *,\"-\", x(i),y(i)\ncc        enddo\n\nC\nC        COMPUTE MEAN AND STANDARD DEVIATION\n      MEAN=MEAN/NPTS\n      SIGMA=DSQRT(DABS(SIGMA/NPTS-MEAN*MEAN))\nc\tprint *, \"MEAN, STDDEV:\"\nc        print *, mean,sigma\n\nC\nC        LOAD X ARRAY\n      X(1)=XMIN(ILINE)\n      XINC=(XMAX(ILINE)-XMIN(ILINE))/(NPTS-1)\nc\tprint *, \"LOAD X-ARRAY INCREMENT xinc = \",xinc\n      IF (XINC .NE. 0.) GO TO 660\n      X(1)=1.\n      XINC=1.\n  660 DO 665 IQ=2,NPTS\n         X(IQ)=X(IQ-1)+XINC\n  665 CONTINUE\nc   now append XSCLMN and XSCLDT to X array\n      X(NPTS+1)=XSCLMN\n      X(NPTS+2)=XSCLDT\nC\nc\nc\tprint *,'ysclset, xsclset = ',ysclset,xsclset\n      if (.not.ysclset) then\n         DO ID=1,NPTS\ncc\tprint *,ID,Y(ID),YSCLMX,YSCLMN\n            IF (Y(ID) .GT. YSCLMX) YSCLMX=Y(ID)\t\t\t!bug here, reversed\n            IF (Y(ID) .LT. YSCLMN) YSCLMN=Y(ID)\n         ENDDO\n      endif\nc\tX in VICAR IMAGE Always starts at 1,1\n      if (.not.xsclset) then\nc\t xsclmn = 1\n         DO ID=1,NPTS\n            IF (X(ID) .GT. XSCLMX) XSCLMX=X(ID)                     !bug here, reversed\n            IF (X(ID) .LT. XSCLMN) XSCLMN=X(ID)\n         ENDDO   \n      endif\nc\ncc      print *, \"ysclmn, ysclmx = \",ysclmn, ysclmx\ncc      print *, \"tysclmn, tysclmx = \",tysclmn, tysclmx\ncc      print *, \"xsclmn, xsclmx = \",xsclmn, xsclmx\ncc      print *, \"txsclmn, txsclmx = \",txsclmn, txsclmx\n\nc\n        if (line .gt. 1) then\n           if (txsclmn .lt. xsclmn) xsclmn = txsclmn\n           if (txsclmx .gt. xsclmx) xsclmx = txsclmx\n           if (tysclmn .lt. ysclmn) ysclmn = tysclmn\n           if (tysclmx .gt. ysclmx) ysclmx = tysclmx\n        endif\nc\ncc      print *, \"ysclmn, ysclmx = \",ysclmn, ysclmx\ncc      print *, \"xsclmn, xsclmx = \",xsclmn, xsclmx\n\nc\nc  now append YSCLMN and YSCLDT to Y array\n      Y(NPTS+1)=YSCLMN\n      Y(NPTS+2)=YSCLDT\n      IDENSE=NPTS/XLNGTH\n      IF (NLINES .EQ. 1) IDENSE=0\nC\n      !! Set SCALE factor to 1.0, as XRT/graph will automatically scale\n      !! the X & Y values before displaying the values.\n      x(npts+2) = 1.0\n      y(npts+2) = 1.0\nccc---      CALL LINE (X,Y,NPTS,1,IDENSE,INTEQ)\n      !! Move to (0,0) and set new origin\nccc---      call setactiveset (0)\nccc---      call plot (0.0, 0.0, 3)\n      TAB=CHAR(9)\nccccc           tbl=tbl(1:ntbl)//num(iline)\nccccc           ntbl=index(tbl,'  ') - 1\n\n\tntmptbl=index(tmptbl,'  ') - 1\n\ttbl=tmptbl(1:ntmptbl)//num(line)\n\tntbl=index(tbl,'  ') - 1\nc\tprint *, 'before OPEN(99,FILE=TBL(   tbl = ',tbl(1:ntbl)\n\n\tOPEN(99,FILE=TBL(1:ntbl),STATUS='UNKNOWN',IOSTAT=J,ERR=998)\n\t   do i=1,npts\n10100 format (1x,f8.0,a1,f10.3)\n              WRITE(99,FMT=10100,IOSTAT=J,ERR=998) x(i),tab, y(i)\n\t   enddo\n\n\tCLOSE(99)\n\nC\nC\nC  **********************************************************\nC\nC       * LABEL PROCESSING *\nC\n      inline = 1\n      YPAGE=AMAX1(7.,YLNGTH)\n      IF (LABTOP .EQ. 1) YPAGE=11.5\n      XL2=0.\n      XL1=0\n      IF (SIZE .EQ. 0.) GO TO 800\n\nC        CHECK IF SAME DATA SET\n      IF(LB.EQ.0) GO TO 710\n\n      headermsg (iiline) = 'SAME LABELS'\n      nheadermsg (iiline)=56\t!index(xheadermsg,'        ') - 1\n      inline =inline + 1\n      YPAGE = YPAGE-2.0*SIZE\n      GO TO 730\nC\nC        GET LABELS\n710   continue\n\n      CALL LABGET(UNIT(IN),NLAB,LABEL)\nC        PRINT LABELS\n\n      xheadermsg = ' '\n      write (xheadermsg (1:),'(a)') 'Line   ' \n      write (xheadermsg (6:),'(i2)') ILINE\n      write (xheadermsg (9:),'(a)') ' - '\n      write (xheadermsg (12:50),'(a)') filename(iline)(1:38)\n\n      headermsg (iiline) = xheadermsg \n      nheadermsg (iiline)=56\t!index(xheadermsg,'        ') - 1\n      iiline = iiline + 1 \n\n      DO 720 ILAB=1,NLAB\nC      CALL SYMBOL(XPAGE,YPAGE,SIZE,%DESCR(LABEL(1,ILAB)),0,0.,NCH)\n      \n         headermsg (iiline) = label(ilab) \n         nheadermsg (iiline)=56\t\t!index(xheadermsg,'        ') - 1\nc\tprint *, 'headermsg = ',headermsg (iiline)\n         iiline = iiline + 1 \n\n  720 CONTINUE\nC        PRINT MEAN AND STANDARD DEVIATION\n730   continue\n\n      write (xheadermsg (1:),'(a)') stlab1       !! 'AVE GRAY SCALE = '\n      write (xheadermsg (18:),'(f8.2)') mean \n      headermsg (iiline) = xheadermsg\n      nheadermsg (iiline)=56\t!index(xheadermsg,'        ') - 1\n      iiline = iiline + 1\n\n      write (xheadermsg (1:),'(a)') stlab2       !! 'STD DEV = '\n      write (xheadermsg (11:),'(f6.2)') sigma \n      headermsg (iiline) = xheadermsg\n      nheadermsg (iiline)=56\t!index(xheadermsg,'        ') - 1\n      iiline = iiline + 1\n\nC        PRINT SL, SS, EL, ES\n      IF(GTYPE.EQ.1) THEN\n         write (xheadermsg (1:),'(a)') 'SL='\n         write (xheadermsg (4:),'(i3)') SL \n         write (xheadermsg (11:),'(a)') 'SS='\n         write (xheadermsg (14:),'(i3)') SS \n         headermsg (iiline) = xheadermsg\n\t nheadermsg (iiline)=56\t\t!index(xheadermsg,'        ') - 1\n         iiline = iiline + 1\n\n         write (xheadermsg (1:),'(a)') 'EL='\n         write (xheadermsg (4:),'(i3)') el \n         write (xheadermsg (11:),'(a)') 'EL='\n         write (xheadermsg (14:),'(i3)') es \n         headermsg (iiline) = xheadermsg\n\t nheadermsg (iiline)=56\t\t!index(xheadermsg,'        ') - 1\nc\t print *,'header = ',headermsg(iiline)(1:nheadermsg (iiline))\n         iiline = iiline + 1\n\n      ELSE\n         write (xheadermsg (1:),'(a)') 'LINE='\n         write (xheadermsg (4:),'(f6.2)') float(ln) \n         write (xheadermsg (11:),'(a)') 'SAMPLE='\n         write (xheadermsg (44:),'(f6.2)') float(sn) \n         headermsg (iiline) = xheadermsg\n         nheadermsg (iiline)=56\t!index(xheadermsg,'        ') - 1\n\nc\tprint *,'header = ',headermsg(iiline)(1:nheadermsg (iiline))\n         iiline = iiline + 1\n\n      END IF\nC\n800   XL=AMAX1(XL1-XPAGE,XL2-XPAGE)\n      XPAGE=XPAGE+XL+0.5\n      iiline = iiline + 1       !! Bump index for header strings\nC\n      RETURN\n998     call xvmessage('??E - Error writing gnuplot file - graph',' ')\n        call abend\n\n        return\n\n      END\n\nC\nC\nC\nC  **********************************************************\nC\nC\nC\n      SUBROUTINE LABGET(UNIT,NLAB,LABEL)\n\timplicit none\n      INTEGER*4 INSTAN(200),STAT,UNIT,COUNT,NLAB\n\tinteger*4 i,j,ichar,ilab,length,lvalue,ntasks\n      CHARACTER*500 VALUE\n      CHARACTER*32 FORMAT\n      CHARACTER*28 TIME,LTIME\n      CHARACTER*8 TASKS(200),UNAME,LUNAME\n      CHARACTER*32 KEY,LKEY\n      CHARACTER*1600 LTASKS\nC     LOGICAL*1 LTASKS(1600),LUNAME(8),LKEY(32)\n      CHARACTER*56   LABEL(20)\nC      LOGICAL*1 LABEL(56,20),LTIME(28),LVALUE(500)\n      EQUIVALENCE (TASKS,LTASKS),(UNAME,LUNAME),(TIME,LTIME)\n      EQUIVALENCE (KEY,LKEY),(VALUE,LVALUE)\n\nC        BLANK OUT LABEL BUFFER AND INITIALIZE LABEL POINTER\n      DO I=1,20\n         LABEL(I) = ' '\n      ENDDO\nC      CALL MVE(1,20*56,' ',LABEL,0,1)\n      ILAB=1\n      NTASKS=200\nC\nC        GET NAMES OF ALL HISTORY TASKS\n      CALL XLHINFO(UNIT,TASKS,INSTAN,NTASKS,STAT,' ')\nC      CALL XVCHECK('XLHINFO ',1,'INP',UNIT,STAT)\nC\n      DO 200 I=1,NTASKS\nC        GET USER AND TIME\n      CALL XLGET(UNIT,'HISTORY','USER',UNAME,STAT,'HIST',TASKS(I),\n     &           'INSTANCE',INSTAN(I),'FORMAT','STRING',' ')\nC      CALL XVCHECK('XLGET   ',1,'INP',UNIT,STAT)\n      CALL XLGET(UNIT,'HISTORY','DAT_TIM',TIME,STAT,'HIST',\n     &           TASKS(I),'INSTANCE',INSTAN(I),'FORMAT','STRING',' ')\nc      CALL XVCHECK('XLGET   ',2,'INP',UNIT,STAT)\nC        CONVERT DAT_TIM TO UPPERCASE\n      CALL CCASE(TIME,1,28)\nC        FILL IN TASK, USER, TIME LINE\nC                              1         2         3         4        4 \nC                     1234567890123456789012345678901234567890123456789\n       LABEL(ILAB) = 'TASK:            USER: '\n       WRITE(LABEL(ILAB)(7:14), '(A8)' ) LTASKS(8*I-7:8*I)\n       WRITE(LABEL(ILAB)(23:30), '(A8)' ) LUNAME\n       WRITE(LABEL(ILAB)(33:56), '(A24)' ) LTIME \nc      CALL MVL('TASK:',LABEL(1,ILAB),5)\nc      CALL MVL(LTASKS(8*I-7),LABEL(7,ILAB),8)\nc      CALL MVL('USER:',LABEL(17,ILAB),5)\nc      CALL MVL(LUNAME,LABEL(23,ILAB),8)\nc      CALL MVL(LTIME,LABEL(33,ILAB),24)\n      ILAB=ILAB+1\n      IF (ILAB .GT. 20) GO TO 500\nC\nC        SET TO CURRENT TASK\n      CALL XLINFO(UNIT,'HISTORY','TASK',FORMAT,LENGTH,COUNT,\n     &            STAT,'HIST',TASKS(I),'INSTANCE',INSTAN(I),' ')\nC      CALL XVCHECK('XLINFO  ',1,'INP',UNIT,STAT)\n      ICHAR=1\nC\n      DO 100 J=1,999\nC        GET NEXT KEYWORD\n      CALL XLNINFO(UNIT,KEY,FORMAT,LENGTH,COUNT,STAT,' ')\n      IF (STAT .NE. 1 .OR. KEY .EQ. 'TASK') GO TO 150\n      IF (KEY .EQ. 'DAT_TIM' .OR. KEY .EQ. 'USER') GO TO 100\nC        GET VALUE\n      CALL XLGET(UNIT,'HISTORY',KEY,VALUE,STAT,'HIST',TASKS(I),\n     &           'INSTANCE',INSTAN(I),'FORMAT','STRING',\n     &           'LENGTH',LENGTH,' ')\nc      CALL XVCHECK('XLGET   ',3,'INP',UNIT,STAT)\nC        TRUNCATE VALUE IF KEYWORD AND VALUE WILL NOT FIT ON ONE LINE\n      IF (LENGTH .GT. 47) LENGTH=47\nC        SEE IF KEYWORD AND VALUE WILL FIT ON PRESENT LINE\n      IF (ICHAR+LENGTH+9 .LT. 56) GO TO 50\n      ICHAR=1\n      ILAB=ILAB+1\n      IF (ILAB .GT. 20) GO TO 500\nC        FILL IN KEYWORD AND VALUE INTO LABEL BUFFER\n50    WRITE(LABEL(ILAB)(ICHAR:(ICHAR+7)), '(A8)') LKEY\n      WRITE(LABEL(ILAB)(ICHAR+8:ICHAR+8), '(A1)' ) '='\n      WRITE(LABEL(ILAB)(ICHAR+9:), '(A)') LVALUE\nC       CALL MVL(LKEY,LABEL(ICHAR,ILAB),8)\nC      CALL MVL('=',LABEL(ICHAR+8,ILAB),1)\nC      CALL MVL(LVALUE,LABEL(ICHAR+9,ILAB),LENGTH)\n      ICHAR=ICHAR+LENGTH+11\nC\n  100 CONTINUE\n\n150   ILAB=ILAB+1\n      IF (ILAB .GT. 20) GO TO 500\n\n  200 CONTINUE\n500   NLAB = ILAB-1\n\n      RETURN\n      END\n"
}