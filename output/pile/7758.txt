{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7758",
    "text": "Q:\n\nFastest way to check whether image (img HTML element) is not protected by CORS\n\nI occurred to have a problems when I copied image from a site (context menu->copy image) and pasted it in my script (in contenteditable div). <img> appears in the div, however an attempt to drawImage it on <canvas> will cause errors if you try to get image data of the canvas:\n\nYou can draw on the canvas without errors, but not retrieve the pixel data or DataURL. In cases of such images, I'd like to use CORS proxy to have full access to the data.\nHow can  detect that I have no right to access data of <img> tag or URL? What's the fastest way?\nI had this problem (and still have) in a image paste upload script for StackExchange.\nEdit: Further explanations of the problem if you're still not sure what do I mean:\nWhy try/catch is not a solution?\nYou can draw any image on canvas and you can even perform further draw operations:\n\nThe image source. It doesn't allow CORS!\nWhy parsing the URL doesn't help?\nSome remote images allow CORS and do not throw any errors. For example the avatars from Gravatar.\n\nA:\n\nI came up with the solution which actually uses try ... catch as @wwwmarty suggested. It's probably not very fast as of CPU speed and a little bit retarded, but it works:\nHTMLImageElement.prototype.isTainting = function() {\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.getContext(\"2d\").drawImage(this,0,0);\n    try {\n       canvas.toDataURL(); \n       return true;\n    }\n    catch() {return false;};\n    return false;\n}\n\nI also created quite big fiddle where you can inspect behavior of the crossorigin attribute. \n\n"
}