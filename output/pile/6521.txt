{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6521",
    "text": "Q:\n\nBest way to put user input into generated javascript?\n\nI need for someone to be able to put some text into a page and then this gets sent to the server, saved in the database, and else where this text is put into a javascript variable.\nBasically like this:\nWrite(\"var myVar=\\\"\"+MyData+\"\\\";\");\n\nWhat is the best way of escaping this data? Is there anything out there already to deal with things like ' and \" and new lines? Is base64 my only option?\nMy serverside framework/language is ASP.Net/C#\n\nA:\n\nYou should use WPL:\nWrite(\"var myVar=\" + Encoder.JavaScriptEncode(MyData, true) + \";\");\n\nif you don't want to reference the library, you can use the following function (adapted from the .Net source):\npublic static void QuoteString(this string value, StringBuilder b) {\n    if (String.IsNullOrEmpty(value))\n        return \"\";\n\n    var b = new StringBuilder();\n    int startIndex = 0;\n    int count = 0;\n    for (int i = 0; i < value.Length; i++) {\n        char c = value[i];\n\n        // Append the unhandled characters (that do not require special treament)\n        // to the string builder when special characters are detected.\n        if (c == '\\r' || c == '\\t' || c == '\\\"' || c == '\\'' || c == '<' || c == '>' ||\n            c == '\\\\' || c == '\\n' || c == '\\b' || c == '\\f' || c < ' ') {\n            if (b == null) {\n                b = new StringBuilder(value.Length + 5);\n            }\n\n            if (count > 0) {\n                b.Append(value, startIndex, count);\n            }\n\n            startIndex = i + 1;\n            count = 0;\n        }\n\n        switch (c) {\n            case '\\r':\n                b.Append(\"\\\\r\");\n                break;\n            case '\\t':\n                b.Append(\"\\\\t\");\n                break;\n            case '\\\"':\n                b.Append(\"\\\\\\\"\");\n                break;\n            case '\\\\':\n                b.Append(\"\\\\\\\\\");\n                break;\n            case '\\n':\n                b.Append(\"\\\\n\");\n                break;\n            case '\\b':\n                b.Append(\"\\\\b\");\n                break;\n            case '\\f':\n                b.Append(\"\\\\f\");\n                break;\n            case '\\'':\n            case '>':\n            case '<':\n                AppendCharAsUnicode(b, c);\n                break;\n            default:\n                if (c < ' ') {\n                    AppendCharAsUnicode(b, c);\n                } else {\n                    count++;\n                }\n                break;\n        }\n    }\n\n    if (b == null) {\n        b.Append(value);\n    }\n\n    if (count > 0) {\n        b.Append(value, startIndex, count);\n    }\n\n    return b.ToString();\n}\n\n"
}