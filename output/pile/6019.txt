{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6019",
    "text": "Q:\n\nlink_to action \"show\" to another controller\n\nruby 1.9.2p290\nrails 3.1.1\n\nBasically I have two models: CHEFS and RECIPES.\nclass Chef < ActiveRecord::Base \n has_many :recipes\nend\n\nclass Recipe < ActiveRecord::Base\n belongs_to :chef\nend\n\nAnd the following routes:\nresources :recipes\n\nresources :chefs do\n # list of recipes from chef\n resources :recipes, :to => 'recipes#index_chef'\nend\n\nWith this I have the urls (exactly what I want):\n\n/recipes - list of recipes \n/chefs/username/recipes - list of chef's recipes \n/chefs/ - list of chefs\n/chefs/username - chef's profile\n\nRecipesController:\ndef index\n @chef = Chef.find_by_username(params[:chef_id])\n @recipes = Recipe.where({ :status_id => 1 }).order(\"id desc\").page(params[:page]).per(9)\nend\n\ndef index_chef\n  @chef = Chef.find_by_username(params[:chef_id])\n  @recipes = @chef.recipes.where(:status_id => 1).order(\"id desc\").page(params[:page]).per(9)\nend\n\nMy recipes index view:\n<%= link_to recipe.chef.username.capitalize, @chef %>\n\nIn http://3001/chefs/username/recipes I have the correct link to Chef profile.\nBut in http://3001/recipes I have the wrong link.\nWhat am I doing wrong?\n\nA:\n\nIn http://3001/recipes (which is a weird url!), you don't have access to params[:chef_id]. So you won't have the @chef variable available to you in the view. It should be nil!\nTo get around this, change your link_to to this\n<%= link_to recipe.chef.username.capitalize, recipe.chef %>\n\nYou might want to eager load the chef to your @recipes records by loading that in your controller like this:\n @recipes = Recipe.where({ :status_id => 1 }).includes(:chef).order(\"id desc\").page(params[:page]).per(9)\n\nHope this helps.\n\n"
}