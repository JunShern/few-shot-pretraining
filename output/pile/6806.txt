{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6806",
    "text": "Q:\n\nStart and end date of a current month\n\nI need the start date and the end date of the current month in Java. When the JSP page is loaded with the current month it should automatically calculate the start and end date of that month. It should be irrespective of the year and month. That is some month has 31 days or 30 days or 28 days. This should satisfy for a leap year too. Can you help me out with that?\nFor example if I select month May in a list box I need starting date that is 1 and end date that is 31.\n\nA:\n\nThere you go:\npublic Pair<Date, Date> getDateRange() {\n    Date begining, end;\n\n    {\n        Calendar calendar = getCalendarForNow();\n        calendar.set(Calendar.DAY_OF_MONTH,\n                calendar.getActualMinimum(Calendar.DAY_OF_MONTH));\n        setTimeToBeginningOfDay(calendar);\n        begining = calendar.getTime();\n    }\n\n    {\n        Calendar calendar = getCalendarForNow();\n        calendar.set(Calendar.DAY_OF_MONTH,\n                calendar.getActualMaximum(Calendar.DAY_OF_MONTH));\n        setTimeToEndofDay(calendar);\n        end = calendar.getTime();\n    }\n\n    return Pair.of(begining, end);\n}\n\nprivate static Calendar getCalendarForNow() {\n    Calendar calendar = GregorianCalendar.getInstance();\n    calendar.setTime(new Date());\n    return calendar;\n}\n\nprivate static void setTimeToBeginningOfDay(Calendar calendar) {\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n}\n\nprivate static void setTimeToEndofDay(Calendar calendar) {\n    calendar.set(Calendar.HOUR_OF_DAY, 23);\n    calendar.set(Calendar.MINUTE, 59);\n    calendar.set(Calendar.SECOND, 59);\n    calendar.set(Calendar.MILLISECOND, 999);\n}\n\nPS: Pair class is simply a pair of two values.\n\nA:\n\nIf you have the option, you'd better avoid the horrid Java Date API, and use instead Jodatime. Here is an example:\nLocalDate monthBegin = new LocalDate().withDayOfMonth(1);\nLocalDate monthEnd = new LocalDate().plusMonths(1).withDayOfMonth(1).minusDays(1);\n\nA:\n\nTry LocalDate from Java 8:\nLocalDate today = LocalDate.now();\nSystem.out.println(\"First day: \" + today.withDayOfMonth(1));\nSystem.out.println(\"Last day: \" + today.withDayOfMonth(today.lengthOfMonth()));\n\n"
}