{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains [\"I still need to figure out how to handle the json starting off with an array of basically two different objects (the first listing in the json is describing the link, while the second listing is describing the comments), but I'll cross that bridge when I get there. (0.192)\"]."
        }
    ],
    "doc_id": "9340",
    "text": "Q:\n\nDeserialize JSON with Gson - Expected BEGIN_OBJECT but was String - Reddit's JSON\n\nI'm trying to deserialize JSON from Reddit that you can obtain by appending .json to the url.  An example would be: \nhttp://www.reddit.com/r/pics/comments/1wvx52/.json?sort=top\nHowever, I am getting the error message: \nException in thread \"main\" com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 9765\nAt line 1 column 9765 in the json there is the following code: \"replies\": \"\", whereas normally this would contain an object like this: replies: {\nkind: \"Listing\",\ndata: {}\n},\nDoes this mean that the json is a String when there is no data, but an object otherwise?  How can I deserialize with gson properly if this is the case?  I've included my classes below.  I still need to figure out how to handle the json starting off with an array of basically two different objects (the first listing in the json is describing the link, while the second listing is describing the comments), but I'll cross that bridge when I get there.  Thanks in advance if anyone can shed some light on this issue.\nMain Class\npublic static void main(String[] args)\n{\n    ArrayList<CommentsResults> commentsResults = new ArrayList<CommentsResults>();\n    String commentsURL = \"http://www.reddit.com/r/pics/comments/1wvx52/.json?sort=top\";\n    URL url = null;\n    try\n    {\n        url = new URL(commentsURL);\n    } catch (MalformedURLException ex)\n    {\n        System.out.println(ex.getMessage());\n    }\n\n    try\n    {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String jsonText = readAll(bufferedReader);\n        Gson gson = new GsonBuilder().create();\n        commentsResults = gson.fromJson(jsonText, new TypeToken<ArrayList<CommentsResults>>(){}.getType());\n    } catch (IOException ex)\n    {\n        System.out.println(ex.getMessage());\n    }\n}\nprivate static String readAll(Reader reader) throws IOException\n{\n    StringBuilder stringBuilder = new StringBuilder();\n    int cp;\n    while ((cp = reader.read()) != -1)\n    {\n        stringBuilder.append((char) cp);\n    }\n    return stringBuilder.toString();\n}\n\nCommentsResults Class\npublic class CommentsResults {\n\nprivate String kind;\nprivate CommentsData data;    \n\npublic CommentsResults()\n{\n}\n\npublic CommentsResults(String kind, CommentsData data)\n{\n    this.kind = kind;\n    this.data = data;\n}\n\npublic String getKind()\n{\n    return kind;\n}\n\npublic CommentsData getData()\n{\n    return data;\n}\n\npublic void setKind(String kind)\n{\n    this.kind = kind;\n}\n\npublic void setData(CommentsData data)\n{\n    this.data = data;\n}    \n\n}\nCommentsData Class\nprivate String modhash;\nprivate List <CommentsChild> children; \n\npublic CommentsData()\n{\n}\n\npublic CommentsData(String modhash, List<CommentsChild> children)\n{\n    this.modhash = modhash;\n    this.children = children;\n}\n\npublic String getModhash()\n{\n    return modhash;\n}\n\npublic List<CommentsChild> getChildren()\n{\n    return children;\n}\n\npublic void setModhash(String modhash)\n{\n    this.modhash = modhash;\n}\n\npublic void setChildren(List<CommentsChild> children)\n{\n    this.children = children;\n}       \n\nCommentsChild Class\nprivate String kind;\nprivate Comment data;\n\npublic CommentsChild()\n{\n}\n\npublic CommentsChild(String kind, Comment comment)\n{\n    this.kind = kind;\n    this.data = comment;\n}\n\npublic String getKind()\n{\n    return kind;\n}\n\npublic Comment getComment()\n{\n    return data;\n}\n\npublic void setKind(String kind)\n{\n    this.kind = kind;\n}\n\npublic void setComment(Comment comment)\n{\n    this.data = comment;\n} \n\nComment Class\npublic class Comment {\n\nprivate CommentsResults replies;\n\nprivate String id;\n\nprivate int gilded;\n\nprivate String author;\n\nprivate String parent_id;\n\nprivate String body;\n\nprivate int downs;\n\nprivate String link_id;\n\nprivate boolean score_hidden;\n\nprivate int created_utc;\n\nprivate String distinguished;\n\npublic Comment()\n{\n}\n\npublic Comment(CommentsResults replies, String id, int gilded, String author, String parent_id, String body, int downs, String link_id, boolean score_hidden, int created_utc, String distinguished)\n{\n    this.replies = replies;\n    this.id = id;\n    this.gilded = gilded;\n    this.author = author;\n    this.parent_id = parent_id;\n    this.body = body;\n    this.downs = downs;\n    this.link_id = link_id;\n    this.score_hidden = score_hidden;\n    this.created_utc = created_utc;\n    this.distinguished = distinguished;\n}\n\npublic CommentsResults getReplies()\n{\n    return replies;\n}\n\npublic String getId()\n{\n    return id;\n}\n\npublic int getGilded()\n{\n    return gilded;\n}\n\npublic String getAuthor()\n{\n    return author;\n}\n\npublic String getParent_id()\n{\n    return parent_id;\n}\n\npublic String getBody()\n{\n    return body;\n}\n\npublic int getDowns()\n{\n    return downs;\n}\n\npublic String getLink_id()\n{\n    return link_id;\n}\n\npublic boolean isScore_hidden()\n{\n    return score_hidden;\n}\n\npublic int getCreated_utc()\n{\n    return created_utc;\n}\n\npublic String getDistinguished()\n{\n    return distinguished;\n}\n\npublic void setReplies(CommentsResults replies)\n{\n    this.replies = replies;\n}\n\npublic void setId(String id)\n{\n    this.id = id;\n}\n\npublic void setGilded(int gilded)\n{\n    this.gilded = gilded;\n}\n\npublic void setAuthor(String author)\n{\n    this.author = author;\n}\n\npublic void setParent_id(String parent_id)\n{\n    this.parent_id = parent_id;\n}\n\npublic void setBody(String body)\n{\n    this.body = body;\n}\n\npublic void setDowns(int downs)\n{\n    this.downs = downs;\n}\n\npublic void setLink_id(String link_id)\n{\n    this.link_id = link_id;\n}\n\npublic void setScore_hidden(boolean score_hidden)\n{\n    this.score_hidden = score_hidden;\n}\n\npublic void setCreated_utc(int created_utc)\n{\n    this.created_utc = created_utc;\n}\n\npublic void setDistinguished(String distinguished)\n{\n    this.distinguished = distinguished;\n}    \n}\n\nA:\n\nSo in the off chance this helps somebody (which seems dubious at this point) I decided to parse the Json manually using recursion.  Here's how I did it:\npublic static void getCommentsOnLink()\n{               \n    String commentsURL= \"http://www.reddit.com/r/pics/comments/1wvx52/.json?sort=top\";\n    URL url = null;\n    try\n    {\n        url = new URL(commentsURL);\n    } catch (MalformedURLException ex)\n    {\n        System.out.println(ex.getMessage());\n    }\n    String JsonText = readCommentJsonFromURL(url);\n\n    RedditCommentResults redditCommentResults = getCommentResults(JsonText);\n}\n\nprivate static String readCommentJsonFromURL(URL url)\n{\n    String JSONText = null;\n    try\n    {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));\n        JSONText = readAll(bufferedReader);\n    } catch (IOException ex)\n    {\n        System.out.println(ex.getMessage());\n    }\n    return JSONText;\n}\n\nprivate static String readAll(Reader reader) throws IOException\n{\n    StringBuilder stringBuilder = new StringBuilder();\n    int cp;\n    while ((cp = reader.read()) != -1)\n    {\n        stringBuilder.append((char) cp);\n    }\n    return stringBuilder.toString();\n}    \n\nprivate static RedditCommentResults getCommentResults(String JsonText)\n{\n    JsonParser parser = new JsonParser();\n    JsonArray completeJson = (JsonArray) parser.parse(JsonText);\n\n    //get link and comment object from the array containing an object for each\n    JsonObject linkParentJson = (JsonObject) completeJson.get(0);\n    JsonObject commentParentJson = (JsonObject) completeJson.get(1);\n\n    //use automatic deserializer for redditLink\n    JsonObject linkListingDataJson = linkParentJson.getAsJsonObject(\"data\");\n    JsonObject linkChildrenJson = linkListingDataJson.getAsJsonArray(\"children\").get(0).getAsJsonObject();\n    JsonObject linkDataJson = linkChildrenJson.getAsJsonObject(\"data\");\n    Link commentLink = gson.fromJson(linkDataJson, Link.class);\n    RedditLink redditCommentLink = new RedditLink(commentLink);\n\n    //parse comments manually\n    JsonObject commentDataJson = commentParentJson.getAsJsonObject(\"data\");\n    JsonArray commentChildrenJson = commentDataJson.getAsJsonArray(\"children\");\n\n    //get all of the comments from the JsonArray\n    ArrayList<RedditComment> redditComments = getNestedComments(commentChildrenJson);\n\n    RedditCommentResults redditCommentResults = new RedditCommentResults(redditComments, redditCommentLink);\n    return redditCommentResults;\n}\n\nprivate static ArrayList<RedditComment> getNestedComments(JsonArray commentWrapperJsonArray)\n{\n    ArrayList<RedditComment> redditComments = new ArrayList();\n    for (JsonElement commentWrapperJson : commentWrapperJsonArray)\n    {\n        //cast Element to Object so we can search for the primitive \"kind\".  Finally we get it as a String\n        String kind = commentWrapperJson.getAsJsonObject().getAsJsonPrimitive(\"kind\").getAsString();\n\n        //if the comment is of type t1 meaning it is a comment and not a \"more\" (a \"more\" is a comment which \n        //hasn't been loaded yet because it does not have a great deal of upvotes relative to other comments)\n        if (kind.equals(\"t1\"))\n        {\n            JsonObject commentJson = commentWrapperJson.getAsJsonObject().getAsJsonObject(\"data\");\n            Comment comment = gson.fromJson(commentJson, Comment.class);\n            RedditComment redditComment = new RedditComment(comment);\n\n            JsonElement repliesJson = commentJson.get(\"replies\");\n\n            //if the reply is not equal to an empty String (i.e. if there is at least one reply)\n            if (!repliesJson.isJsonPrimitive())\n            {\n                JsonObject dataJson = repliesJson.getAsJsonObject().getAsJsonObject(\"data\");\n                JsonArray childrenJson = dataJson.getAsJsonArray(\"children\");\n                ArrayList<RedditComment> nestedComments = getNestedComments(childrenJson);\n                redditComment.setReplies(nestedComments);\n            }\n            redditComments.add(redditComment);\n        }\n    }\n    return redditComments;\n}\n\n"
}