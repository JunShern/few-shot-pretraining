{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": true,
            "reason": "Text contains SAT."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 3 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4822",
    "text": "/*\n * Copyright (C) 2013-2018 yvolk (Yuri Volkov), http://yurivolkov.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.andstatus.app.timeline.meta;\n\nimport android.content.Context;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.StringRes;\n\nimport org.andstatus.app.R;\nimport org.andstatus.app.lang.SelectableEnum;\nimport org.andstatus.app.net.social.ApiRoutineEnum;\nimport org.andstatus.app.notification.NotificationEventType;\nimport org.andstatus.app.timeline.ListScope;\nimport org.andstatus.app.util.StringUtil;\n\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.andstatus.app.net.social.ApiRoutineEnum.ACTOR_TIMELINE;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.DUMMY_API;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.GET_FOLLOWERS;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.GET_FRIENDS;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.HOME_TIMELINE;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.LIKED_TIMELINE;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.NOTIFICATIONS_TIMELINE;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.PRIVATE_NOTES;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.PUBLIC_TIMELINE;\nimport static org.andstatus.app.net.social.ApiRoutineEnum.SEARCH_NOTES;\n\npublic enum TimelineType implements SelectableEnum {\n    UNKNOWN(ListScope.ORIGIN, \"unknown\", R.string.timeline_title_unknown, 0, DUMMY_API),\n    /** The Home timeline and other information (replies...). */\n    HOME(ListScope.USER, \"home\", R.string.timeline_title_home, 0, HOME_TIMELINE),\n    UNREAD_NOTIFICATIONS(ListScope.USER, \"unread_notifications\", R.string.unread_notifications, 0, NOTIFICATIONS_TIMELINE),\n    /** The Mentions timeline and other information (replies...). */\n    INTERACTIONS(ListScope.USER, \"interactions\", R.string.timeline_title_interactions, 0, NOTIFICATIONS_TIMELINE),\n    FAVORITES(ListScope.USER, \"favorites\", R.string.timeline_title_favorites, 0, LIKED_TIMELINE),\n    /** Notes by the selected Actor (where he is an Author or an Actor only (e.g. for Reblog/Retweet).\n     * This Actor is not necessarily one of our Accounts */\n    SENT(ListScope.USER, \"sent\", R.string.sent, R.string.menu_item_user_messages, ACTOR_TIMELINE),\n    SENT_AT_ORIGIN(ListScope.ACTOR_AT_ORIGIN, \"sent_at_origin\", R.string.sent, R.string.menu_item_user_messages, ACTOR_TIMELINE),\n    /** Latest notes of every Friend of this Actor\n     * (i.e of every actor, followed by this Actor).\n     * So this is essentially a list of \"Friends\". See {@link org.andstatus.app.database.table.GroupMembersTable} */\n    FRIENDS(ListScope.USER, \"friends\", R.string.friends, R.string.friends_of, GET_FRIENDS),\n    FOLLOWERS(ListScope.USER, \"followers\", R.string.followers, R.string.followers_of, GET_FOLLOWERS),\n    GROUP(ListScope.USER, \"group\", R.string.group, R.string.group_notes, DUMMY_API),\n    PUBLIC(ListScope.ORIGIN, \"public\", R.string.timeline_title_public, 0, PUBLIC_TIMELINE),\n    EVERYTHING(ListScope.ORIGIN, \"everything\", R.string.timeline_title_everything, 0, DUMMY_API),\n    SEARCH(ListScope.ORIGIN, \"search\", R.string.options_menu_search, 0, SEARCH_NOTES),\n    PRIVATE(ListScope.USER, \"private\", R.string.timeline_title_private, 0, PRIVATE_NOTES),\n    NOTIFICATIONS(ListScope.USER, \"notifications\", R.string.notifications_title, 0, NOTIFICATIONS_TIMELINE),\n    DRAFTS(ListScope.USER, \"drafts\", R.string.timeline_title_drafts, 0, DUMMY_API),\n    OUTBOX(ListScope.USER, \"outbox\", R.string.timeline_title_outbox, 0, DUMMY_API),\n    ACTORS(ListScope.ORIGIN, \"users\", R.string.user_list, 0, DUMMY_API),\n    CONVERSATION(ListScope.ORIGIN, \"conversation\", R.string.label_conversation, 0, DUMMY_API),\n    COMMANDS_QUEUE(ListScope.ORIGIN, \"commands_queue\", R.string.commands_in_a_queue, 0, DUMMY_API),\n    MANAGE_TIMELINES(ListScope.ORIGIN, \"manages_timelines\", R.string.manage_timelines, 0, DUMMY_API);\n\n    /** Code - identifier of the type */\n    private final String code;\n    @StringRes\n    private final int titleResId;\n    @StringRes\n    public final int titleResWithParamsId;\n    /** Api routine to download this timeline */\n    private final ApiRoutineEnum connectionApiRoutine;\n    public final ListScope scope;\n\n    TimelineType(ListScope scope, String code, @StringRes int resId, @StringRes int resWithParamsId,\n                 ApiRoutineEnum connectionApiRoutine) {\n        this.scope = scope;\n        this.code = code;\n        this.titleResId = resId;\n        this.titleResWithParamsId = resWithParamsId;\n        this.connectionApiRoutine = connectionApiRoutine;\n    }\n\n    /** Returns the enum or UNKNOWN */\n    @NonNull\n    public static TimelineType load(String strCode) {\n        for (TimelineType value : TimelineType.values()) {\n            if (value.code.equals(strCode)) {\n                return value;\n            }\n        }\n        return UNKNOWN;\n    }\n\n    public static List<TimelineType> getDefaultMyAccountTimelineTypes() {\n        return defaultMyAccountTimelineTypes;\n    }\n\n    public static Set<TimelineType> getDefaultOriginTimelineTypes() {\n        return defaultOriginTimelineTypes;\n    }\n\n    @NonNull\n    public static TimelineType from(NotificationEventType event) {\n        switch (event) {\n            case OUTBOX:\n                return OUTBOX;\n            default:\n                return UNREAD_NOTIFICATIONS;\n        }\n    }\n\n    /** String to be used for persistence */\n    public String save() {\n        return code;\n    }\n    \n    @Override\n    public String toString() {\n        return \"timelineType:\" + code;\n    }\n\n    @Override\n    public String getCode() {\n        return code;\n    }\n\n    /** Localized title for UI */\n    @Override\n    public CharSequence title(Context context) {\n        if (titleResId == 0 || context == null) {\n            return this.code;\n        } else {\n            return context.getText(titleResId);        \n        }\n    }\n\n    public CharSequence title(Context context, Object ... params) {\n        return StringUtil.format(context, titleResWithParamsId, params);\n    }\n\n    public boolean isSyncable() {\n        return getConnectionApiRoutine() != DUMMY_API;\n    }\n\n    public boolean isSyncedAutomaticallyByDefault() {\n        switch (this) {\n            case PRIVATE:\n            case FAVORITES:\n            case HOME:\n            case UNREAD_NOTIFICATIONS:\n            case SENT:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public boolean isCombinedRequired() {\n        return this != SEARCH && isSelectable();\n    }\n\n    public boolean isSelectable() {\n        switch (this) {\n            case COMMANDS_QUEUE:\n            case CONVERSATION:\n            case FOLLOWERS:\n            case FRIENDS:\n            case MANAGE_TIMELINES:\n            case UNKNOWN:\n            case ACTORS:\n            case SENT_AT_ORIGIN:\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    private static final List<TimelineType> defaultMyAccountTimelineTypes = Stream.of(\n            DRAFTS,\n            FAVORITES,\n            HOME,\n            INTERACTIONS,\n            NOTIFICATIONS,\n            OUTBOX,\n            PRIVATE,\n            SENT,\n            UNREAD_NOTIFICATIONS\n    ).collect(Collectors.toList());\n\n    private static final Set<TimelineType> defaultOriginTimelineTypes = Stream.of(\n            EVERYTHING,\n            PUBLIC\n    ).collect(Collectors.toSet());\n\n    public boolean isAtOrigin() {\n        return scope == ListScope.ORIGIN || scope == ListScope.ACTOR_AT_ORIGIN;\n    }\n\n    public boolean isForUser() {\n        return scope == ListScope.USER || scope == ListScope.ACTOR_AT_ORIGIN;\n    }\n\n    public boolean canBeCombinedForOrigins() {\n        switch (this) {\n            case EVERYTHING:\n            case PUBLIC:\n            case SEARCH:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public boolean canBeCombinedForMyAccounts() {\n        switch (this) {\n            case PRIVATE:\n            case DRAFTS:\n            case FAVORITES:\n            case FOLLOWERS:\n            case FRIENDS:\n            case HOME:\n            case INTERACTIONS:\n            case NOTIFICATIONS:\n            case OUTBOX:\n            case SENT:\n            case UNREAD_NOTIFICATIONS:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public boolean isPersistable() {\n        switch (this) {\n            case COMMANDS_QUEUE:\n            case CONVERSATION:\n            case MANAGE_TIMELINES:\n            case UNKNOWN:\n            case ACTORS:\n            case SENT_AT_ORIGIN:\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    public boolean showsActivities() {\n        switch (this) {\n            case DRAFTS:\n            case EVERYTHING:\n            case FOLLOWERS:\n            case FRIENDS:\n            case GROUP:\n            case HOME:\n            case INTERACTIONS:\n            case NOTIFICATIONS:\n            case OUTBOX:\n            case PRIVATE:\n            case PUBLIC:\n            case SEARCH:\n            case SENT:\n            case SENT_AT_ORIGIN:\n            case UNREAD_NOTIFICATIONS:\n                return true;\n            case FAVORITES:\n            default:\n                return false;\n        }\n    }\n\n    public boolean isSubscribedByMe() {\n        switch (this) {\n            case PRIVATE:\n            case FAVORITES:\n            case FRIENDS:\n            case HOME:\n            case INTERACTIONS:\n            case NOTIFICATIONS:\n            case SENT:\n            case UNREAD_NOTIFICATIONS:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public boolean hasActorProfile() {\n        switch (this) {\n            case FAVORITES:\n            case FOLLOWERS:\n            case FRIENDS:\n            case SENT:\n            case GROUP:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override\n    public int getDialogTitleResId() {\n        return R.string.dialog_title_select_timeline;\n    }\n\n    public ApiRoutineEnum getConnectionApiRoutine() {\n        return connectionApiRoutine;\n    }\n}"
}