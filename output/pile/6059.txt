{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6059",
    "text": "Q:\n\nReturn one result from LINQ Query\n\nif you have a select LINQ query that should only return one result, do you have to have a foreach loop to get the result?\nOr is there a better way?\n\nA:\n\n// Will return a default value if no object is found in the DB\ndb.Table.SingleOrDefault(x => x.something == someParameter);\n\nor\n// Will throw an exception if records are not found\ndb.Table.Single(x => x.something == someParameter);\n\nThanks to Mehrdad for the comment...both lines have been updated.\nIf it's possible that your query could result in more than one record being returned, then (as mentioned in comments) Single() and SingleOrDefault() are the wrong methods to call. You would keep the same syntax, but call First() and FirstOrDefault() respectively.\n\nA:\n\nvar myLinqObj = db.MyObjects.Take(1).SingleOrDefault();\n\nA:\n\nYou can use either First or Single.\nFirst returns the first row, whether there are multiple rows or just the one.\nSingle expects only one row to be returned, and throws an exception if there are multiple rows.\nSingle is therefore potentially a better choice if you expect to only have one row, so that you'll see the problem immediately and can troubleshoot it.\n\n"
}