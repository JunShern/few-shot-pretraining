{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "9936",
    "text": "Q:\n\nWhat's correct way to use default constructor for XmlSerializer?\n\nCould you help me to find an error please?\nI'm trying to use XmlSerialize:\npublic static void ProcessLines(List<string> allLines, out pfm pfm)\n    {\n        ...\n        pfm = newPfm;\n        pfm forseril = new pfm(\"\");\n        XmlSerializer mySerializer = new XmlSerializer(typeof(pfm));\n        StreamWriter myWriter = new StreamWriter(\"myFileName.xml\");\n        mySerializer.Serialize(myWriter, forseril);\n        myWriter.Close();\n\n    }\n\nAnd here is that thing that I think should be a default constructor:\n [Serializable]\n    [XmlRoot(ElementName = \"Pfm\", Namespace = null)]\n    public class pfm\n    {\n\n        public pfm(string data)\n        {\n            this.data = data;\n        }\n\n        public string data;\n\n        public Ctl ctl\n        {\n            get;\n            set;\n        }\n\n        [XmlAttribute(AttributeName = \"Name\")]\n        public string Name\n        {\n            get;\n            set;\n        }\n\n    }\n\nI used an istruction from Microsoft site: instruction\n\nA:\n\nWhat XmlSerializer requires is a parameterless constructor -- a constructor with no arguments.  Thus your pfm needs a constructor as follows:\npublic class pfm\n{\n    pfm() : this(\"\") { }\n\n    public pfm(string data)\n    {\n        this.data = data;\n    }\n}\n\nIt doesn't need to be public.  Sample fiddle.\n\n"
}