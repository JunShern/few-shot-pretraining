{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8783",
    "text": "Q:\n\nAngularJS with TypeScript $resource error: \"Response does not match configured parameter\"\n\nI have an AngularJS + TypeScript app and I keep getting the following error:\n\nError: $resource:badcfg\n  Response does not match configured parameter\nError in resource configuration for action: Expected response to contain an get but got an object (Request: array GET)\n\nMy AngularJS version is 1.4.8 and TypeScript version is 3.0.1. My tsconfig.json looks like this:\n{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n  \"allowJs\": true,\n  \"lib\": [ \"dom\", \"es5\", \"scripthost\" ],\n  \"noImplicitAny\": true,\n  \"noEmitOnError\": true,\n  \"removeComments\": false,\n  \"sourceMap\": true,\n  \"target\": \"es5\"\n},\n\"include\": [\n  \"App/TypeScriptCode/**/*.ts\",\n  \"typings\"\n],\n\"exclude\": [\n  \"node_modules\",\n  \"definitions\",\n  \"wwwroot\",\n  \"App/Old\",\n  \"Scripts\",\n  \"*.js\"\n]\n}\n\nAnd here is my package.json\n{\n  \"dependencies\": {\n  \"@types/angular\": \"^1.6.49\",\n  \"@types/angular-resource\": \"^1.5.14\",\n  \"@types/uuid\": \"^3.4.3\",\n  \"npm\": \"^6.3.0\",\n  \"ts-node\": \"^7.0.0\"\n},\n\"devDependencies\": {\n  \"angular\": \"1.5.0\",\n  \"bootstrap\": \"3.3.6\",\n  \"grunt\": \"0.4.5\",\n  \"grunt-bower-task\": \"0.4.0\",\n  \"typescript\": \"^3.0.1\",\n  \"typings\": \"1.3.0\"\n},\n\"name\": \"my-app\",\n\"private\": true,\n\"scripts\": {\n\"demo\": \"./node_modules/.bin/ts-node ./test.ts\"\n},\n\"version\": \"1.0.0\"\n}\n\nThe error happens in function GetEmployeeTypes in the following controller:\nnamespace App {\n'use strict';\n\nclass EmployeeTypeController {\n    noRecords: boolean;\n    employeeTypeApi: IEmployeeTypeApi;\n    storage: ngStorage.IStorageService;\n\n    ///\n    public constructor($localStorage: ngStorage.IStorageService, employeeTypeApi: IEmployeeTypeApi) {\n        this.noRecords = true;\n        this.employeeTypeApi = employeeTypeApi;\n        this.storage = $localStorage;\n\n        this.GetEmployeeTypes();\n    }\n\n    ///\n    public GetEmployeeTypes(): void {\n\n        const employeeTypes: IEmployeeType[] = this.employeeTypeApi.employeeType.get(function success(): void {\n            this.storage.employeeTypes = employeeTypes;\n        });\n    };\n}\n\nangular\n    .module('App')\n    .controller('EmployeeTypeController', EmployeeTypeController);\n}\n\nThe api service EmployeeTypeApi for loading employee types from the backend looks like this:\nnamespace App {\n'use strict';\n\nexport interface IEmployeeTypeApi {\n    employeeType: IEmployeeTypeClass;\n}\n\nexport class EmployeeTypeApi implements IEmployeeTypeApi {\n\n    constructor(public $resource: angular.resource.IResourceService) {}\n\n    publishDescriptor: angular.resource.IActionDescriptor = {\n        method: 'GET',\n        isArray: true\n    };\n\n    public employeeType: IEmployeeTypeClass = this.$resource<IEmployeeType[], IEmployeeTypeClass>('https://localhost:44300/api/employeetypes', null, {\n        publish: this.publishDescriptor\n    });\n}\n\n// Now register the service with the Angular app\nangular\n    .module('App')\n    .service('employeeTypeApi', EmployeeTypeApi);\n}\n\nAnd finally, here are IEmployeeType and IEmployeeTypeClass:\nnamespace App {\n\nexport interface IEmployeeType extends angular.resource.IResource<IEmployeeType> {\n    id: number;\n    clientId: number;\n    employeeTypeName: string;\n    description: string;\n\n    $publish(): IEmployeeType;\n    $unpublish(): IEmployeeType;\n}\n}\n\nnamespace App {\n\nexport interface IEmployeeTypeClass extends angular.resource.IResourceClass<IEmployeeType[]> {\n    get(): IEmployeeType[] ;\n    get(onSuccess: Function): IEmployeeType[];\n\n    publish(): IEmployeeType[];\n}\n}\n\nSo what I am trying to achieve here is to load an array of IEmployeeType objects from the backend. The backend itself is an ASP.NET Web API 2 service, consisting of a number of controllers. I've verified that the controller for loading Employee Type data is correctly called and it does return an array of EmployeeType instances, meaning the problem is most likely somewhere in the front end code.\nAs you can see in EmployeeTypeApi, I've clearly set the isArray flag to \"true\", so I am not sure why the error is occurring. What am I doing wrong here?\n\nA:\n\nThe problem was the following, in EmployeeTypeApi I have a definition for how the \"publish\" method should behave, i.e. this:\npublishDescriptor: angular.resource.IActionDescriptor = {\n        method: 'GET',\n        isArray: true\n    };\n\nHowever, in my EmployeeTypeController, I call the \"get\" method instead:\nconst employeeTypes: IEmployeeType[] = this.employeeTypeApi.employeeType.get(function success(): void {\n        this.storage.employeeTypes = employeeTypes;\n    });\n\nSince there was no definition of how \"get\" should behave, i.e. what request method to use and what data type to expect, it defaulted to expecting an object and thus it produced the error I outlined in my original post.\nOnce I replaced \"get\" with \"publish\" in the controller, the error went away. Of course, the better solution is to set the \"isArray\" flag for \"get\" to true, but either way, the problem is solved now.\n\n"
}