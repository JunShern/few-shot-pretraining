{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['here are some of the attempts I made for buttons/actions. (0.181)']."
        }
    ],
    "doc_id": "3781",
    "text": "Q:\n\nSend data from Telerik Grid to new tab/page on button click\n\nI have a Telerik Grid as below ( I'm relatively new to MVC and brand new to Telerik controls).  The grid is a partial view that gets updated from a list of search criteria.\n@(Html.Kendo().Grid((IEnumerable<MyModel>)Model.MyModel)\n    .Name(\"grid\")\n    .DataSource(ds => ds.Ajax()\n        .Model(mod =>\n            {\n                mod.Id(m => m.Id);\n                mod.Field(p => p.Name).Editable(false);\n            }))\n\n    .Columns(columns =>\n    {\n        columns.Template(@<text></text>).ClientTemplate(\"<input type='checkbox' #= IsSelected ? checked='checked':'' # class='chkbx' value='#= Id#' name='SelectedArea' />\")\n                .HeaderTemplate(\"<input type='checkbox' id='masterCheckBox' onclick='checkAll(this)'/>\").Width(20);\n        columns.Bound(p => p.Name).Filterable(false).Width(100);\n    })\n                            .Editable(ed => ed.Mode(GridEditMode.InCell))\n                            .Pageable()\n                            .Sortable()\n                            .Scrollable()\n                            .Filterable()\n)\n\nThe users need to be able to select from the grid with the check boxes, then click a button which should pop-up (new window/new tab) with a report generated from the selected items in the grid, leaving the original page alone.\nIf I submit the page, it sends the selected list back but loses the partial page of the Grid (and all the selected items.  If I just create a link and open a new page it doesn't post any of the data so I don't know which ones were selected. here are some of the attempts I made for buttons/actions.  I suspect this is much simpler than I am finding it to be, but I can't see the forest through the trees...\n<input type=\"submit\" name=\"Command\" value=\"Print Call List\" formtarget=\"_blank\" />\n<input type=\"submit\" name=\"Command\" value=\"Print Call List\" onclick=\"location.href='@Url.Action(\"CallList\", \"Reports\", new { target=\"_blank\" })'\" />\n@Html.ActionLink(\"Print Call List\", \"CallList\", \"Reports\", null, new { target = \"_blank\" })\n\nA:\n\nFinally figured it out myself.\nI am still submitting the form just like clicking on the search button.  Using a different button I validate what is asked for, (search vs. print list), if it is searching, continue to do what it was before.  If a report is requested,then I added a flag to the view object called ShowCallList\n        if (Request.IsAjaxRequest())\n        {\n            if (\"Print Call List\" == command)\n            {\n                TempData.Add(\"SelectedArea\", searchModel.SelectedArea);\n                searchModel.ShowCallList = true;\n            }\n            searchModel.SearchResults = ExecuteSearch(searchModel);\n            return PartialView(\"_SearchResults\", searchModel);\n        }\n\nthen added the following code to the view. \n@if (Model.ShowCallList)\n{\n    @Html.Raw(\"window.open('\") @Url.Action(\"CallList\", \"Reports\", new { target=\"_blank\" }) @Html.Raw(\"')\");\n}\n\nIt will print out an open window command and the url has a target of blank to open in a new window.  I put the needed list of id's into the TempData to pass it to the report page.  \nSo the report gets the needed parameters from the TempData when it is called when the search page reloads.  I also had to make a small modification to the search method to recheck the check boxes in the search results grid so it appears to the end user that only the new page was opened with the requested report.\n                IsSelected = searchModel.SelectedArea.Contains(item.ID),\n\n"
}