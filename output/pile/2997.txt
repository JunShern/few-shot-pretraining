{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['The additional approach is the speeding of the lookup items, which have a short circuit if the index is outside the area of a possible finding. (0.197)']."
        }
    ],
    "doc_id": "2997",
    "text": "Q:\n\nRange-based intersection of n-number of arrays\n\nLets say I have the following three arrays:\n[\n  [100, 110, 200, 300, 400],\n  [40, 90, 99, 150, 200],\n  [101, 202, 404, 505]\n]\n\nhow would I go about writing a function getIntersectingRanges(arrays, range) which would return all ranges of max 'width' of range containing 1 or more elements from all arrays.\nSo, if range=15 then it would return [[100, 90, 99, 101], [100, 110, 99, 101], [200, 200, 202]]. Each of those arrays contains at least one element from each input range and the total 'width' of the range is less or equal to 15 (first one is 11, second one 11 as well and the third one just 3).\nIt's conceptually incredibly simple but I have been having a really hard to figuring out how to write such a function. Like I am not looking for a fully fleshed out solution, all I need is the basis of the algorithm allowing me to do so (though I will obviously also gladly accept a fully written function).\n\nAs some people seem to have a problem understanding this, let me give a few more simple examples (though writing these by hand is a bit hard, so excuse me if I make a mistake somewhere):\n\ninput:\u00a0\u00a0\u00a0[[10, 20, 30, 40, 50, 60, 70, 80, 90], [55, 84]]\nrange:\u00a0\u00a05\noutput: [[50, 55], [55, 60], [80, 84]]\ninput:\u00a0\u00a0\u00a0[[10, 20, 30], [40, 50]]\nrange:\u00a0\u00a010\noutput: [[30, 40]]\ninput:\u00a0\u00a0\u00a0[[15, 30, 699], [16, 800], [10, 801], [11, 803]]\nrange:\u00a0\u00a010\noutput: [[15, 16, 10, 11]]\n\nSo my approach has been to first only take the first two arrays, next search for all elements from the first array in the second array \u00b1 range. So far it seems to make sense, but given this start it seems impossible to match both the first and the second result from the example above... so any help would be greatly appreciated.\n\nA:\n\nThis solution features an object with the values as key and as value the indices of the array of the given arrays.\nThe additional approach is the speeding of the lookup items, which have a short circuit if the index is outside the area of a possible finding.\n\nExample\nGiven array:\n[\n    [100, 110, 200, 300, 400],\n    [40, 90, 99, 150, 200],\n    [101, 202, 404, 505]\n]\n\nGiven range: 15\nFirst sort the given values ascending.  \nThen iterate from the smallest value to the highest and look if values in range are in all arrays.  \nArray Values                                               Comment\n----- ---------------------------------------------------- --------------------------------------\n0                100     110     200     300 400\n1     40  90  99             150 200\n2                    101             202         404 505\n       1                                                   here is no other value in this range\n           1   1   0   2                                <- first group, values are in all arrays\n               1   0   2   0                            <- second group, values are in all arrays\n                   0   2   0                               only values of two arrays\n                       2   0                               only values of two arrays\n                               1                           here is no other value in this range\n                                  01   2                <- third group, values are in all arrays\n                                       2                   here is no other value in this range\n                                           0               here is no other value in this range\n                                               0   2       only values of two arrays\n                                                      2    here is no other value in this range\n\nResult:\n[\n    [[100], [90, 99], [101]],\n    [[100, 110], [99], [101]],\n    [[200], [200], [202]]\n]\n\nfunction intersection(arrays, range) {\r\n    var result = [],                   // result array\r\n        items = [],                    // all distinct items from arrays\r\n        indices = {},                  // object for the array indices\r\n        temp,                          // temp array, for pushing a result\r\n        i,                             // counter for pushing values to temp\r\n        left = 0, pos = 0, lastPos,    // look up range\r\n        allArrays,                     // temporary array for indicating if index is included\r\n        arraysLength = arrays.length,  // arrays length\r\n        itemLength,                    // length of all items\r\n        leftValue,                     // literally the value from the left range\r\n        emptyArrays;                   // template for the test if all arrays are used\r\n\r\n    emptyArrays = Array.apply(Array, { length: arraysLength });\r\n    arrays.forEach(function (a, i) {\r\n        a.forEach(function (item) {\r\n            indices[item] = indices[item] || [];\r\n            indices[item].push(i);\r\n        });\r\n    });\r\n    items = Object.keys(indices).map(Number).sort(function (a, b) { return a - b; });\r\n    itemLength = items.length;\r\n    do {\r\n        temp = [];\r\n        allArrays = emptyArrays.slice(0);\r\n        leftValue = items[left];\r\n        pos = left;\r\n        while (pos < itemLength && items[pos] <= range + leftValue) {\r\n            temp.push(items[pos]);\r\n            indices[items[pos]].forEach(function (i) {\r\n                allArrays[i] = true;\r\n            });\r\n            pos++;\r\n        }\r\n        pos !== lastPos && allArrays.every(function (a) { return a; }) && result.push(temp);\r\n        left++;\r\n        lastPos = pos;\r\n    } while (pos < itemLength);\r\n    return result;\r\n}\r\n\r\nfunction test(arrays, range) {\r\n    var result = intersection(arrays, range);\r\n    document.write(\"<br>arrays:\", JSON.stringify(arrays));\r\n    document.write(\"<br>range:\", range);\r\n    document.write(\"<br>result:\", JSON.stringify(result));\r\n    document.write(\"<br>---\");\r\n}\r\n\r\n\r\ntest([[100, 110, 200, 300, 400], [40, 90, 99, 150, 200], [101, 202, 404, 505]], 15);\r\ntest([[10, 20, 30, 40, 50, 60, 70, 80, 90], [55, 84]], 5);\r\ntest([[10, 20, 30], [40, 50]], 10);\r\ntest([[15, 30, 699], [16, 800], [10, 801], [11, 803]], 10);\r\n\r\n// taken from the answer of http://stackoverflow.com/a/32868439/1447675 from DzinX\r\nvar LARGE_TEST_SIZE = 1000,\r\n    largeTest = function () {\r\n        var array = [];\r\n        for (var i = 0; i < LARGE_TEST_SIZE; ++i) {\r\n            var innerArray = [];\r\n            for (var j = 0; j < LARGE_TEST_SIZE; ++j) {\r\n                innerArray.push((i + j) * 10);\r\n            }\r\n            array.push(innerArray);\r\n        }\r\n        return array;\r\n    }(),\r\n    startTime;\r\n\r\nstartTime = Date.now();\r\ndocument.write('<br>' + intersection(largeTest, 20).length + '<br>');\r\ndocument.write('Duration [ms]: ' + (Date.now() - startTime) + '<br>');\n\nComparision with the solution from DzinX\nI just changed the console.log to document.write('<br>' ....\nPlease watch Duration in the result windows.\n\nfunction findRanges(arrays, range) {\r\n\r\n    // Gather all items into one array:\r\n    var items = [];\r\n    arrays.forEach(function (array, arrayNumber) {\r\n        array.forEach(function (item) {\r\n            items.push({\r\n                value: item,\r\n                arrayNumber: arrayNumber\r\n            });\r\n        });\r\n    });\r\n\r\n    items.sort(function (left, right) {\r\n        return left.value - right.value;\r\n    });\r\n\r\n    var countByArray = [];\r\n    arrays.forEach(function () {\r\n        countByArray.push(0);\r\n    });\r\n\r\n    var arraysIncluded = 0;\r\n\r\n    var i = 0,\r\n      j = 0, // inclusive\r\n      spread = 0,\r\n      arrayCount = arrays.length,\r\n      itemCount = items.length,\r\n      result = [];\r\n\r\n    function includeItem(pos) {\r\n        var arrayNumber = items[pos].arrayNumber;\r\n        ++countByArray[arrayNumber];\r\n        if (countByArray[arrayNumber] === 1) {\r\n            ++arraysIncluded;\r\n        }\r\n    }\r\n\r\n    function excludeItem(pos) {\r\n        var arrayNumber = items[pos].arrayNumber;\r\n        --countByArray[arrayNumber];\r\n        if (countByArray[arrayNumber] === 0) {\r\n            --arraysIncluded;\r\n        }\r\n    }\r\n\r\n    function allArraysIncluded() {\r\n        return arraysIncluded === arrayCount;\r\n    }\r\n\r\n    function extractValue(item) {\r\n        return item.value;\r\n    }\r\n\r\n    function saveSpread(start, end) {\r\n        result.push(items.slice(start, end).map(extractValue));\r\n    }\r\n\r\n    // First item is already included.\r\n    includeItem(0);\r\n\r\n    while (j < (itemCount - 1)) {\r\n\r\n        // grow j while you can\r\n        while ((spread <= range) && (j < (itemCount - 1))) {\r\n            ++j;\r\n            spread += items[j].value - items[j - 1].value;\r\n            includeItem(j);\r\n        }\r\n        if (spread <= range) {\r\n            // We ran out of items and the range is still OK, break out early:\r\n            break;\r\n        }\r\n        // Don't include the last item for checking:\r\n        excludeItem(j);\r\n        if (allArraysIncluded()) {\r\n            saveSpread(i, j);\r\n        }\r\n\r\n        // Include the violating item back and try to reduce the spread:\r\n        includeItem(j);\r\n        while ((spread > range) && (i < j)) {\r\n            spread -= items[i + 1].value - items[i].value;\r\n            excludeItem(i);\r\n            ++i;\r\n        }\r\n    }\r\n\r\n    // last check after exiting the loop (j === (itemCount - 1))\r\n    if (allArraysIncluded()) {\r\n        saveSpread(i, j + 1);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nfunction test(arrays, range) {\r\n    var result = findRanges(arrays, range);\r\n    document.write(\"<br>arrays:\", JSON.stringify(arrays));\r\n    document.write(\"<br>range:\", range);\r\n    document.write(\"<br>result:\", JSON.stringify(result));\r\n    document.write(\"<br>---\");\r\n}\r\n\r\n\r\ntest([[100, 110, 200, 300, 400], [40, 90, 99, 150, 200], [101, 202, 404, 505]], 15);\r\ntest([[10, 20, 30, 40, 50, 60, 70, 80, 90], [55, 84]], 5);\r\ntest([[10, 20, 30], [40, 50]], 10);\r\ntest([[15, 30, 699], [16, 800], [10, 801], [11, 803]], 10);\r\n\r\n// A large test (1 million items):\r\nvar LARGE_TEST_SIZE = 1000;\r\n\r\nvar largeTest = (function () {\r\n    var array = [];\r\n    for (var i = 0; i < LARGE_TEST_SIZE; ++i) {\r\n        var innerArray = [];\r\n        for (var j = 0; j < LARGE_TEST_SIZE; ++j) {\r\n            innerArray.push((i + j) * 10);\r\n        }\r\n        array.push(innerArray);\r\n    }\r\n    return array;\r\n})();\r\nvar startTime\r\nstartTime = Date.now();\r\ndocument.write('<br>' + findRanges(largeTest, 20).length); // 3        \r\ndocument.write('<br>Duration [ms]: ' + (Date.now() - startTime));\n\nSpeed comparison, with different browsers\nMachine: Win 7/64, Core i7-2600 3.40 GHz\nVersion      IE 11       Chrome 45.0  Firefox 40.0.3\n------- -------------- -------------- --------------\nDzinX        375 ms         688 ms        1323 ms\nNina         335 ms         122 ms         393 ms\n\n"
}