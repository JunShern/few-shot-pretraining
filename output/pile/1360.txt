{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1360",
    "text": "Q:\n\n@InitBinder in spring boot not working with @RequestBody\n\nIf I use @InitBinder without limiting it,it is working fine with @RequestBody to validate my objects.\n@InitBinder\nprivate void initBinder(WebDataBinder binder) {\n    binder.setValidator(validator);\n}\n\n@RequestMapping(method=RequestMethod.POST)\npublic CustomerQuickRegisterEntity saveNewCustomer(@Valid @RequestBody  CustomerQuickRegisterEntity customerEntity,BindingResult result)\n{\n    if(result.hasErrors())\n    {\n        return new CustomerQuickRegisterEntity();\n    }\n    return customerQuickRegisterRepository.save(customerEntity);\n\n}\n\nBut problem is that when i limit it to just one object by doing it as @InitBinder(\"customerEntity\") it is not validating the object. So I have searched through stackoverflow and found that @InitBinding only works with objects annotated with @ModelAttribute. Then my question is that it is working fine with @RequestBody when I use it as @InitBinder but does not work well when I use it as @InitBinder(\"customerEntity\") ...why is it so?\nIs there any other way to validate Objects(Not properties of object Individually) associated with @RequestBody\n\nA:\n\nThis is an old question, but I've managed to get the @InitBinder annotation to bind my custom Validator to a @Valid @RequestBody parameter like this: \n@InitBinder\nprivate void bindMyCustomValidator(WebDataBinder binder) {\n    if (\"entityList\".equals(binder.getObjectName())) {\n        binder.addValidators(new MyCustomValidator());\n    }\n}\n\nIf you try to filter the bound argument by setting the value of the annotation, then it won't work for a @RequestBody argument. So here I check the object name instead. My method parameter is actually called entities, but Spring had decided to call it entityList. I had to debug it to discover this.\n\nA:\n\nFrom the docs,\n\nDefault is to apply to all command/form attributes and all request\n  parameters processed by the annotated handler class. Specifying model\n  attribute names or request parameter names here restricts the\n  init-binder method to those specific attributes/parameters, with\n  different init-binder methods typically applying to different groups\n  of attributes or parameters.\n\nPlease have a look here\n\n"
}