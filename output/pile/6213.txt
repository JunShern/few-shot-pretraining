{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['-', '-', '-', '-', '-', '-', '-', '-']."
        }
    ],
    "doc_id": "6213",
    "text": "Q:\n\nRead .txt file into 2D Array\n\nThere are a few of these topics out there, but this problem has a slight twist that makes it different. \nI'm focused on only half of a larger problem. I'm sure many of you are aware of the magic square problem.\n\nPrompt:\n  Assume a file with lines and numbers on each line like the square shown. Write a program that reads info into a two dimensional array of intS. The program should determine if the matrix is a magic square or not.\n\nWorking Solution:\npublic static int[][] create2DIntMatrixFromFile(String filename) throws Exception {\nint[][] matrix = {{1}, {2}};\n\nFile inFile = new File(filename);\nScanner in = new Scanner(inFile);\n\nint intLength = 0;\nString[] length = in.nextLine().trim().split(\"\\\\s+\");\n  for (int i = 0; i < length.length; i++) {\n    intLength++;\n  }\n\nin.close();\n\nmatrix = new int[intLength][intLength];\nin = new Scanner(inFile);\n\nint lineCount = 0;\nwhile (in.hasNextLine()) {\n  String[] currentLine = in.nextLine().trim().split(\"\\\\s+\"); \n     for (int i = 0; i < currentLine.length; i++) {\n        matrix[lineCount][i] = Integer.parseInt(currentLine[i]);    \n            }\n  lineCount++;\n }                                 \n return matrix;\n}\n\npublic static boolean isMagicSquare(int[][] square) {\n\n  return false;\n}\n\nHere is my (old) code for reading info from a text file into a 2D array:\npublic static int[][] create2DIntMatrixFromFile(String filename) throws Exception {\n    int[][] matrix = {{1}, {2}};\n    File inFile = new File(filename);\n    Scanner in = new Scanner(inFile);\n    in.useDelimiter(\"[/n]\");\n\n    String line = \"\";\n    int lineCount = 0;\n\n    while (in.hasNextLine()) {\n        line = in.nextLine().trim();\n        Scanner lineIn = new Scanner(line);\n        lineIn.useDelimiter(\"\");\n\n        for (int i = 0; lineIn.hasNext(); i++) {\n            matrix[lineCount][i] = Integer.parseInt(lineIn.next());\n            lineIn.next();\n        }\n\n        lineCount++;\n    }\n\n    return matrix;\n}\n\npublic static boolean isMagicSquare(int[][] square) {\n    return false;\n}\n\nAnd here is the text file I am reading from. It is in the shape of a 9x9 2D array, but the program must accommodate an array of ambiguous size. \n  37  48  59  70  81   2  13  24  35 \n  36  38  49  60  71  73   3  14  25 \n  26  28  39  50  61  72  74   4  15 \n  16  27  29  40  51  62  64  75   5 \n   6  17  19  30  41  52  63  65  76 \n  77   7  18  20  31  42  53  55  66 \n  67  78   8  10  21  32  43  54  56 \n  57  68  79   9  11  22  33  44  46 \n  47  58  69  80   1  12  23  34  45 \n\nThere are two spaces proceeding each line on purpose. \nBefore I state the exact problem, this is a homework template so the method declaration and variable initialization was pre-determined.\nI'm not positive that the method even correctly creates a 2D Array from the file because I can't run it yet. The issue is that for some reason \"matrix\" was initialized with 1 column and 2 rows. For what reason I'm not sure, but in order to fill an array with the numbers from the file I need to create a 2D array with dimensions equal to the number of values in a line. \nI previously had written code to create a new 2D array \nint[line.length()][line.length()]\n\nbut it created a 36x36 array because that's how many individual characters are in one line. I have a feeling it's as simple as looping through the first line and having a counter keep track of each sequence of numbers separated by a zero. \nTo me, that solution seems too inefficient and time consuming just to find the dimensions of the new array. What's the best way to accomplish this? Without using ArrayLists as I have to rewrite this program after using ArrayLists. \n\nA:\n\nI produced the following 2D array from the file you provided:\n 37 | 48 | 59 | 70 | 81 |  2 | 13 | 24 | 35\n----+----+----+----+----+----+----+----+----\n 36 | 38 | 49 | 60 | 71 | 73 |  3 | 14 | 25\n----+----+----+----+----+----+----+----+----\n 26 | 28 | 39 | 50 | 61 | 72 | 74 |  4 | 15\n----+----+----+----+----+----+----+----+----\n 16 | 27 | 29 | 40 | 51 | 62 | 64 | 75 |  5\n----+----+----+----+----+----+----+----+----\n  6 | 17 | 19 | 30 | 41 | 52 | 63 | 65 | 76\n----+----+----+----+----+----+----+----+----\n 77 |  7 | 18 | 20 | 31 | 42 | 53 | 55 | 66\n----+----+----+----+----+----+----+----+----\n 67 | 78 |  8 | 10 | 21 | 32 | 43 | 54 | 56\n----+----+----+----+----+----+----+----+----\n 57 | 68 | 79 |  9 | 11 | 22 | 33 | 44 | 46\n----+----+----+----+----+----+----+----+----\n 47 | 58 | 69 | 80 |  1 | 12 | 23 | 34 | 45\n\nThe array figures out the size of the square when it reads the first line of the file. This is very dynamic. Its works as long as the input file is a perfect square. I have no further error handling.\nHere is a simple approach which should adhere to your guidelines.\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\npublic class ReadMagicSquare {\n    public static int[][] create2DIntMatrixFromFile(String filename) throws Exception {\n        int[][] matrix = null;\n\n        // If included in an Eclipse project.\n        InputStream stream = ClassLoader.getSystemResourceAsStream(filename);\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(stream));\n\n        // If in the same directory - Probably in your case...\n        // Just comment out the 2 lines above this and uncomment the line\n        // that follows.\n        //BufferedReader buffer = new BufferedReader(new FileReader(filename));\n\n        String line;\n        int row = 0;\n        int size = 0;\n\n        while ((line = buffer.readLine()) != null) {\n            String[] vals = line.trim().split(\"\\\\s+\");\n\n            // Lazy instantiation.\n            if (matrix == null) {\n                size = vals.length;\n                matrix = new int[size][size];\n            }\n\n            for (int col = 0; col < size; col++) {\n                matrix[row][col] = Integer.parseInt(vals[col]);\n            }\n\n            row++;\n        }\n\n        return matrix;\n    }\n\n    public static void printMatrix(int[][] matrix) {\n        String str = \"\";\n        int size = matrix.length;\n\n        if (matrix != null) {\n            for (int row = 0; row < size; row++) {\n                str += \" \";\n                for (int col = 0; col < size; col++) {\n                    str += String.format(\"%2d\",  matrix[row][col]);\n                    if (col < size - 1) {\n                        str += \" | \";\n                    }\n                }\n                if (row < size - 1) {\n                    str += \"\\n\";\n                    for (int col = 0; col < size; col++) {\n                        for (int i = 0; i < 4; i++) {\n                            str += \"-\";\n                        }\n                        if (col < size - 1) {\n                            str += \"+\";\n                        }\n                    }\n                    str += \"\\n\";\n                } else {\n                    str += \"\\n\";\n                }\n            }\n        }\n\n        System.out.println(str);\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = null;\n\n        try {\n            matrix = create2DIntMatrixFromFile(\"square.txt\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        printMatrix(matrix);\n    }\n}\n\nThis approach is more refined and optimized.\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\npublic class ReadMagicSquare {\n\n    private int[][] matrix;\n    private int size = -1;\n    private int log10 = 0;\n    private String numberFormat;\n\n    public ReadMagicSquare(String filename) {\n        try {\n            readFile(filename);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void readFile(String filename) throws IOException {\n        // If included in an Eclipse project.\n        InputStream stream = ClassLoader.getSystemResourceAsStream(filename);\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(stream));\n\n        // If in the same directory - Probably in your case...\n        // Just comment out the 2 lines above this and uncomment the line\n        // that follows.\n        //BufferedReader buffer = new BufferedReader(new FileReader(filename));\n\n        String line;\n        int row = 0;\n\n        while ((line = buffer.readLine()) != null) {\n            String[] vals = line.trim().split(\"\\\\s+\");\n\n            // Lazy instantiation.\n            if (matrix == null) {\n                size = vals.length;\n                matrix = new int[size][size];\n                log10 = (int) Math.floor(Math.log10(size * size)) + 1;\n                numberFormat = String.format(\"%%%dd\", log10);\n            }\n\n            for (int col = 0; col < size; col++) {\n                matrix[row][col] = Integer.parseInt(vals[col]);\n            }\n\n            row++;\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuffer buff = new StringBuffer();\n\n        if (matrix != null) {\n            for (int row = 0; row < size; row++) {\n                buff.append(\" \");\n                for (int col = 0; col < size; col++) {\n                    buff.append(String.format(numberFormat,  matrix[row][col]));\n                    if (col < size - 1) {\n                        buff.append(\" | \");\n                    }\n                }\n                if (row < size - 1) {\n                    buff.append(\"\\n\");\n                    for (int col = 0; col < size; col++) {\n                        for (int i = 0; i <= log10 + 1; i++) {\n                            buff.append(\"-\");\n                        }\n                        if (col < size - 1) {\n                            buff.append(\"+\");\n                        }\n                    }\n                    buff.append(\"\\n\");\n                } else {\n                    buff.append(\"\\n\");\n                }\n            }\n        }\n\n        return buff.toString();\n    }\n\n    public static void main(String[] args) {\n        ReadMagicSquare square = new ReadMagicSquare(\"square.txt\");\n        System.out.println(square.toString());\n    }\n}\n\n"
}