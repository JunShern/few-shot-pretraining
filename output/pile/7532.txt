{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['The last few days I spend a lot of time to read through several SO-questions and tutorials. (0.195)', 'After a while of reading some sites and questions from SO, I went with the following site to get the first part of the login. (0.174)']."
        }
    ],
    "doc_id": "7532",
    "text": "Q:\n\nFlutter: multiple firebase projects in one app but showing incorrect data\n\nThe last few days I spend a lot of time to read through several SO-questions and tutorials. What I'm trying to achieve is, that a user of my flutter app can choose a firebase project and log in with email/password. After the login, obviously, the correct data of the corresponding database should be shown. And that is where I fail.\nAfter a while of reading some sites and questions from SO, I went with the following site to get the first part of the login.\nhttps://firebase.googleblog.com/2016/12/working-with-multiple-firebase-projects-in-an-android-app.html\nAfter working through this article, I was able to successfully log in to my defined firebase projects. \nHow did I know that the login was successful? I compared the user-uids from the projects with the print statement from my app in the console. That was the prove my configuration for the non-default project is correct.\nBut now the main problem which I can't solve. \nAfter the login, the data is always of the default firebase project from the google-service.json.\nFor state management, I choose the provider package, as they mentioned in the I/O '19. So inside my main.dart, I wrap the whole application with MultipleProvider:\nWidget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider<LoginModel>(\n          builder: (_) => LoginModel(),\n        ),\n        ChangeNotifierProvider<Auth>(\n          builder: (_) => Auth(),\n        ),\n      ],\n      child: MaterialApp(\n        title: 'Breaking News Tool',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        home: RootPage(),\n      ),\n    );\n  }\n\nThe provided Auth class is a service that connects to firebase sdk and also configure non-default apps to create the needed firebase auth\nabstract class BaseAuth {\n\n  getDefaultAuth();\n\n  getAbnAuth();\n...\n}\n\nclass Auth with ChangeNotifier implements BaseAuth {\n ...\n  Auth() {\n    _configureAbnApp();\n    _configureProdApp();\n  }\n\n  getDefaultAuth() {\n    _firebaseAuth = FirebaseAuth.instance;\n  }\n\n  getAbnAuth() {\n    _firebaseAuth = FirebaseAuth.fromApp(_abnApp);\n  }\n\n  _configureAbnApp() {\n    FirebaseOptions abnOptions = FirebaseOptions(\n        databaseURL: 'https://[project-id].firebaseio.com',\n        apiKey: 'AIzaSxxxxxxxxxxxxxxxx,\n        googleAppID: '1:10591xxxxxxxxxxxxxxxxxxx');\n    FirebaseApp.configure(name: 'abn_database', options: abnOptions)\n        .then((result) {\n      _abnApp = result;\n    });\n  }\n...\n}\n\nAfter a log in the app redirects the user to the home_page (StatefulWidget). Here I use a snapshot of the database to show data.\n_stream = Firestore.instance.collection(collection).snapshots();\n...\nCenter(\n        child: Container(\n          padding: const EdgeInsets.all(10.0),\n          child: StreamBuilder<QuerySnapshot>(\n            stream: _stream,\n            builder:\n                (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {\n              if (snapshot.hasError)\n                return Text('Error: ${snapshot.error}');\n              switch (snapshot.connectionState) {\n                case ConnectionState.waiting:\n                  return Text('Loading...');\n                default:\n                  return ListView(\n                    children: snapshot.data.documents\n                        .map((DocumentSnapshot document) {\n                      return CustomCard(\n                        docID: document.documentID,\n                        title: document[title],\n                        message: document[message],\n                        fromDate: document[fromDate],\n                        endDate: document[endDate],\n                        disableApp: document[disableApp],\n                      );\n                    }).toList(),\n                  );\n              }\n            },\n          ),\n        ),\n      ),\n\nIn the beginning, I only had one project to connect to and the data was correct. But now I successfully connect to another project with the correct user-uid, but the data is always from the default project which is defined by the google-service.json.\nAnd at this point, I have no clue why this happens. \nDid anyone have an advice or idea?\n\nA:\n\nYou create your _stream based on Firestore.instance, which will give you the default firebase app, as documented in the docs:\n/// Gets the instance of Firestore for the default Firebase app.\nstatic Firestore get instance => Firestore();\n\nTherefore you always get the data from the default project. \nTo fix this you need to create your firestore using the app created by FirebaseApp.configure().\nSo replace:\n_stream = Firestore.instance.collection(collection).snapshots();\n\nwith\n_stream = Firestore(app: _abnApp).collection(collection).snapshots();\n\n"
}