{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['In order to understand how EF Core tracks these objects, it is useful to think that a primary key is created as a shadow property for the owned type. (0.196)', 'It is common to use a complex key for these type of entities incorporating the foreign key to the owner and an additional unique property that can also be in shadow state: (0.194)', 'For example, in the following class ShippingAddress and BillingAddress are both of the same .NET type, StreetAddress: (0.166)', 'In order to understand how EF Core will distinguish tracked instances of these objects, it may be useful to think that the defining navigation has become part of the key of the instance alongside the value of the key of the owner and the .NET type of the owned type. (0.176)', 'It is not necessary to use the Include method, even if the owned types are stored in a separate table. (0.198)', 'Some of these limitations are fundamental to how owned entity types work, but some others are restrictions that we may be able to remove in future releases: (0.157)']."
        }
    ],
    "doc_id": "5639",
    "text": "In this article\n\nOwned Entity Types\n\nIn this article\n\nNote\n\nThis feature is new in EF Core 2.0.\n\nEF Core allows you to model entity types that can only ever appear on navigation properties of other entity types. These are called owned entity types. The entity containing an owned entity type is its owner.\n\nExplicit configuration\n\nOwned entity types are never included by EF Core in the model by convention. You can use the OwnsOne method in OnModelCreating or annotate the type with OwnedAttribute (new in EF Core 2.1) to configure the type as an owned type.\n\nIn this example, StreetAddress is a type with no identity property. It is used as a property of the Order type to specify the shipping address for a particular order.\n\nWe can use the OwnedAttribute to treat it as an owned entity when referenced from another entity type:\n\nImplicit keys\n\nOwned types configured with OwnsOne or discovered through a reference navigation always have a one-to-one relationship with the owner, therefore they don't need their own key values as the foreign key values are unique. In the previous example, the StreetAddress type does not need to define a key property.\n\nIn order to understand how EF Core tracks these objects, it is useful to think that a primary key is created as a shadow property for the owned type. The value of the key of an instance of the owned type will be the same as the value of the key of the owner instance.\n\nCollections of owned types\n\nNote\n\nThis feature is new in EF Core 2.2.\n\nTo configure a collection of owned types OwnsMany should be used in OnModelCreating. However the primary key will not be configured by convention, so it needs to be specified explicitly. It is common to use a complex key for these type of entities incorporating the foreign key to the owner and an additional unique property that can also be in shadow state:\n\nMapping owned types with table splitting\n\nWhen using relational databases, by convention reference owned types are mapped to the same table as the owner. This requires splitting the table in two: some columns will be used to store the data of the owner, and some columns will be used to store data of the owned entity. This is a common feature known as table splitting.\n\nTip\n\nOwned types stored with table splitting can be used similarly to how complex types are used in EF6.\n\nBy convention, EF Core will name the database columns for the properties of the owned entity type following the pattern Navigation_OwnedEntityProperty. Therefore the StreetAddress properties will appear in the 'Orders' table with the names 'ShippingAddress_Street' and 'ShippingAddress_City'.\n\nSharing the same .NET type among multiple owned types\n\nAn owned entity type can be of the same .NET type as another owned entity type, therefore the .NET type may not be enough to identify an owned type.\n\nIn those cases, the property pointing from the owner to the owned entity becomes the defining navigation of the owned entity type. From the perspective of EF Core, the defining navigation is part of the type's identity alongside the .NET type.\n\nFor example, in the following class ShippingAddress and BillingAddress are both of the same .NET type, StreetAddress:\n\nIn order to understand how EF Core will distinguish tracked instances of these objects, it may be useful to think that the defining navigation has become part of the key of the instance alongside the value of the key of the owner and the .NET type of the owned type.\n\nNested owned types\n\nIn this example OrderDetails owns BillingAddress and ShippingAddress, which are both StreetAddress types. Then OrderDetails is owned by the DetailedOrder type.\n\nIn addition to nested owned types, an owned type can reference a regular entity, it can be either the owner or a different entity as long as the owned entity is on the dependent side. This capability sets owned entity types apart from complex types in EF6.\n\nIt is also possible to achieve the same thing using OwnedAttribute on both OrderDetails and StreetAdress.\n\nStoring owned types in separate tables\n\nAlso unlike EF6 complex types, owned types can be stored in a separate table from the owner. In order to override the convention that maps an owned type to the same table as the owner, you can simply call ToTable and provide a different table name. The following example will map OrderDetails and its two addresses to a separate table from DetailedOrder:\n\nQuerying owned types\n\nWhen querying the owner the owned types will be included by default. It is not necessary to use the Include method, even if the owned types are stored in a separate table. Based on the model described before, the following query will get Order, OrderDetails and the two owned StreetAddresses from the database:\n\nLimitations\n\nSome of these limitations are fundamental to how owned entity types work, but some others are restrictions that we may be able to remove in future releases:\n\nBy-design restrictions\n\nYou cannot create a DbSet<T> for an owned type\n\nYou cannot call Entity<T>() with an owned type on ModelBuilder\n\nCurrent shortcomings\n\nInheritance hierarchies that include owned entity types are not supported\n\nReference navigations to owned entity types cannot be null unless they are explicitly mapped to a separate table from the owner\n\nInstances of owned entity types cannot be shared by multiple owners (this is a well-known scenario for value objects that cannot be implemented using owned entity types)\n\nShortcomings in previous versions\n\nIn EF Core 2.0, navigations to owned entity types cannot be declared in derived entity types unless the owned entities are explicitly mapped to a separate table from the owner hierarchy. This limitation has been removed in EF Core 2.1\n\nIn EF Core 2.0 and 2.1 only reference navigations to owned types were supported. This limitation has been removed in EF Core 2.2\n\nFeedback\n\nWe'd love to hear your thoughts. Choose the type you'd like to provide:"
}