{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "863",
    "text": "Q:\n\nReloading an iframe in GWT\n\nI am currently working on a GWT project where I am displaying an HTML file within an iframe in my application.  This HTML file is actually being written to as it is getting displayed, and I am hoping to be able to reload the frame so that the changes made to the HTML file are reflected on screen.  I am able to do this two different ways that both work when running in development mode, however neither seem to work when the project is deployed.\nThe first method I tried was setting the frame's URL to itself: \nframe.setUrl(frame.getUrl());\n\nThe second method I tried using JSNI:\npublic native void refresh() /*-{\n  if($doc.getElementById('__reportFrame') != null) {\n    $doc.getElementById('__reportFrame').src =\n       $doc.getElementById('__reportFrame').src;\n  }\n}-*/;\n\nWhen deployed, the frame gets displayed in a Window, and when the file is finished being written to, a call to either of these refresh methods is made, and the frame refreshes to contain the finished HTML file.  When I am deployed, the call to refresh does not reload the contents of the frame, however if I bring up the frame's context menu (in Firefox), then go into 'This Frame', and click Reload, it successfully reloads the frame to contain the finished HTML file.  I have tested this on multiple versions of Firefox without any luck.\nDoes anyone have any suggestions?  Why would the behavior be different from one mode to the other?\nThanks.\n\nA:\n\nwow, google is really fast with his search^^\n\nYou can use some JSNI to do this. Create a method such as \nprotected native void reloadIFrame(Element iframeEl) /-{ \n  iframeEl.contentWindow.location.reload(true);  }-/; \n Then call it with your iFrame element\n\nso your question you posted twice was already answerd here \nhttp://groups.google.com/group/google-web-toolkit/browse_thread/thread/64aa7712890652d3\n\n"
}