{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7943",
    "text": "Q:\n\nC# Add variable value to list name\n\nIs it possible to add a variable to a list name when using it?\nSomething like this:\nstring id = \"1\"; //Could be 2\nList<string> List1 = new List<string> {\"1\",\"11\" };\nList<string> List2 = new List<string> {\"2\",\"22\" };\n\nforeach (var element in List+id)\n{ //code here }\n\nIDs could be a dozen different values, so I didn't even try with regular if(). Would that be the only way?\n\nA:\n\nUse a dictionary:\nvar dict = new Dictionary<string, List<string>>();\ndict.Add(\"1\", new List<string> {\"1\",\"11\" });\ndict.Add(\"2\", new List<string> {\"2\",\"22\" });\n\nThen you can do\nforeach (var element in dict[id])\n{ \n}\n\n"
}