{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3156",
    "text": "Q:\n\nMatch when column does and does not equal value across multiple rows\n\nI have a table with a many-to-many relationship to two other tables:\nCREATE TABLE assoc (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  ref1 INT NOT NULL,\n  ref2 INT NOT NULL,\n  INDEX composite_key (ref1, ref2)\n);\n\nI want to determine if there are associations with ref1 that match and do not match a given value for ref2. As an example, lets say I'd like to match if an association for ref1 is present with a value of 1000 and any other value for ref2:\nINSERT INTO assoc (ref1, ref2) VALUES\n  (100, 10),\n  (100, 1000);\n\nHowever, no match should be given if only the value 1000 is associated with ref1, or if it is solely any other value:\nINSERT INTO assoc (ref1,ref2) VALUES\n  (101, 10),\n  (102, 1000);\n\nI came up with two solutions. 1) Create a temp table with the results of rows that do match the value, then SELECT from that the rows that do not match the value, and 2) join the same table, and specify the not matching criteria from that table.\nCREATE TEMPORARY TABLE set\n  SELECT ref1 FROM assoc\n  WHERE ref2 = 1000;\nSELECT assoc.ref1 FROM `set`\n  JOIN assoc ON `set`.ref1 = assoc.ref1\n  WHERE assoc.ref2 <> 1000;\n\nSELECT assoc.ref1 FROM assoc \n  JOIN assoc AS `set` ON assoc.ref1 = `set`.ref1\n  WHERE assoc.ref2 = 1000 AND `set`.ref2 <> 1000;\n\nHowever, I'd like to know if there are other ways to accomplish this match?\n\nA:\n\nI think your second solution is the standard way to do what you want; I'd do it the same way. You have also added the INDEX composite_key  correctly. However, you might add an additional GROUP BY to avoid that the same assoc.ref1 appears as many times as the join finds associated rows with ref2 <> 1000:\nSELECT assoc.ref1 FROM assoc \n  JOIN assoc AS `set` ON assoc.ref1 = `set`.ref1\n  WHERE assoc.ref2 = 1000 AND `set`.ref2 <> 1000\n  GROUP BY assoc.ref1;\n\n"
}