{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1038",
    "text": "Q:\n\nRemove escape from string c#\n\nI have a path in my network who I can use in File Explorer without problems:\n\\\\MyNetwork\\Projects\\16000\n\nNow I want to access it using Directory.Exists as:\nvar normalFolderPath = @\"\\MyNetwork\";\nvar number = @\"\\16000\"\n\nvar a = Directory.Exists($@\"{normalFolderPath}\\{number}\");\n\nBut this: $@\"{normalFolderPath}\\{number}\" return \\\\MyNetwork\\\\16000 but if I try to access it that on File Explorer just can not found, but if I remove \\ from subfolder like: \\\\MyNetwork\\16000 it works!, how can I remove one \\ from string in c#\n\nA:\n\nYou're complaining that your string has two slashes in the middle of it, but you put two slashes in the middle of it:\n\nnumber is the literal string \\16000\nYou asked c# to concatenate normalfolderpath with number, separated by slash: {normalFolderPath}\\{number}\n\nNaturally, you'll end up with two slashes; one from number, and one as the separator. To demo what I mean, here is an altered code:\nvar normalFolderPath = @\"\\MyNetwork\";\nvar number = @\"!16000\"\n\nvar a = Directory.Exists($@\"{normalFolderPath}={number}\");\n\nThis will produce the string \\MyNetwork=!16000: the = is the separator between the interpolated fields and ! came from the start of number\n\nBut this: $@\"{normalFolderPath}\\{number}\" return \\\\MyNetwork\\\\16000\n\nI disagree: it will definitely return \\MyNetwork\\\\16000 with only one slash at the start and two in the middle. No way will that code you put, return something with two slashes at the start\n\nAs has been commented, you should use Path.Combine to combine path elements:\nvar normalFolderPath = @\"\\\\MyNetwork\";\nvar number = \"16000\"\n\nvar a = Directory.Exists(Path.Combine(normalFolderPath,number));\n\n"
}