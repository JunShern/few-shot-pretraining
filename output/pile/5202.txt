{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 6 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "5202",
    "text": "/*\n * reserved comment block\n * DO NOT REMOVE OR ALTER!\n */\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.sun.org.apache.bcel.internal.classfile;\n\nimport java.io.DataInput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\nimport com.sun.org.apache.bcel.internal.Const;\n\n/**\n * This class is derived from the abstract {@link Constant}\n * and represents a reference to a String object.\n *\n * @version $Id$\n * @see     Constant\n */\npublic final class ConstantString extends Constant implements ConstantObject {\n\n    private int string_index; // Identical to ConstantClass except for this name\n\n\n    /**\n     * Initialize from another object.\n     */\n    public ConstantString(final ConstantString c) {\n        this(c.getStringIndex());\n    }\n\n\n    /**\n     * Initialize instance from file data.\n     *\n     * @param file Input stream\n     * @throws IOException\n     */\n    ConstantString(final DataInput file) throws IOException {\n        this(file.readUnsignedShort());\n    }\n\n\n    /**\n     * @param string_index Index of Constant_Utf8 in constant pool\n     */\n    public ConstantString(final int string_index) {\n        super(Const.CONSTANT_String);\n        this.string_index = string_index;\n    }\n\n\n    /**\n     * Called by objects that are traversing the nodes of the tree implicitely\n     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n     * fields, attributes, etc. spawns a tree of objects.\n     *\n     * @param v Visitor object\n     */\n    @Override\n    public void accept( final Visitor v ) {\n        v.visitConstantString(this);\n    }\n\n\n    /**\n     * Dump constant field reference to file stream in binary format.\n     *\n     * @param file Output file stream\n     * @throws IOException\n     */\n    @Override\n    public final void dump( final DataOutputStream file ) throws IOException {\n        file.writeByte(super.getTag());\n        file.writeShort(string_index);\n    }\n\n\n    /**\n     * @return Index in constant pool of the string (ConstantUtf8).\n     */\n    public final int getStringIndex() {\n        return string_index;\n    }\n\n\n    /**\n     * @param string_index the index into the constant of the string value\n     */\n    public final void setStringIndex( final int string_index ) {\n        this.string_index = string_index;\n    }\n\n\n    /**\n     * @return String representation.\n     */\n    @Override\n    public final String toString() {\n        return super.toString() + \"(string_index = \" + string_index + \")\";\n    }\n\n\n    /** @return String object\n     */\n    @Override\n    public Object getConstantValue( final ConstantPool cp ) {\n        final Constant c = cp.getConstant(string_index, Const.CONSTANT_Utf8);\n        return ((ConstantUtf8) c).getBytes();\n    }\n\n\n    /** @return dereferenced string\n     */\n    public String getBytes( final ConstantPool cp ) {\n        return (String) getConstantValue(cp);\n    }\n}\n"
}