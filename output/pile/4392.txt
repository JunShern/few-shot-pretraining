{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4392",
    "text": "Q:\n\nHow to read .runsettings test parameter in xUnit fixture\n\nI'm writing xUnit unit test cases for a dotnet core application which uses DocumentDB (CosmosDB) as storage. The unit test are written to execute against the local cosmos db emulator. On the Azure DevOps build environment, I've setup the Azure Cosmos DB CI/CD task which internally creates a container to install the emulator. However, I'm not able to figure out that how the endpoint of emulator can be passed to xUnit fixture?\nIs there any way through which xUnit fixture can read the .runsettings test parameters or parameters can be passed via other source?\nUpdate\nCurrently, I implemented the scenario using Environment Variable but still not happy to define the connection string as a environment variable using powershell in build task and read it in through code during unit test execution. I was thinking if there could be another way of achieving it..\nBelow snapshot shows how the build tasks are configured currently as workaround to achieve the desired:\n\nAnd code to read the value as\nvar serviceEndpoint = Environment.GetEnvironmentVariable(\"CosmosDbEmulatorEndpointEnvironmentVariable\");\n\nSince, UnitTest task provides the option to pass .runsettings/.testsettings with option to override the test run parameters so was thinking it something can be achieved using those options.\n\nA:\n\nThis is not supported in xUnit.\nSee SO answers here and here, and this github issue indicating that it is not something that will be supported in xUnit.\n\nA:\n\nCurrently, I implemented the scenario using Environment Variable but still not happy to define the connection string as a environment variable using powershell in build task and read it in through code during unit test execution. I was thinking if there could be another way of achieving it..\nBelow snapshot shows how the build tasks are configured currently as workaround to achieve the desired:\n\nAnd code to read the value as\nvar serviceEndpoint = Environment.GetEnvironmentVariable(\"CosmosDbEmulatorEndpointEnvironmentVariable\");\n\nSince, UnitTest task provides the option to pass .runsettings/.testsettings with option to override the test run parameters so was thinking it something can be achieved using those options.\n\n"
}