{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains This includes."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "6293",
    "text": "PR (complexity)\n\nPR is the complexity class of all primitive recursive functions\u2014or, equivalently, the set of all formal languages that can be decided by such a function. This includes addition, multiplication, exponentiation, tetration, etc.\n\nThe Ackermann function is an example of a function that is not primitive recursive, showing that PR is strictly contained in R (Cooper 2004:88).\n\nOn the other hand, we can \"enumerate\" any recursively enumerable set (see also its complexity class RE) by a primitive-recursive function in the following sense: given an input (M,\u202fk), where M is a Turing machine and k is an integer, if M halts within k steps then output M; otherwise output nothing.  Then the union of the outputs, over all possible inputs (M,\u202fk), is exactly the set of M that halt.\n\nPR strictly contains ELEMENTARY.\n\nPR does not contain \"PR-complete\" problems (assuming, e.g., reductions that belong to ELEMENTARY). In practice, many problems that are not in PR but just beyond are -complete (Schmitz 2016).\n\nReferences \n S. Barry Cooper (2004), Computability Theory, Chapman & Hall. \n Herbert Enderton (2011), Computability Theory, Academic Press. \n Sylvain Schmitz (2016), \"Complexity Hierarchies Beyond Elementary\", ACM Transactions on Computation Theory 8.\n\nExternal links \n .\n\nCategory:Complexity classes"
}