{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 5 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "2604",
    "text": "/*\n * File    : TrackerWebPageRequestImpl.java\n * Created : 08-Dec-2003\n * By      : parg\n * \n * Azureus - a Java Bittorrent client\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details ( see the LICENSE file ).\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\npackage org.gudy.azureus2.pluginsimpl.local.tracker;\n\n/**\n * @author parg\n *\n */\n\nimport java.io.InputStream;\nimport java.net.InetSocketAddress;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.gudy.azureus2.plugins.tracker.*;\nimport org.gudy.azureus2.plugins.tracker.web.*;\n\npublic class \nTrackerWebPageRequestImpl\n\timplements TrackerWebPageRequest\n{\n\tprivate Tracker\t\t\t\ttracker;\n\tprivate TrackerWebContext\tcontext;\n\tprivate InetSocketAddress\tclient_address;\n\tprivate String\t\t\t\tuser;\n\tprivate String\t\t\t\turl;\n\tprivate URL\t\t\t\t\tabsolute_url;\n\tprivate String\t\t\t\theader;\n\tprivate InputStream\t\t\tis;\n\t\n\tprotected\n\tTrackerWebPageRequestImpl(\n\t\tTracker\t\t\t\t_tracker,\n\t\tTrackerWebContext\t_context,\n\t\tInetSocketAddress\t_client_address,\n\t\tString\t\t\t\t_user,\n\t\tString\t\t\t\t_url,\n\t\tURL\t\t\t\t\t_absolute_url,\n\t\tString\t\t\t\t_header,\n\t\tInputStream\t\t\t_is )\n\t{\n\t\ttracker\t\t\t= _tracker;\n\t\tcontext\t\t\t= _context;\n\t\tclient_address\t= _client_address;\n\t\tuser\t\t\t= _user;\n\t\turl\t\t\t\t= _url;\n\t\tabsolute_url\t= _absolute_url;\n\t\theader\t\t\t= _header;\n\t\tis\t\t\t\t= _is;\n\t}\n\t\n\tpublic Tracker\n\tgetTracker()\n\t{\n\t\treturn( tracker );\n\t}\n\t\n\tpublic TrackerWebContext\n\tgetContext()\n\t{\n\t\treturn( context );\n\t}\n\t\n\tpublic String\n\tgetURL()\n\t{\n\t\treturn( url );\n\t}\n\t\n\tpublic URL\n\tgetAbsoluteURL()\n\t{\n\t\treturn( absolute_url );\n\t}\n\t\n\tpublic String\n\tgetClientAddress()\n\t{\n\t\treturn( client_address.getAddress().getHostAddress());\n\t}\n\n\tpublic InetSocketAddress\n\tgetClientAddress2()\n\t{\n\t\treturn( client_address );\n\t}\n\t\n\tpublic String\n\tgetUser()\n\t{\n\t\treturn( user );\n\t}\n\t\n\tpublic InputStream\n\tgetInputStream()\n\t{\n\t\treturn( is );\n\t}\n\t\n\tpublic String\n\tgetHeader()\n\t{\n\t\treturn( header );\n\t}\n\t\n\tpublic Map \n\tgetHeaders()\n\t{\n        Map headers = new HashMap();\n\n        String[] header_parts = header.split(\"\\r\\n\");\n\n        headers.put(\"status\", header_parts[0].trim());\n\n        for (int i = 1;i<header_parts.length;i++) {\n\n        \tString[] key_value = header_parts[i].split(\":\",2);\n\n            headers.put(key_value[0].trim().toLowerCase(), key_value[1].trim());\n        }\n\n        return headers;\n\t}\n}\t\n"
}