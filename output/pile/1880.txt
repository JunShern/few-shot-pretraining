{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1880",
    "text": "Q:\n\nconcatenating tuples of array within a tuple\n\nI have a tuple which contains many tuples. Each tuple within my main tuple has two elements --\nthe first element is an array with a shape of (700,) and the second\nelement is a integer. \nHere is a small representation of my tuple:\nx =( (np.array[3,3,3],1), (np.array[4,4,4],2), (np.array[5,5,5],3))\n\nI'm looking to combine all the arrays into one big matrix, and all the integers into one column vector, which all fit into one tuple.\nSo my output should be something like this:\ny= (np.array([[3,3,3],[4,4,4], [5,5,5]]),   np.array([1,2,3]))\n\nOne tuple with the first element as an array with shape (3,3), and the second element as an array \n     with a shape of (3,)\nI'm assuming we can use one of numpy's stack methods but I can't wrap my head\naround how to access all elements of the tuples to do so. \nThank you. \n\nA:\n\n>>> x = ((np.array([3,3,3]),1), (np.array([4,4,4]),2), (np.array([5,5,5]),3))\n>>> y = (np.array([e for e, _ in x]), np.array([i for _, i in x]))\n(array([[3, 3, 3],\n        [4, 4, 4],\n        [5, 5, 5]]), array([1, 2, 3]))\n\nOr, without comprehensions:\n>>> map(np.array, zip(*x))\n[array([[3, 3, 3],\n        [4, 4, 4],\n        [5, 5, 5]]), array([1, 2, 3])]\n\n"
}