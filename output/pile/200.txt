{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "200",
    "text": "Q:\n\nData binding to a nested property with possibly null parent\n\nI want to perform data-binding to Room.ToNorth.ImageName while ToNorth may be null.\nI'm trying to write my own text adventure and have images next to each of the directions a player can go (ie. open/closed door, pathway).  When there isn't a room in a given direction I have the controls bound to show a 'no exit' image, this works great so long the player starting location has an exit in all 4 directions, however when one is null I get the following exception\n\nSystem.ArgumentNullException: 'Value cannot be null. Parameter name:\n  component'\n\nThis is isn't an issue on a new game but I'm making randomly generated dungeons so it can't be guaranteed on a load game.  I realise I could probably fudge it by creating a safe space while the bindings are set then moving the player to where they need to be but is there a proper way to handle this?\nThe closest answer I've found is this question, but I'm not sure I can apply it here due to how it's bound.\nprivate GameSession _CurrentGame;\nprivate BindingSource _BindToPlayer = new BindingSource();\n\nprivate void BtnNewGame_Click(object sender, EventArgs e)\n{\n    _CurrentGame = new GameSession();\n\n    _BindToPlayer.DataSource = _CurrentGame.CurrentPlayer;\n\n    PicBoxNorth.DataBindings.Add(\"ImageLocation\", _BindToPlayer, \n        \"CurrentRoom.ToNorth.ImageName\", true, DataSourceUpdateMode.OnPropertyChanged, \n        \"Images\\\\Wall.png\");\n}\n\nThe ToNorth property just gets the object from an an array of exits, but telling it to return an empty exit if it's null (like suggested in the above link) would be problematic in that the exit wouldn't have any rooms to connect to and thus fail to initialise likely throwing an exception itself along the way.  To explain better, I have my rooms set up as follows\npublic Class Room\n{\n   public int ID { get; set; }\n    public String Name { get; set; }\n    public String Description { get; set; }\n    public String FarDescription { get; set; }\n    public CoOrds Co_Ords { get; set; }\n\n    public Boolean UniqueRoom { get; set; }\n\n    public Exit[] ExitArr { get; set; }\n\n    public Exit ToNorth => ExitArr[0];\n    public Exit ToSouth => ExitArr[1];\n    public Exit ToWest => ExitArr[2];\n    public Exit ToEast => ExitArr[3];\n    public Exit ToUp => ExitArr[4];\n    public Exit ToDown => ExitArr[5];\n\n    public Exit ToIn => ExitArr[6];\n    public Exit ToOut => ExitArr[7];\n\n    public Room(int id, String name, String desc, String fardesc,bool unique = false)\n    {\n        ID = id;\n        Name = name;\n        Description = desc;\n        FarDescription = fardesc;\n        Co_Ords = new CoOrds();\n        ExitArr = new Exit[8];\n\n        UniqueRoom = unique;\n\n    }\n\nAnd my exits are set up like so\npublic class Exit\n{\n    public String Description {get;}         \n\n    public Room RoomA { get; set; }\n    public Room RoomB { get; set; }\n\n    public Boolean CanExitA { get; set; } = true;\n    public Boolean CanExitB { get; set; } = true;\n\n    public Room NextRoom\n    {\n        get\n        {\n\n            if (RoomA.PlayerHere && CanExitA)\n            { return RoomB; }\n            else if (RoomB.PlayerHere && CanExitB)\n            { return RoomA; }\n            else\n                return null;\n        }\n    }\n\n    public String ImageName\n    {\n        get\n        {\n            string imagePath = \"Images\\\\\";\n            if (DoorHere != null)\n            {\n                return imagePath + DoorHere.ImageName;\n            }\n            else\n                return imagePath + \"Pathway.png\";\n        }\n\n    }\n\n    public Door DoorHere { get; set; }\n\n    public Exit(Room roomA, int Adir, Room roomB, int Bdir, Door door = null)\n    {\n        RoomA = roomA;\n        RoomA.ExitArr[Adir] = this;\n        RoomB = roomB;\n        RoomB.ExitArr[Bdir] = this;\n        DoorHere = door;\n\n    }\n\nDoor is just an unnamed object with a few bools for IsOpen, IsLocked etc. and shouldn't be needed if you want to test this but exits are created anonymously and add themselves to the Exit array in both connecting rooms, hence creating empty ones would fail.\nAny suggestions would be greatly appreciated.\n\nA:\n\nAs an option, you can create a property to do null-checking and get/set second level property using that property.\nFor example in your code, you can create ToNorthImageName property to get/set the value of ToNorth.ImageNamein Room class:\npublic string ToNorthImageName\n{\n    get { return ToNorth?.ImageName }\n    //set { if (ToNorth != null) ToNorth.ImageName = value; }\n}\n\nThe property setter is optional, you can remove it if you just want to read the image name.\nThen setup data-binding to that property:\nPicBoxNorth.DataBindings.Add(\"ImageLocation\", _BindToPlayer, \"ToNorthImageName\",\n    true, DataSourceUpdateMode.OnPropertyChanged);\n\n"
}