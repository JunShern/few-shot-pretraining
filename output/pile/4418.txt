{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4418",
    "text": "Q:\n\nLeetCode: Prison Cells After N Days\n\nStack, I can't quite wrap my head around this oddity. I'm evaluating the positions within the array, each time. How is it that by initializing the array each time I receive different results... I would appreciate if someone can explain this.\nIn While Loop: Correct\n0,1,0,1,1,0,0,1\n0,1,1,0,0,0,0,0\n0,0,0,0,1,1,1,0\n0,1,1,0,0,1,0,0\n0,0,0,0,0,1,0,0\n0,1,1,1,0,1,0,0\n0,0,1,0,1,1,0,0\n0,0,1,1,0,0,0,0\nOutside While Loop (Initialized Once): Incorrect\n0,1,0,1,1,0,0,1\n0,1,1,0,0,0,0,0\n0,0,1,0,1,0,1,0\n0,0,1,1,0,0,1,0\n0,0,0,1,0,0,1,0\n0,1,1,0,1,1,0,0\n0,0,1,1,1,0,1,0\n0,0,0,0,1,1,0,0\nQuestion Details\nThere are 8 prison cells in a row, and each cell is either occupied or vacant.\nEach day, whether the cell is occupied or vacant changes according to the following rules:\nIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\nOtherwise, it becomes vacant.\n(Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.)\nWe describe the current state of the prison in the following way: cells[i] == 1 if the i-th cell is occupied, else cells[i] == 0.\nGiven the initial state of the prison, return the state of the prison after N days (and N such changes described above.)\nExample 1: Expected Output\nInput: cells = [0,1,0,1,1,0,0,1], N = 7\nOutput: [0,0,1,1,0,0,0,0]\nExplanation: \nThe following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]       \nMethod\n    static public int[] PrisonAfterNDays(int[] cells, int N) \n    {\n        int counter = 0;\n        //Doesn't work if it's here\n        //int[] temp = new int[8];\n        while(counter < N)\n        {\n            Console.WriteLine(String.Join(\",\",cells));\n\n            //Works if it's here ?!?!?!\n            int[] temp = new int[8];\n            for(int j = 1; j < 8-1; j++)\n            {\n                if(cells[j-1] == cells[j+1])\n                {\n                    temp[j] = 1;\n                }\n                else\n                {\n                    temp[j] = 0;\n                }\n\n            }\n\n            cells = temp;\n            counter++;\n        }\n\n        return cells;\n    }\n\nA:\n\nRemember that even though int is a value type, arrays are reference types, so int[] is a reference type. (See What is the difference between a reference type and value type in c#?)\nWhen you execute cells = temp;, you point cells and temp at the exact same array! You can test this with the following code:\nint[] a = new int[2];\nint[] b = a;\n\nb[0] = 85;\nb[1] = 3;\n\nConsole.WriteLine(a[0]); // prints 85\nConsole.WriteLine(a[1]); // prints 3\n\nSo this means that on the second iteration of the outer loop, the following code changes both cells[j] and temp[j]:\ntemp[j] = 1;\n\nWhich, clearly, means you will get strange results.\nFor this reason, I'd argue that you should define temp within the loop.\n\n"
}