{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3467",
    "text": "Q:\n\nLaravel adding middleware inside a controller function\n\nas the title says I want to use a middleware inside a controller function. I have resource controllers, which their functions inside will have different access rights so I can't use a middleware in the web.php file, I have to use or apply it separately in each function to limit access, my googling hasn't been successful in getting a solution to that so far. Any help please and thanks in advance.\nP.S. I believe no code is necessary here.\n\nA:\n\nMiddleware could also be applied to just one function, just add the method name in your controller constructor\npublic function __construct()\n{\n    // Middleware only applied to these methods\n    $this->middleware('loggedIn', [\n        'only' => [\n            'update' // Could add bunch of more methods too\n        ]\n    ]);\n}\n\nOR\npublic function __construct()\n{\n    // Middleware only applied to these methods\n    $this->middleware('loggedIn')->only([\n        'update' // Could add bunch of more methods too\n    ]);\n}\n\nHere's the documentation\n\nA:\n\nThere are 3 ways to use a middleware inside a controller:\n1) Protect all functions:\npublic function __construct()\n{\n    $this->middleware('auth');\n}\n\n2) Protect only some functions:\npublic function __construct()\n{\n    $this->middleware('auth')->only(['functionName1', 'functionName2']);\n}\n\n3) Protect all functions except some:\npublic function __construct()\n{\n    $this->middleware('auth')->except(['functionName1', 'functionName2']);\n}\n\nHere you can find all the documentation about this topic: Controllers\nI hope this can be helpful, regards!\n\n"
}