{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['1', '2', '3', '*', '-', '-']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['When the user send a message have to select one of the above three, here is my code below: (0.187)']."
        }
    ],
    "doc_id": "2217",
    "text": "Q:\n\nSubject from Dropdown using enum Django\n\nI have ContactForm with subject dropdown using enum, the subject is three different string:\n1. I have a question.\n2. Help/Support\n3. Please give me a call. \nWhen the user send a message have to select one of the above three, here is my code below:\n*forms.py*\nfrom django_enumfield import enum\nclass SubjectEnum(enum.Enum):\n    subject_one = 'I have a question'\n    subject_two = 'Help/Support'\n    subject_three = 'Please give me a call'\n\nclass ContactForm(forms.ModelForm):\n    name = forms.CharField(required=True)\n    email = forms.EmailField(required=True)\n    subject = forms.TypedChoiceField(choices=SubjectEnum.choices(), coerce=str) \n    message = forms.CharField(widget=forms.Textarea)\n\n   def __init__(self, *args, **kwargs):\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Submit'))\n        super(ContactForm, self).__init__(*args, **kwargs)\n\nAnd view.py file like belwo:\nclass ContactFormView(FormView):\n    form_class = ContactForm\n    template_name = \"contact/email_form.jade\"\n    success_url = '/email-sent/'\n\n    def form_valid(self, form):\n        message = \"{name} / {email} said: \".format(\n            name=form.cleaned_data.get('name'),\n            email=form.cleaned_data.get('email'))\n        message += \"\\n\\n{0}\".format(form.cleaned_data.get('message'))\n        send_mail(\n            subject=form.cleaned_data.get('-subject').strip(),\n            message=message,\n            from_email=\"enquiries@example.com\",\n            recipient_list=[settings.LIST_OF_EMAIL_RECIPIENTS],\n        )\n        return super(ContactFormView, self).form_valid(form)\n\nContact Form:\n- extends \"base.jade\"\n- load crispy_forms_tags\n    block meta_title\n        | Contact Us\n    block content\n        .jumbotron\n            h1 Contact Us\n        .row\n            .span6\n                {% crispy form form.helper %}\n\nI get an error say, ValueError: ModelForm has no model class specified. Any idea guys?\nThanks\n\nA:\n\nYou should specify a Meta class inside your model form and set the model used. Note that you don't need to specify the form fields that are not different from your model's fields.\nclass ContactForm(forms.ModelForm)\n    name = forms.CharField(required=True)\n    email = forms.EmailField(required=True)\n    subject = forms.TypedChoiceField(choices=SubjectEnum.choices(), coerce=str) \n    message = forms.CharField(widget=forms.Textarea)\n\n    class Meta:\n        model = Contact\n        fields = ['name', 'email', 'subject', 'message']\n\nIf you don't have a model Contact, you should be using a Form instead of a ModelForm:\nclass ContactForm(forms.Form):\n    name = forms.CharField(required=True)\n    email = forms.EmailField(required=True)\n    subject = forms.TypedChoiceField(choices=SubjectEnum.choices(), coerce=str) \n    message = forms.CharField(widget=forms.Textarea)\n\n   def __init__(self, *args, **kwargs):\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Submit'))\n        super(ContactForm, self).__init__(*args, **kwargs)\n\nSee the documentation for more information on ModelForms and their use.\n\n"
}