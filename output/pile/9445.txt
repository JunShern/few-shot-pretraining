{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "9445",
    "text": "Q:\n\nDetermine if the VBE is open\n\nI'm trying to develop an 'auto run' macro to determine if the VBE is open (not necessarily the window of focus, just open). If this is TRUE then ... take some action.\nIf this macro is connected to a CommandButton it works but I can't get it to function anywhere in the ThisWorkbook:\nSub CloseVBE()\n    'use the MainWindow Property which represents\n    ' the main window of the Visual Basic Editor - open the code window in VBE,\n    ' but not the Project Explorer if it was closed previously:\n    If Application.VBE.MainWindow.Visible = True Then\n        MsgBox \"\"\n        'close VBE window:\n        Application.VBE.MainWindow.Visible = False\n    End If\n\nEnd Sub\n\nI was given the following FUNCTION to do the same but I can't get it to work either:\nOption Explicit\n\nPrivate Declare Function FindWindow Lib \"User32\" Alias \"FindWindowA\" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long\nPrivate Declare Function GetWindowText Lib \"User32\" Alias \"GetWindowTextA\" (ByVal hWnd As Long, ByVal lpString As String, ByVal cch As Long) As Long\nPrivate Declare Function GetWindowTextLength Lib \"User32\" Alias \"GetWindowTextLengthA\" (ByVal hWnd As Long) As Long\nPrivate Declare Function GetWindow Lib \"User32\" (ByVal hWnd As Long, ByVal wCmd As Long) As Long\n\nPrivate Const GW_HWNDNEXT = 2\n\nFunction VBE_IsOpen() As Boolean\n\n    Const appName       As String = \"Visual Basic for Applications\"\n\n    Dim stringBuffer    As String\n    Dim temphandle      As Long\n\n    VBE_IsOpen = False\n\n    temphandle = FindWindow(vbNullString, vbNullString)\n    Do While temphandle <> 0\n        stringBuffer = String(GetWindowTextLength(temphandle) + 1, Chr$(0))\n        GetWindowText temphandle, stringBuffer, Len(stringBuffer)\n        stringBuffer = Left$(stringBuffer, Len(stringBuffer) - 1)\n        If InStr(1, stringBuffer, appName) > 0 Then\n            VBE_IsOpen = True\n            CloseVBE\n        End If\n        temphandle = GetWindow(temphandle, GW_HWNDNEXT)\n    Loop\n\nEnd Function\n\n1/23/2018  Here is an update to the original question:\nI located the following code that performs EXACTLY as I was needing but when closing the workbook, the macro errors out on the line indicated:\nPublic Sub StopEventHook(lHook As Long)\n    Dim LRet As Long\n    Set lHook = 0'<<<------ When closing workbook, errors out on this line.\n    If lHook = 0 Then Exit Sub\n    LRet = UnhookWinEvent(lHook)    \n\n    Exit Sub\nEnd Sub\n\nHere is the entire code, paste this into a regular Module:\nOption Explicit\n\nPrivate Const EVENT_SYSTEM_FOREGROUND = &H3&\nPrivate Const WINEVENT_OUTOFCONTEXT = 0\n\nPrivate Declare Function SetWinEventHook Lib \"user32.dll\" (ByVal eventMin As Long, ByVal eventMax As Long, _\n    ByVal hmodWinEventProc As Long, ByVal pfnWinEventProc As Long, ByVal idProcess As Long, _\n    ByVal idThread As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function GetCurrentProcessId Lib \"kernel32\" () As Long\nPrivate Declare Function GetWindowThreadProcessId Lib \"user32\" (ByVal hWnd As Long, lpdwProcessId As Long) As Long\n\nPrivate pRunningHandles As Collection\n\nPublic Function StartEventHook() As Long\n  If pRunningHandles Is Nothing Then Set pRunningHandles = New Collection\n  StartEventHook = SetWinEventHook(EVENT_SYSTEM_FOREGROUND, EVENT_SYSTEM_FOREGROUND, 0&, AddressOf WinEventFunc, 0, 0, WINEVENT_OUTOFCONTEXT)\n  pRunningHandles.Add StartEventHook\nEnd Function\n\nPublic Sub StopEventHook(lHook As Long)\n  Dim LRet As Long\n  On Error Resume Next\n  Set lHook = 0  '<<<------ When closing workbook, errors out on this line.\n    If lHook = 0 Then Exit Sub\n    LRet = UnhookWinEvent(lHook)    \n\n    Exit Sub\nEnd Sub\n\nPublic Sub StartHook()\n    StartEventHook\nEnd Sub\n\nPublic Sub StopAllEventHooks()\n  Dim vHook As Variant, lHook As Long\n  For Each vHook In pRunningHandles\n    lHook = vHook\n    StopEventHook lHook\n  Next vHook\nEnd Sub\n\nPublic Function WinEventFunc(ByVal HookHandle As Long, ByVal LEvent As Long, _\n                            ByVal hWnd As Long, ByVal idObject As Long, ByVal idChild As Long, _\n                            ByVal idEventThread As Long, ByVal dwmsEventTime As Long) As Long\n  'This function is a callback passed to the win32 api\n  'We CANNOT throw an error or break. Bad things will happen.\n  On Error Resume Next\n  Dim thePID As Long\n\n  If LEvent = EVENT_SYSTEM_FOREGROUND Then\n    GetWindowThreadProcessId hWnd, thePID\n    If thePID = GetCurrentProcessId Then\n      Application.OnTime Now, \"Event_GotFocus\"\n    Else\n      Application.OnTime Now, \"Event_LostFocus\"\n    End If\n  End If\n\n  On Error GoTo 0\nEnd Function\n\nPublic Sub Event_GotFocus()\n    Sheet1.[A1] = \"Got Focus\"\nEnd Sub\n\nPublic Sub Event_LostFocus()\n    Sheet1.[A1] = \"Nope\"\nEnd Sub\n\nPaste this into the ThisWorkbook :\nOption Explicit\n\nPrivate Sub Workbook_BeforeClose(Cancel As Boolean)\n    StopAllEventHooks\nEnd Sub\n\nPrivate Sub Workbook_Open()\n    StartHook\nEnd Sub\n\nA:\n\nWhy not just using the ThisWorkBook module with an Workbook_Open event?\nCode in ThisWorkBook code module\n Private Sub Workbook_Open()         ' or...  Sub Workbook_Activate()\n   ' checkIsVBEOpen\n   If Application.VBE.MainWindow.Visible = True Then\n      MsgBox \"VBE window is open\", vbInformation\n      ' do something\n      ' ...\n      ' close VBE window\n        Application.VBE.MainWindow.Visible = False\n    Else\n      MsgBox \"VBE window is NOT open\"   ' do nothing else\n   End If\nEnd Sub\n\n"
}