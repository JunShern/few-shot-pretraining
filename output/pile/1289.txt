{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1289",
    "text": "Q:\n\nhow to extends and override array methods in typescript\n\nnow I want to implement an array proxy. here's my code\nclass ArrayProxy<T> extends Array<T> {\n\n    constructor(data: T[]) {\n        super(...data);\n    }\n\n    push(...items: T[]): number {\n        var res = super.push(...items);\n        console.log(\"push invoked!\");\n        // some code to do extra operation.\n        return res;\n    }\n}\n\nvar foo = new ArrayProxy([\"aa\",\"bb\"]);\nfoo.push(\"cc\");\n\nit seems that my override push methods was not invoked. and the foo variable is instance of Array other than ArrayProxy.\nmy typescript version:2.3.2\ntsconfig.json\n{\n    \"compilerOptions\": {\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"moduleResolution\": \"classic\",\n        \"target\": \"es5\",\n        \"module\": \"system\",\n        \"outFile\": \"js/test.js\"\n    }\n}\n\nMyTest\ni looked for some solution but failed.  \nclass MyNewArray<T> extends Array<T> {\n    getFirst() {\n        return this[0];\n    }\n}\n\nvar myArray = new MyNewArray<string>();\nmyArray.push(\"First Element\");\nconsole.log(myArray.getFirst()); // \"First Element\"\n\nfrom David Sherret\nbut i got error. \nUncaught (in promise) Error: myArray.getFirst is not a function\n  Evaluating http://localhost:8080/application/test/application/ts/bind_test\n  Loading application/ts/bind_test\n    at Object.execute (test.js:1733)\n    at j (system.js:4)\n    at E (system.js:4)\n    at O (system.js:4)\n    at system.js:5\n\nupdate\nit works when i add Object.setPrototypeOf(this, ArrayProxy.prototype); after the super call in ArrayProxy's constructor. thanks to @Aluan Haddad.\n\nA:\n\nSubclassing built-ins is currently broken.\nIt is also extremely dangerous because when the code execute in es2015 compliant environments it will fail for functions like Map.\nUse composition and avoid these techniques.\nSee here for reference: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n"
}