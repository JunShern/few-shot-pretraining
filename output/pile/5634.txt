{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains [\"There's a bunch of examples on the web. (0.172)\"]."
        }
    ],
    "doc_id": "5634",
    "text": "Q:\n\nHow to detach a process from terminal in unix?\n\nWhen I start a process in background in a terminal and some how if terminal gets closed then we can not interact that process any more. I am not sure but I think process also get killed. Can any one please tell me how can I detach that process from my terminal. So even if I close terminal then I can interact with same process in new terminal ?\nI am new to unix so your extra information will help me. \n\nA:\n\nThe command you're looking for is disown. \ndisown <processid>\n\nThis is as close as you can get to a nohup. It detaches the process from the current login and allows it to continue running. Thanks David Korn!\nhttp://www2.research.att.com/~gsf/man/man1/disown.html\nand I just found reptyr which lets you reparent a disowned process. \nhttps://github.com/nelhage/reptyr\nIt's already in the packages for ubuntu. \nBUT if you haven't started the process yet and you're planning on doing this in the future then the way to go is screen and tmux. I prefer screen. \n\nA:\n\nYou might also consider the screen command. It has the \"restore my session\" functionality. Admittedly I have never used it, and forgot about it.\nStarting the process as a daemon, or with nohup might not do everything you want, in terms of re-capturing stdout/stdin.\nThere's a bunch of examples on the web. On google try, \"unix screen command\" and \"unix screen tutorial\":\n\nhttp://www.thegeekstuff.com/2010/07/screen-command-examples/\nGNU Screen: an introduction and beginner's tutorial\n\nA:\n\nFirst google result for \"UNIX demonizing a process\":\nSee the daemon(3) manpage for a short overview. The main thing of daemonizing \nis going into the background without quiting or holding anything up. A list of \nthings a process can do to achieve this:\n\nfork() \nsetsid() \nclose/redirect stdin/stdout/stderr to /dev/null, and/or ignore SIGHUP/SIGPIPE. \nchdir() to /.\n\nIf started as a root process, you also want to do the things you need to be root \nfor first, and then drop privileges. That is, change effective user to the \"daemon\" \nuser or \"nobody\" with setuid()/setgid(). If you can't drop all privileges and need \nroot access sometimes, use seteuid() to temporary drop it when not needed.\nIf you're forking a daemon then also setup child handlers and, if calling exec, \nset the close on exec flags on all file descriptors your children won't need.\nAnd here's a HOWTO on creating Unix daemons: http://www.netzmafia.de/skripten/unix/linux-daemon-howto.html\n\n"
}