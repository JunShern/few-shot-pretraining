{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": true,
            "reason": "Text contains ['A probably more general example is the following: (0.190)']."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['A probably more general example is the following: (0.187)']."
        }
    ],
    "doc_id": "9168",
    "text": "Q:\n\nFormat fails to copy text properties from the format-string for adjacent %-sequences\n\nTake a look at this example:\n(format (concat \"%s\" (propertize \"%s\" 'face 'error)) \"foo\" \"bar\")\n\"foobar\"\n\n(format (concat \"%s \" (propertize \"%s\" 'face 'error)) \"foo\" \"bar\")\n#(\"foo bar\" 4 7 (face error))\n\nAnd the documentation of format explicitly states:\n\nText properties, if any, are copied from the format-string to the produced text.\n\nWhy is that?\nI know I can work around this with:\n(format \"%s%s\" \"foo\" (propertize \"bar\" 'face 'error))\n#(\"foobar\" 3 6 (face error))\n\nOr even:\n(concat \"foo\" (propertize \"bar\" 'face 'error))\n#(\"foobar\" 3 6 (face error))\n\nBut my original use case is a bit more complex than this.\n\nEdit\nA probably more general example is the following:\n(format (concat (propertize \"%s\" 'face 'bold)\n                \"\" ; any non-empty string works\n                (propertize \"%s\" 'face 'error))\n        \"foo\" \"bar\")\n#(\"foobar\" 0 6 (face bold))\n\nA:\n\nSo it was a bug which has now been fixed in this commit.\n\n"
}