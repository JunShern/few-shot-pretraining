{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['However: All examples I find, the dataStore has some proxy/reader etc. (0.187)', \"A word of warning: you don't find any examples of local stores with infinite scrolling because the number of records to make infinite scrolling viable exceeds the number of records which you should reasonably keep in a local store. (0.176)\"]."
        }
    ],
    "doc_id": "5404",
    "text": "Q:\n\nInfinite scrolling on extJS local data store\n\nis it possible to have infinte scrolling in a extJS (4.1) grid, whose data-store is loaded manually? \nmyStore = Ext.create('Ext.data.Store', {\n    fields:givenStoreFields,\n    data: [[]],\n});\n\nmyGrid = Ext.create('Ext.grid.Panel', {\n    store: myStore,\n    columns: givenColumns,\n});\n\nIn my case I fetch data from the server, the data is tweaked, and then loaded into the store manually.\nmyStore.loadData(fetchedAndTweaked);\n\nSince fetchedAndTweaked contains many rows, rendering is very slow, and slows the entire browser. Therefore I want to add parameters to myGryd and myStore to have \"infinite\" scrolling (on the data-set fetchedAndTweaked).\nHowever: All examples I find, the dataStore has some proxy/reader etc. \n//Thanks\n\nA:\n\nYou can, if you use buffered: true config on your store as described in the Ext JS 4.1.3 docs:.\n\nbuffered : Boolean Allows the Store to prefetch and cache in a page cache, pages of Records, and to then satisfy loading requirements\n  from this page cache.\nTo use buffered Stores, initiate the process by loading the first\n  page. The number of rows rendered are determined automatically, and\n  the range of pages needed to keep the cache primed for scrolling is\n  requested and cached. Example:\nmyStore.loadPage(1); // Load page 1\n\nA PagingScroller is instantiated which will monitor the scrolling in\n  the grid, and refresh the view's rows from the page cache as needed.\n  It will also pull new data into the page cache when scrolling of the\n  view draws upon data near either end of the prefetched data.\nThe margins which trigger view refreshing from the prefetched data are\n  Ext.grid.PagingScroller.numFromEdge,\n  Ext.grid.PagingScroller.leadingBufferZone and\n  Ext.grid.PagingScroller.trailingBufferZone.\nThe margins which trigger loading more data into the page cache are,\n  leadingBufferZone and trailingBufferZone.\nBy default, only 5 pages of data are cached in the page cache, with\n  pages \"scrolling\" out of the buffer as the view moves down through the\n  dataset. Setting this value to zero means that no pages are ever\n  scrolled out of the page cache, and that eventually the whole dataset\n  may become present in the page cache. This is sometimes desirable as\n  long as datasets do not reach astronomical proportions.\nSelection state may be maintained across page boundaries by\n  configuring the SelectionModel not to discard records from its\n  collection when those Records cycle out of the Store's primary\n  collection. This is done by configuring the SelectionModel like this:\nselModel: {\n    pruneRemoved: false\n}\n\nDefaults to: false\nAvailable since: 4.0.0\n\nAs noted above, you will also have to set thepageSize config on the store to what you want it.\nA word of warning: you don't find any examples of local stores with infinite scrolling because the number of records to make infinite scrolling viable exceeds the number of records which you should reasonably keep in a local store.\nIn other words the rendering is not the only thing that slows down the browser, it's also the amount of data you are trying to process locally.\nIf you feel you need to implement infinite scrolling it's probably time to convert to a remotely loaded data store.\n\nA:\n\nAfter an upgrade I found out that this i much easier in extJS 4.2(beta). The infinite scrolling is detached from the datastore. IE it does not matter what type of datastore you use. Also sorting is working as you want it.\nstore = Ext.create('Ext.data.SimpleStore',{\n        autoLoad: true,\n            pageSize:100,\n            data:[\n                []\n            ], \n     }\n\nExt.require('Ext.grid.plugin.BufferedRenderer') \nvar grid = Ext.create('Ext.grid.\n             plugins: 'bufferedrenderer',\n             store : store,\n        }\n//I load matrix data directly in the store for speed\nstore.loadRawData(matrixData);\n\nThe application is so much faster now.\n\n"
}