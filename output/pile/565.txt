{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "565",
    "text": "Q:\n\nhow to prevent SQL Injection in a asp.net website\n\nFor email entry in a text box by the user i am doing client side check, to find whether the email is valid or not\n string emailexist = \"SELECT COUNT(DISTINCT UserID) as count FROM tbl_user WHERE Email=@Email \";     \n\n   <asp:RegularExpressionValidator ID=\"RegularExpressionValidator2\" ValidationGroup=\"Login\" ControlToValidate=\"txtUserName\"\n                            ValidationExpression=\"\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*\" CssClass=\"Error\"\n                             runat=\"server\" />\n\nis this regular expression good enough to prevent sql injection for email.\nOther Text:\n   string groupExistQuery = \"SELECT COUNT(DISTINCT GroupID) as count FROM tbl_group WHERE GroupName=@GroupName\";   \n\nI am doing a query in server side to check whether the group name entered by the user is already available in the database, there is a strong possibility to perform sql injection here. How should I prevent from it.\n\nA:\n\nA regex is unrelated to SQL injection (blacklisting etc is never the strongest approach); however, the use of the parameter @Email means (assuming it remains parameterised) that is not susceptible to SQL injection.\nSQL injection relates to inappropriate concatenation of input; the main tool to fight it is parameters, which has already happened here.\nFor example, if you did:\nvar sql = \"SELECT ...snip... WHERE Email='\" + email + \"'\"; // BAD!!!!!\n\nthen that is heavily susceptible to SQL injection. By using a parameter, the value is not treated as part of the query, so the attacker does not have at attack vector.\n\nA:\n\nIf you use parameterised values, you are going to be fine regardless, you can not inject via parameters, only via concatenated values.\n\nA:\n\nYou can prevent it by not using Direct SQL and using parameterised queries and/or Stored Procedures instead.\n\n"
}