{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7979",
    "text": "Q:\n\nRuby on a Mac -- Regular Expression Spanning Two Lines of Text\n\nOn the PC, the following Ruby regular expression matches data. However, when run on the Mac against the same input text file, no matches occur. Am I matching line returns in a way that should work cross-platform?\ndata = nil\nFile.open(ARGV[0], \"r\") do |file|\n    data = file.readlines.join(\"\").scan(/^Name: (.*?)[\\r\\n]+Email: (.*?)$/)\nend\n\nVersions\nPC: ruby 1.9.2p135\nMac: ruby 1.8.6\nThank you,\nBen\n\nA:\n\nThe problem was the ^ and $ pattern characters! Ruby doesn't consider \\r (a.k.a. ^M) a line boundary.  If I modified my pattern, replacing both ^ and $ with \"\\r\", the pattern matched as desired. \ndata = file.readlines.join.scan(/\\rName: (.*?)\\rEmail: (.*?)\\r/)\n\nInstead of modifying the pattern, I opted to do a gsub on the text, replacing \\r with \\n before calling scan.\ndata = file.readlines.join.gsub(/\\r/, \"\\n\").scan(/^Name: (.*?)\\nEmail: (.*?)$/)\n\nThank you each for your responses to my question.\n\n"
}