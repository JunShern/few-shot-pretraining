{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4293",
    "text": "Q:\n\nwhats the standard way to setup a casperjs for travis-ci testing\n\nsurprisingly enough, when thinking about js tremendous popularity in GitHub repos, there is no \"offical\" guide to testing frontend js with Travis-ci (only node.js, a very specific subset). from my research I found out a lot of big js projects don't have Travis-ci integration (e.g jQuery) or have a very minimal travis setup (see backbone) which uses the default npm test.\nI know travis-ci runs npm testas default and runs the test named scripts from package.json. and I found a few examples running phantomjs for headless testing (which the docs don't give any details about setting up) but couldn't find canonical examples for how to setup casper.js integration tests with travis-ci.\nI'll be help for help and guidance with this\n\nA:\n\nSeems the canonical way is hiding the tests behind the default npm test which usually triggers a script (or a grunt task) running the test suite.\nyou can look at the .travis.yml in a small project I coded to see how to install casperjs for the testing.\n\n"
}