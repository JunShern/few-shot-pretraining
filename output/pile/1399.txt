{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1399",
    "text": "Q:\n\nValue not showing for input field using one way binding angular2\n\nObjective: Get a collection of values based on the dropdown selection and place them in hidden input fields to be included in my model;\nThe relative html:\n\n<select class=\"selectFoo\" (change)=\"onSelect($event.target.value)\" name=\"FooName\" ngModel>\r\n            <option selected=\"selected\">--Select--</option>\r\n            <option *ngFor=\"let foo of foos\" [value]=\"foo.ID\">{{foo.Name}}\r\n</option>\r\n</select>\r\n<input type=\"hidden\" [value]=\"fooAddress\" name=\"FooAddress\" ngModel/>\n\nIn the code above I called a function named OnSelect to get the data about the selected foo. The foos are populated using a webservice call. Here is the snippet from my ts file.\n\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { Foo } from './model';\r\n\r\nimport { DataService } from './data.service';\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'add-on',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n  foos : Foo[];\r\n\r\n  selectedFoo: Foo;\r\n  fooAddress: string;\r\n\r\n  onSelect(fooID){\r\n      this.selectedFoo = null;\r\n      for(var i = 0; i < this.foos.length; i++)\r\n      {\r\n        console.log(this.foos[i].ID);\r\n        if(this.foos[i].ID == fooID){\r\n          this.selectedFoo = this.foos[i];\r\n          this.fooAddress = this.selectedFoo.Address.toString();\r\n        }\r\n      }\r\n    }\r\n   }\n\nI originally tried one way binding my value to the selectedFoo but I was getting an error indicating my Address value wasn't defined. I noticed I could set the value equal to selectedFoo and it didn't error. So i created a new variable that was set to the fooAddress based on the selected foo. I get no value even though while stepping through the code I see it has a value.\nHow can I get my value to populate so I can use it in my model? Let me know if I need to provide anything else.\nThanks!\n\nA:\n\nIf I am correctly understanding what you are after then something like this would work:\n<select name=\"FooName\" [(ngModel)]=\"selectedFoo\">\n  <option>--Select--</option>\n  <option *ngFor=\"let foo of foos\" [ngValue]=\"foo\" >{{foo.Name}}</option>\n</select>\n<input type=\"hidden\" [value]=\"selectedFoo?.Address\" name=\"FooAddress\" />\n\n//Assuming your 'foo' items are e.g. { ID: 1, Name: 'Hello', Address: '123 Hello St'}\n\nHere you can bind the Address property of the selectedFoo directly to your hidden input field, rather than needing to handle the (change) event.\n\n"
}