{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7659",
    "text": "Q:\n\nSpring 4 @Transactional doesn't work\n\nI have a Spring 4.3 Application with simple configuration and I expect my methods from service classes to be transactional so I enable transaction management in my configuration and then annotate my service methods with @Transactional. I call service methods from my controlles but they don't behave as expected. When some part of a method throws exception rollback is never called\nAppInitializer.class:\n@EnableTransactionManagement\npublic class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class<?>[]{WebConfig.class};\n    }\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class<?>[]{RootConfig.class, SecurityConfig.class};\n    }\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};\n    }\n}\n\nRootConfig.class:\n@Configuration\n@EnableJpaRepositories(basePackages\"package.repository\"})\npublic class RootConfig {\n    @Bean\n    public DataSource dataSource() {\n        ...\n        return dataSource;\n    }\n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter() {\n        ...\n        return hibernateJpaVendorAdapter;\n    }\n    @Bean\n    public EntityManagerFactory entityManagerFactory() {\n        LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();\n        ...\n        return factory.getObject();\n    }\n    @Bean\n    public JpaTransactionManager transactionManager() {\n        return new JpaTransactionManager(entityManagerFactory());\n    }\n}\n\nDoes anybody have idea what is wrong here\nGitHub link https://github.com/VadOs1/TRANSACTIONAL-ISSUE/\nThanks\n\nA:\n\ncan you remove the @EnableTransactionManagement annotation from the AppInitializer class and enable it in RootConfig class and let me know if this worked for you\nie\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(basePackages\"package.repository\"})\npublic class RootConfig {\n    @Bean\n    public DataSource dataSource() {\n        ...\n        return dataSource;\n    }\n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter() {\n        ...\n        return hibernateJpaVendorAdapter;\n    }\n    @Bean\n    public EntityManagerFactory entityManagerFactory() {\n        LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();\n        ...\n        return factory.getObject();\n    }\n    @Bean\n    public JpaTransactionManager transactionManager() {\n        return new JpaTransactionManager(entityManagerFactory());\n    }\n}\n\n"
}