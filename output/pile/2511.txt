{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": true,
            "reason": "Text contains GRE."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 9 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "2511",
    "text": "/*\n * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage jdk.net;\n\nimport java.lang.annotation.Native;\n\n/**\n * Represents the service level properties for the platform specific socket\n * option {@link ExtendedSocketOptions#SO_FLOW_SLA}.\n * <p>\n * The priority and bandwidth parameters must be set before\n * setting the socket option.\n * <p>\n * When the {@code SO_FLOW_SLA} option is set then it may not take effect\n * immediately. If the value of the socket option is obtained with\n * {@code getOption()} then the status may be returned as {@code INPROGRESS}\n * until it takes effect. The priority and bandwidth values are only valid when\n * the status is returned as OK.\n * <p>\n * When a security manager is installed, a {@link NetworkPermission}\n * is required to set or get this option.\n *\n * @since 1.8\n */\npublic class SocketFlow {\n\n    @Native public static final int UNSET = -1;\n    @Native public static final int NORMAL_PRIORITY = 1;\n    @Native public static final int HIGH_PRIORITY = 2;\n\n    @Native private static final int NO_STATUS_VALUE = 0;\n    @Native private static final int OK_VALUE = 1;\n    @Native private static final int NO_PERMISSION_VALUE = 2;\n    @Native private static final int NOT_CONNECTED_VALUE = 3;\n    @Native private static final int NOT_SUPPORTED_VALUE = 4;\n    @Native private static final int ALREADY_CREATED_VALUE = 5;\n    @Native private static final int IN_PROGRESS_VALUE = 6;\n    @Native private static final int OTHER_VALUE = 7;\n\n    /**\n     * Enumeration of the return values from the SO_FLOW_SLA\n     * socket option. Both setting and getting the option return\n     * one of these statuses, which reflect the state of socket's\n     * flow.\n     *\n     * @since 1.8\n     */\n    public enum Status {\n        /**\n         * Set or get socket option has not been called yet. Status\n         * values can only be retrieved after calling set or get.\n         */\n        NO_STATUS(NO_STATUS_VALUE),\n        /**\n         * Flow successfully created.\n         */\n        OK(OK_VALUE),\n        /**\n         * Caller has no permission to create flow.\n         */\n        NO_PERMISSION(NO_PERMISSION_VALUE),\n        /**\n         * Flow can not be created because socket is not connected.\n         */\n        NOT_CONNECTED(NOT_CONNECTED_VALUE),\n        /**\n         * Flow creation not supported for this socket.\n         */\n        NOT_SUPPORTED(NOT_SUPPORTED_VALUE),\n        /**\n         * A flow already exists with identical attributes.\n         */\n        ALREADY_CREATED(ALREADY_CREATED_VALUE),\n        /**\n         * A flow is being created.\n         */\n        IN_PROGRESS(IN_PROGRESS_VALUE),\n        /**\n         * Some other unspecified error.\n         */\n        OTHER(OTHER_VALUE);\n\n        private final int value;\n        Status(int value) { this.value = value; }\n\n        static Status from(int value) {\n            if      (value == NO_STATUS.value)       return NO_STATUS;\n            else if (value == OK.value)              return OK;\n            else if (value == NO_PERMISSION.value)   return NO_PERMISSION;\n            else if (value == NOT_CONNECTED.value)   return NOT_CONNECTED;\n            else if (value == NOT_SUPPORTED.value)   return NOT_SUPPORTED;\n            else if (value == ALREADY_CREATED.value) return ALREADY_CREATED;\n            else if (value == IN_PROGRESS.value)     return IN_PROGRESS;\n            else if (value == OTHER.value)           return OTHER;\n            else     throw new InternalError(\"Unknown value: \" + value);\n        }\n    }\n\n    private int priority = NORMAL_PRIORITY;\n    private long bandwidth = UNSET;\n    private Status status = Status.NO_STATUS;\n\n    /**\n     * Creates a new SocketFlow that can be used to set the SO_FLOW_SLA\n     * socket option and create a socket flow.\n     */\n    public static SocketFlow create() {\n        return new SocketFlow();\n    }\n\n    private SocketFlow() { }\n\n    /**\n     * Sets this SocketFlow's priority. Must be either NORMAL_PRIORITY\n     * HIGH_PRIORITY. If not set, a flow's priority is normal.\n     *\n     * @throws IllegalArgumentException if priority is not NORMAL_PRIORITY or\n     *         HIGH_PRIORITY.\n     */\n    public SocketFlow priority(int priority) {\n        if (priority != NORMAL_PRIORITY && priority != HIGH_PRIORITY)\n            throw new IllegalArgumentException(\"invalid priority :\" + priority);\n        this.priority = priority;\n        return this;\n    }\n\n    /**\n     * Sets this SocketFlow's bandwidth. Must be greater than or equal to zero.\n     * A value of zero drops all packets for the socket.\n     *\n     * @throws IllegalArgumentException if bandwidth is less than zero.\n     */\n    public SocketFlow bandwidth(long bandwidth) {\n        if (bandwidth < 0)\n            throw new IllegalArgumentException(\"invalid bandwidth: \" + bandwidth);\n        this.bandwidth = bandwidth;\n        return this;\n    }\n\n    /**\n     * Returns this SocketFlow's priority.\n     */\n    public int priority() {\n        return priority;\n    }\n\n    /**\n     * Returns this SocketFlow's bandwidth.\n     *\n     * @return this SocketFlow's bandwidth, or {@code -1} if status is not OK.\n     */\n    public long bandwidth() {\n        return bandwidth;\n    }\n\n    /**\n     * Returns the Status value of this SocketFlow. NO_STATUS is returned\n     * if the object was not used in a call to set or get the option.\n     */\n    public Status status() {\n        return status;\n    }\n\n    void status(int status) {\n        this.status = Status.from(status);\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(super.toString());\n        sb.append(\" [ priority=\").append(priority())\n          .append(\", bandwidth=\").append(bandwidth())\n          .append(\", status=\").append(status())\n          .append(\" ]\");\n        return sb.toString();\n    }\n}\n"
}