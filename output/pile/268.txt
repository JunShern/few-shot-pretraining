{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['The details in the specification of an execution model cover things such as what is an indivisible unit of work, and what are the constraints on the order in which those units of work take place. (0.193)', 'For example, the addition operation is an indivisible unit of work in many languages, and in sequential languages such units of work are constrained to take place one after the other. (0.180)', 'The order of precedence can be viewed as stating the constraints on performing the units of work that are within a single statement. (0.199)']."
        }
    ],
    "doc_id": "268",
    "text": "\u03b2\n\nExecution model\n\nAn execution model specifies how work takes place. Every programming language has an execution model, which is specified as part of the language specification, and is implemented as part of the language implementation. The details in the specification of an execution model cover things such as what is an indivisible unit of work, and what are the constraints on the order in which those units of work take place. For example, the addition operation is an indivisible unit of work in many languages, and in sequential languages such units of work are constrained to take place one after the other.\n\nIn particular, the C programming language, has a concept called a statement. The spec says that a statement is a chunk of syntax that is terminated by a \";\". The language spec then says that execution of the program proceeds statement by statement, which tells us something about the execution model of the language. It tells us that statements are indivisible units of work and that they proceed in the same order as their syntactic appearance in the code (except when a control statement such as IF or WHILE modifies the order). By stating the order in which statements are executed, the language spec has stated constraints on the order of performing units of work. The C language actually has an additional level to its execution model, which is the order of precedence. It states the rules for the order of operations within a single statement. The order of precedence can be viewed as stating the constraints on performing the units of work that are within a single statement. So, \";\" and \"IF\" and \"WHILE\" cover constraints on the order of statements, while order of precedence covers constraints on work within a statement. Hence, these parts of the C language specification are stating the execution model of the C language.\n\nAn implementation of an execution model controls the order in which work takes place during execution. This order may be chosen ahead of time, in some situations, or it can be dynamically determined as the execution proceeds. Most execution models allow varying degrees of both. For example, the C language fixes the order of work within a statement and it fixes the order of all statements, except ones that involve an IF statement or a form of loop statement. Hence, most of the order of execution may be chosen statically, before execution begins, but a small portion must be chosen dynamically, as execution proceeds.\n\nThe static choices are most often implemented inside a compiler, in which case the order of work is represented by the order in which instructions are placed into the executable binary. The dynamic choices would then be implemented inside the language's runtime system. The runtime system may be a library, which is called by instructions inserted by the compiler, or the runtime system may be embedded into the executable directly, such as by inserting branch instructions, which make dynamic choices about which work to perform next.\n\nHowever, an interpreter may also be constructed for any language, in which case all decisions on order of execution are dynamic. An interpreter can be viewed as being part translator, and part execution model implementation.\n\nEach and every programming language has an execution model, which determines the manner in which the units of work (that are indicated by program syntax) are scheduled for execution. Detailed examples of the specification of execution models of a few popular languages include those of Python,[1] the execution model of the Unified Parallel C (UPC) programming language, [2] a discussion of various classes of execution model such as for imperative versus functional languages,[3] and an article discussing execution models for real-time embedded languages.[4]\n\nAs a simple example of a basic execution model, that of the C language is described in the book by Kernighan and Richie.[5] The book describes that work takes places in units called statements, which are syntactically indicated by a terminating \";\". It specifies that statements are completed serially (one at a time) and sequentially (a previous statement completes before the next statement begins). Details such as this are part of the execution model.\n\nIn the modern age, parallel programming is an increasingly important topic. Parallel execution models (several at a time) are much more complex. For example, the C++11 standard includes sizeable wording that deals with the parallel execution model of the language."
}