{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 10 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "8425",
    "text": "package io.cucumber.junit;\n\nimport io.cucumber.plugin.Plugin;\nimport org.apiguardian.api.API;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Configure Cucumbers options.\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.TYPE })\n@API(status = API.Status.STABLE)\npublic @interface CucumberOptions {\n\n    /**\n     * @return true if glue code execution should be skipped.\n     */\n    boolean dryRun() default false;\n\n    /**\n     * @return     true if undefined and pending steps should be treated as\n     *             errors.\n     * @deprecated will be removed and cucumber will default to strict\n     */\n    @Deprecated\n    boolean strict() default true;\n\n    /**\n     * Either a URI or path to a directory of features or a URI or path to a\n     * single feature optionally followed by a colon and line numbers.\n     * <p>\n     * When no feature path is provided, Cucumber will use the package of the\n     * annotated class. For example, if the annotated class is\n     * {@code com.example.RunCucumber} then features are assumed to be located\n     * in {@code classpath:com/example}.\n     *\n     * @return list of files or directories\n     * @see    io.cucumber.core.feature.FeatureWithLines\n     */\n    String[] features() default {};\n\n    /**\n     * Package to load glue code (step definitions, hooks and plugins) from.\n     * E.g: {@code com.example.app}\n     * <p>\n     * When no glue is provided, Cucumber will use the package of the annotated\n     * class. For example, if the annotated class is\n     * {@code com.example.RunCucumber} then glue is assumed to be located in\n     * {@code com.example}.\n     *\n     * @return list of package names\n     * @see    io.cucumber.core.feature.GluePath\n     */\n    String[] glue() default {};\n\n    /**\n     * Package to load additional glue code (step definitions, hooks and\n     * plugins) from. E.g: {@code com.example.app}\n     * <p>\n     * These packages are used in addition to the default described in\n     * {@code #glue}.\n     *\n     * @return list of package names\n     */\n    String[] extraGlue() default {};\n\n    /**\n     * Only run scenarios tagged with tags matching {@code TAG_EXPRESSION}.\n     * <p>\n     * For example {@code \"@smoke and not @fast\"}.\n     *\n     * @return a tag expression\n     */\n    String tags() default \"\";\n\n    /**\n     * Register plugins. Built-in plugin types: {@code junit}, {@code html},\n     * {@code pretty}, {@code progress}, {@code json}, {@code usage},\n     * {@code unused}, {@code rerun}, {@code testng}.\n     * <p>\n     * Can also be a fully qualified class name, allowing registration of 3rd\n     * party plugins.\n     * <p>\n     * Plugins can be provided with an argument. For example\n     * {@code json:target/cucumber-report.json}\n     *\n     * @return list of plugins\n     * @see    Plugin\n     */\n    String[] plugin() default {};\n\n    /**\n     * Publish report to https://reports.cucumber.io.\n     * <p>\n     * \n     * @return true if reports should be published on the web.\n     */\n    boolean publish() default false;\n\n    /**\n     * @return true if terminal output should be without colours.\n     */\n    boolean monochrome() default false;\n\n    /**\n     * Only run scenarios whose names match one of the provided regular\n     * expressions.\n     *\n     * @return a list of regular expressions\n     */\n    String[] name() default {};\n\n    /**\n     * @return the format of the generated snippets.\n     */\n    SnippetType snippets() default SnippetType.UNDERSCORE;\n\n    /**\n     * Use filename compatible names.\n     * <p>\n     * Make sure that the names of the test cases only is made up of\n     * [A-Za-Z0-9_] so that the names for certain can be used as file names.\n     * <p>\n     * Gradle for instance will use these names in the file names of the JUnit\n     * xml report files.\n     *\n     * @return true to enforce the use of well-formed file names\n     */\n    boolean useFileNameCompatibleName() default false;\n\n    /**\n     * Provide step notifications.\n     * <p>\n     * By default steps are not included in notifications and descriptions. This\n     * aligns test case in the Cucumber-JVM domain (Scenarios) with the test\n     * case in the JUnit domain (the leafs in the description tree), and works\n     * better with the report files of the notification listeners like maven\n     * surefire or gradle.\n     *\n     * @return true to include steps should be included in notifications\n     */\n    boolean stepNotifications() default false;\n\n    /**\n     * Specify a custom ObjectFactory.\n     * <p>\n     * In case a custom ObjectFactory is needed, the class can be specified\n     * here. A custom ObjectFactory might be needed when more granular control\n     * is needed over the dependency injection mechanism.\n     *\n     * @return an {@link io.cucumber.core.backend.ObjectFactory} implementation\n     */\n    Class<? extends io.cucumber.core.backend.ObjectFactory> objectFactory() default NoObjectFactory.class;\n\n    enum SnippetType {\n        UNDERSCORE, CAMELCASE\n    }\n\n}\n"
}