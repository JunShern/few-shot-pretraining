{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": true,
            "reason": "Text contains Q:."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": true,
            "reason": "Text contains ['Q:', 'A:', 'A:']."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": false,
            "reason": "Found 0 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "1645",
    "text": "Q:\n\nImplementing FluentSecurity over Ninject (aka porting StructureMap to Ninject)\n\nI'm a beginner on IoC and dependency injection. I'm reading about it, but I just can't get it.\nWhile I figure out how stuff works, I'm trying to implement some of these patterns on my project (and maybe learn by trial and error).\nI'm implementing security control by using FluentSecurity package (from NuGet, btw). I need to implement a Policy Violation Handler, as described on this wiki. The problem is that the example is written for StructureMap IoC-container, and I'm using (or trying to) Ninject 2.2 (it seemed more simple for a beginner).\nOn their code, they suggest (a):\nconfiguration.ResolveServicesUsing(type => ObjectFactory.GetAllInstances(type).Cast<object>());\n\nAnd then (b):\npublic class WebRegistry : Registry\n{\n    public WebRegistry()\n    {\n        Scan(scan =>\n        {\n            scan.TheCallingAssembly();\n            scan.AddAllTypesOf<IPolicyViolationHandler>();\n        });\n    }\n}\n\nMy concerns:\n\nI know that code (a) will be included on Global.asax. But what is Ninject's alternative to ObjectFactory.GetAllInstances()?\nI have no idea neither where this code should be inserted nor what are the equivalents for WebRegistry, Scan, and the internal functions TheCallingAssembly and AddAllTypesOf.\n\nI know this is a bit extensive question, but I appreciate any help! Thanks in advance.\n\nA:\n\nMarius Schulz has written an excellent article that should help anyone wanting to use Ninject together with FluentSecurity.\nSetting Up FluentSecurity to Use Ninject for Dependency Resolution\n\nA:\n\nI think this would be roughly equivelent\n//add an instance of IKernel to your MvcApplication\n[Inject]\npublic IKernel Kernel { get; set; }\n...\nconfiguration.ResolveServicesUsing(type => Kernel.GetAll(type));\n\nTo get the ability to scan an assembly for dependencies you would need an extension for ninject called Ninject.Extensions.Conventions, which was modeled after the one from SM.\npublic class WebModule : NinjectModule\n{\n    public WebModule()\n    {\n        Kernel.Scan(a => {\n                    a.FromAssemblyContaining<YourType>();\n                    a.BindWithDefaultConventions();\n                    a.InTransientScope();\n                });\n    }\n}\n\nThe assembly scanning business obviously isn't strictly necassary for what you're doing, this would work just as well.  Personally I'm not a fan of assembly scanning because it seems a little too \"magic\", and when it doesn't work, it's not fun to debug.\nKernel.Bind<YourType>().ToSelf();\n\n"
}