{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 6 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "4814",
    "text": "\ufeff/**\n * This file is part of Tales of Zestiria \"Fix\".\n *\n * Tales of Zestiria \"Fix\" is free software : you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by The Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * Tales of Zestiria \"Fix\" is distributed in the hope that it will be\n * useful,\n *\n * But WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tales of Zestiria \"Fix\".\n *\n *   If not, see <http://www.gnu.org/licenses/>.\n *\n**/\n\n#include <Windows.h>\n\n#include \"config.h\"\n#include \"log.h\"\n\n#include \"sound.h\"\n#include \"framerate.h\"\n#include \"general_io.h\"\n#include \"keyboard.h\"\n#include \"steam.h\"\n#include \"render.h\"\n#include \"scanner.h\"\n\n#include \"command.h\"\n\n#include \"hook.h\"\n\n#include <process.h>\n\n#pragma comment (lib, \"kernel32.lib\")\n\nHMODULE hDLLMod      = { 0 }; // Handle to SELF\nHMODULE hInjectorDLL = { 0 }; // Handle to Special K\n\ntypedef HRESULT (__stdcall *SK_UpdateSoftware_pfn)(const wchar_t* wszProduct);\ntypedef bool    (__stdcall *SK_FetchVersionInfo_pfn)(const wchar_t* wszProduct);\n\nstd::wstring injector_dll;\n\ntypedef void (__stdcall *SKX_SetPluginName_pfn)(std::wstring name);\nSKX_SetPluginName_pfn SKX_SetPluginName = nullptr;\n\nunsigned int\nWINAPI\nDllThread (LPVOID user)\n{\n  std::wstring plugin_name = L\"Tales of Zestiria \\\"Fix\\\" v \" + TZF_VER_STR;\n\n  dll_log = TZF_CreateLog (L\"logs/tzfix.log\");\n\n  dll_log->LogEx ( false, L\"------- [Tales of Zestiria  \\\"Fix\\\"] \"\n                          L\"-------\\n\" ); // <--- I was bored ;)\n  dll_log->Log   (        L\"tzfix.dll Plug-In\\n\"\n                          L\"=========== (Version: v %s) \"\n                          L\"===========\",\n                            TZF_VER_STR.c_str () );\n\n  DWORD speedresetcode_addr  = 0x0046C0F9; //0x0046C529;\n  DWORD speedresetcode2_addr = 0x0056EB41; //0x0056E441;  0x217B464\n  DWORD speedresetcode3_addr = 0x0056E03E; //0x0056D93F;\n  DWORD limiter_branch_addr  = 0x00990F53; //0x00990873;\n  DWORD aspect_addr          = 0x00D52388; //0x00D52398;\n  DWORD fovy_addr            = 0x00D5238C; //0x00D5239C;\n\n  if (! TZF_LoadConfig ()) {\n    config.audio.channels                 = 8;\n    config.audio.sample_hz                = 48000;\n    config.audio.compatibility            = false;\n    config.audio.enable_fix               = true;\n\n    config.framerate.allow_fake_sleep     = false;\n    config.framerate.yield_processor      = true;\n    config.framerate.minimize_latency     = false;\n    config.framerate.speedresetcode_addr  = 0x0046C0F9;\n    config.framerate.speedresetcode2_addr = 0x0056EB41;\n    config.framerate.speedresetcode3_addr = 0x0056E03E;\n    config.framerate.limiter_branch_addr  = 0x00990873;\n    config.framerate.disable_limiter      = true;\n    config.framerate.auto_adjust          = false;\n    config.framerate.target               = 60;\n    config.framerate.battle_target        = 60;\n    config.framerate.battle_adaptive      = false;\n    config.framerate.cutscene_target      = 30;\n\n    config.file_io.capture                = false;\n\n    config.steam.allow_broadcasts         = false;\n\n    config.lua.fix_priest                 = true;\n\n    config.render.aspect_ratio            = 1.777778f;\n    config.render.fovy                    = 0.785398f;\n\n    config.render.aspect_addr             = 0x00D56494;\n    config.render.fovy_addr               = 0x00D56498;\n    config.render.blackbar_videos         = true;\n    config.render.aspect_correction       = true;\n    config.render.postproc_ratio          =  1.0f;\n    config.render.shadow_rescale          = -2;\n    config.render.env_shadow_rescale      =  0;\n    config.render.clear_blackbars         = true;\n\n    config.textures.remaster              = true;\n    config.textures.dump                  = false;\n    config.textures.cache                 = true;\n    config.textures.gamepad               = L\"Xbox360\";\n\n    config.system.injector = injector_dll;\n\n    // Save a new config if none exists\n    TZF_SaveConfig ();\n  }\n\n  config.system.injector = injector_dll;\n\n  SKX_SetPluginName = \n    (SKX_SetPluginName_pfn)\n      GetProcAddress (hInjectorDLL, \"SKX_SetPluginName\");\n  SK_GetCommandProcessor =\n    (SK_GetCommandProcessor_pfn)\n      GetProcAddress (hInjectorDLL, \"SK_GetCommandProcessor\");\n\n  //\n  // If this is NULL, the injector system isn't working right!!!\n  //\n  if (SKX_SetPluginName != nullptr)\n    SKX_SetPluginName (plugin_name.c_str ());\n\n  // Locate the gamestate address; having this as the first thing in the log\n  //   file is tremendously handy in identifying which client version a user\n  //     is running.\n  {\n    uint8_t  sig [] = { 0x74, 0x42, 0xB1, 0x01, 0x38, 0x1D };\n    uintptr_t addr  = (uintptr_t)TZF_Scan (sig, 6);\n\n    if (addr != NULL) {\n      game_state.base_addr = (BYTE *)(*(DWORD *)(addr + 6) - 0x13);\n      dll_log->Log (L\"[ Sig Scan ] Scanned Gamestate Address: %06Xh\", game_state.base_addr);\n    }\n  }\n\n  if (TZF_Init_MinHook () == MH_OK) {\n    extern void TZFix_ImGui_Init (void);\n                TZFix_ImGui_Init ();\n\n    CoInitializeEx (nullptr, COINIT_MULTITHREADED);\n\n    tzf::SoundFix::Init     ();\n    tzf::FileIO::Init       ();\n    tzf::SteamFix::Init     ();\n    tzf::RenderFix::Init    ();\n    tzf::FrameRateFix::Init ();\n    tzf::KeyboardFix::Init  ();\n\n    TZF_ApplyQueuedHooks ();\n\n    // Uncomment this when spawning a thread\n    //CoUninitialize ();\n  }\n\n  SK_UpdateSoftware_pfn SK_UpdateSoftware =\n    (SK_UpdateSoftware_pfn)\n      GetProcAddress ( hInjectorDLL,\n                         \"SK_UpdateSoftware\" );\n\n  SK_FetchVersionInfo_pfn SK_FetchVersionInfo =\n    (SK_FetchVersionInfo_pfn)\n      GetProcAddress ( hInjectorDLL,\n                         \"SK_FetchVersionInfo\" );\n\n  if (! wcsstr (injector_dll.c_str (), L\"SpecialK\")) {\n    if ( SK_FetchVersionInfo != nullptr &&\n         SK_UpdateSoftware   != nullptr ) {\n      if (SK_FetchVersionInfo (L\"TZF\")) {\n        SK_UpdateSoftware (L\"TZF\");\n      }\n    }\n  }\n\n  return 0;\n}\n\n__declspec (dllexport)\nBOOL\nWINAPI\nSKPlugIn_Init (HMODULE hModSpecialK)\n{\n  wchar_t wszSKFileName [ MAX_PATH + 2] = { L'\\0' };\n          wszSKFileName [   MAX_PATH  ] =   L'\\0';\n\n  GetModuleFileName (hModSpecialK, wszSKFileName, MAX_PATH - 1);\n\n  injector_dll = wszSKFileName;\n\n  hInjectorDLL = hModSpecialK;\n\n#if 1\n  DllThread (nullptr);\n#else\n  _beginthreadex ( nullptr, 0, DllThread, nullptr, 0x00, nullptr );\n#endif\n\n  return TRUE;\n}\n\n__declspec (dllexport)\nBOOL\nWINAPI\nSKPlugIn_Shutdown (LPVOID* lpReserved)\n{\n  UNREFERENCED_PARAMETER (lpReserved);\n\n  if (dll_log != nullptr) {\n    tzf::SoundFix::Shutdown     ();\n    tzf::FileIO::Shutdown       ();\n    tzf::SteamFix::Shutdown     ();\n    tzf::RenderFix::Shutdown    ();\n    tzf::FrameRateFix::Shutdown ();\n    tzf::KeyboardFix::Shutdown  ();\n\n    TZF_SaveConfig     ();\n    TZF_UnInit_MinHook ();\n\n\n    dll_log->LogEx ( false, L\"=========== (Version: v %s) \"\n                            L\"===========\\n\",\n                              TZF_VER_STR.c_str () );\n    dll_log->LogEx ( true,  L\"End TZFix Plug-In\\n\" );\n    dll_log->LogEx ( false, L\"------- [Tales of Zestiria  \\\"Fix\\\"] \"\n                            L\"-------\\n\" );\n\n    dll_log->close ();\n  }\n\n  return TRUE;\n}\n\nBOOL\nAPIENTRY\nDllMain (HMODULE hModule,\n         DWORD    ul_reason_for_call,\n         LPVOID  /* lpReserved */)\n{\n  switch (ul_reason_for_call)\n  {\n    case DLL_PROCESS_ATTACH:\n    {\n      hDLLMod = hModule;\n    } break;\n\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n      break;\n\n    case DLL_PROCESS_DETACH:\n    {\n    } break;\n  }\n\n  return TRUE;\n}"
}