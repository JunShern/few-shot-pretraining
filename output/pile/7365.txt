{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "Domain",
            "passed": false,
            "reason": "Document source unavailable."
        },
        {
            "criterion": "QuestionAnswerStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefix",
            "passed": true,
            "reason": "Found 50 list prefixes. (Min: 5)"
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "7365",
    "text": "<?php\r\n/**\r\n * SessionTest file\r\n *\r\n * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>\r\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\r\n *\r\n * Licensed under The MIT License\r\n * For full copyright and license information, please see the LICENSE.txt\r\n * Redistributions of files must retain the above copyright notice\r\n *\r\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\r\n * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests\r\n * @package       Cake.Test.Case.Model.Datasource\r\n * @since         CakePHP(tm) v 1.2.0.4206\r\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\r\n */\r\n\r\nApp::uses('CakeSession', 'Model/Datasource');\r\nApp::uses('DatabaseSession', 'Model/Datasource/Session');\r\nApp::uses('CacheSession', 'Model/Datasource/Session');\r\n\r\n/**\r\n * TestCakeSession\r\n *\r\n * @package       Cake.Test.Case.Model.Datasource\r\n */\r\nclass TestCakeSession extends CakeSession {\r\n\r\n\tpublic static function setUserAgent($value) {\r\n\t\tstatic::$_userAgent = $value;\r\n\t}\r\n\r\n\tpublic static function setHost($host) {\r\n\t\tstatic::_setHost($host);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * TestCacheSession\r\n *\r\n * @package       Cake.Test.Case.Model.Datasource\r\n */\r\nclass TestCacheSession extends CacheSession {\r\n\r\n\tprotected function _writeSession() {\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * TestDatabaseSession\r\n *\r\n * @package       Cake.Test.Case.Model.Datasource\r\n */\r\nclass TestDatabaseSession extends DatabaseSession {\r\n\r\n\tprotected function _writeSession() {\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * CakeSessionTest class\r\n *\r\n * @package       Cake.Test.Case.Model.Datasource\r\n */\r\nclass CakeSessionTest extends CakeTestCase {\r\n\r\n\tprotected static $_gcDivisor;\r\n\r\n/**\r\n * Fixtures used in the SessionTest\r\n *\r\n * @var array\r\n */\r\n\tpublic $fixtures = array('core.session');\r\n\r\n/**\r\n * setup before class.\r\n *\r\n * @return void\r\n */\r\n\tpublic static function setupBeforeClass() {\r\n\t\t// Make sure garbage colector will be called\r\n\t\tstatic::$_gcDivisor = ini_get('session.gc_divisor');\r\n\t\tini_set('session.gc_divisor', '1');\r\n\t}\r\n\r\n/**\r\n * teardown after class\r\n *\r\n * @return void\r\n */\r\n\tpublic static function teardownAfterClass() {\r\n\t\t// Revert to the default setting\r\n\t\tini_set('session.gc_divisor', static::$_gcDivisor);\r\n\t}\r\n\r\n/**\r\n * setUp method\r\n *\r\n * @return void\r\n */\r\n\tpublic function setUp() {\r\n\t\tparent::setUp();\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'defaults' => 'php',\r\n\t\t\t'cookie' => 'cakephp',\r\n\t\t\t'timeout' => 120,\r\n\t\t\t'cookieTimeout' => 120,\r\n\t\t\t'ini' => array(),\r\n\t\t));\r\n\t}\r\n\r\n/**\r\n * tearDown method\r\n *\r\n * @return void\r\n */\r\n\tpublic function tearDown() {\r\n\t\tif (TestCakeSession::started()) {\r\n\t\t\tsession_write_close();\r\n\t\t}\r\n\t\tunset($_SESSION);\r\n\t\tparent::tearDown();\r\n\t}\r\n\r\n/**\r\n * test setting ini properties with Session configuration.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testSessionConfigIniSetting() {\r\n\t\t$_SESSION = null;\r\n\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'cookie' => 'test',\r\n\t\t\t'checkAgent' => false,\r\n\t\t\t'timeout' => 86400,\r\n\t\t\t'ini' => array(\r\n\t\t\t\t'session.referer_check' => 'example.com',\r\n\t\t\t\t'session.use_trans_sid' => false\r\n\t\t\t)\r\n\t\t));\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertEquals('', ini_get('session.use_trans_sid'), 'Ini value is incorrect');\r\n\t\t$this->assertEquals('example.com', ini_get('session.referer_check'), 'Ini value is incorrect');\r\n\t\t$this->assertEquals('test', ini_get('session.name'), 'Ini value is incorrect');\r\n\t}\r\n\r\n/**\r\n * testSessionPath\r\n *\r\n * @return void\r\n */\r\n\tpublic function testSessionPath() {\r\n\t\tTestCakeSession::init('/index.php');\r\n\t\t$this->assertEquals('/', TestCakeSession::$path);\r\n\r\n\t\tTestCakeSession::init('/sub_dir/index.php');\r\n\t\t$this->assertEquals('/sub_dir/', TestCakeSession::$path);\r\n\t}\r\n\r\n/**\r\n * testCakeSessionPathEmpty\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCakeSessionPathEmpty() {\r\n\t\tTestCakeSession::init('');\r\n\t\t$this->assertEquals('/', TestCakeSession::$path, 'Session path is empty, with \"\" as $base needs to be /');\r\n\t}\r\n\r\n/**\r\n * testCakeSessionPathContainsParams\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCakeSessionPathContainsQuestion() {\r\n\t\tTestCakeSession::init('/index.php?');\r\n\t\t$this->assertEquals('/', TestCakeSession::$path);\r\n\t}\r\n\r\n/**\r\n * testSetHost\r\n *\r\n * @return void\r\n */\r\n\tpublic function testSetHost() {\r\n\t\tTestCakeSession::init();\r\n\t\tTestCakeSession::setHost('cakephp.org');\r\n\t\t$this->assertEquals('cakephp.org', TestCakeSession::$host);\r\n\t}\r\n\r\n/**\r\n * testSetHostWithPort\r\n *\r\n * @return void\r\n */\r\n\tpublic function testSetHostWithPort() {\r\n\t\tTestCakeSession::init();\r\n\t\tTestCakeSession::setHost('cakephp.org:443');\r\n\t\t$this->assertEquals('cakephp.org', TestCakeSession::$host);\r\n\t}\r\n\r\n/**\r\n * test valid with bogus user agent.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testValidBogusUserAgent() {\r\n\t\tConfigure::write('Session.checkAgent', true);\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertTrue(TestCakeSession::valid(), 'Newly started session should be valid');\r\n\r\n\t\tTestCakeSession::userAgent('bogus!');\r\n\t\t$this->assertFalse(TestCakeSession::valid(), 'user agent mismatch should fail.');\r\n\t}\r\n\r\n/**\r\n * test valid with bogus user agent.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testValidTimeExpiry() {\r\n\t\tConfigure::write('Session.checkAgent', true);\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertTrue(TestCakeSession::valid(), 'Newly started session should be valid');\r\n\r\n\t\tTestCakeSession::$time = strtotime('next year');\r\n\t\t$this->assertFalse(TestCakeSession::valid(), 'time should cause failure.');\r\n\t}\r\n\r\n/**\r\n * testCheck method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCheck() {\r\n\t\tTestCakeSession::write('SessionTestCase', 'value');\r\n\t\t$this->assertTrue(TestCakeSession::check('SessionTestCase'));\r\n\r\n\t\t$this->assertFalse(TestCakeSession::check('NotExistingSessionTestCase'));\r\n\t}\r\n\r\n/**\r\n * testSimpleRead method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testSimpleRead() {\r\n\t\tTestCakeSession::write('testing', '1,2,3');\r\n\t\t$result = TestCakeSession::read('testing');\r\n\t\t$this->assertEquals('1,2,3', $result);\r\n\r\n\t\tTestCakeSession::write('testing', array('1' => 'one', '2' => 'two', '3' => 'three'));\r\n\t\t$result = TestCakeSession::read('testing.1');\r\n\t\t$this->assertEquals('one', $result);\r\n\r\n\t\t$result = TestCakeSession::read('testing');\r\n\t\t$this->assertEquals(array('1' => 'one', '2' => 'two', '3' => 'three'), $result);\r\n\r\n\t\t$result = TestCakeSession::read();\r\n\t\t$this->assertTrue(isset($result['testing']));\r\n\t\t$this->assertTrue(isset($result['Config']));\r\n\t\t$this->assertTrue(isset($result['Config']['userAgent']));\r\n\r\n\t\tTestCakeSession::write('This.is.a.deep.array.my.friend', 'value');\r\n\t\t$result = TestCakeSession::read('This.is.a.deep.array.my.friend');\r\n\t\t$this->assertEquals('value', $result);\r\n\t}\r\n\r\n/**\r\n * testReadyEmpty\r\n *\r\n * @return void\r\n */\r\n\tpublic function testReadyEmpty() {\r\n\t\t$this->assertNull(TestCakeSession::read(''));\r\n\t}\r\n\r\n/**\r\n * test writing a hash of values/\r\n *\r\n * @return void\r\n */\r\n\tpublic function testWriteArray() {\r\n\t\t$result = TestCakeSession::write(array(\r\n\t\t\t'one' => 1,\r\n\t\t\t'two' => 2,\r\n\t\t\t'three' => array('something'),\r\n\t\t\t'null' => null\r\n\t\t));\r\n\t\t$this->assertTrue($result);\r\n\t\t$this->assertEquals(1, TestCakeSession::read('one'));\r\n\t\t$this->assertEquals(array('something'), TestCakeSession::read('three'));\r\n\t\t$this->assertEquals(null, TestCakeSession::read('null'));\r\n\t}\r\n\r\n/**\r\n * testWriteEmptyKey\r\n *\r\n * @return void\r\n */\r\n\tpublic function testWriteEmptyKey() {\r\n\t\t$this->assertTrue(TestCakeSession::write('', 'graham'));\r\n\t\t$this->assertTrue(TestCakeSession::write('', ''));\r\n\t\t$this->assertTrue(TestCakeSession::write(''));\r\n\t}\r\n\r\n/**\r\n * Test overwriting a string value as if it were an array.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testWriteOverwriteStringValue() {\r\n\t\tTestCakeSession::write('Some.string', 'value');\r\n\t\t$this->assertEquals('value', TestCakeSession::read('Some.string'));\r\n\r\n\t\tTestCakeSession::write('Some.string.array', array('values'));\r\n\t\t$this->assertEquals(\r\n\t\t\tarray('values'),\r\n\t\t\tTestCakeSession::read('Some.string.array')\r\n\t\t);\r\n\t}\r\n\r\n/**\r\n * Test consuming session data.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testConsume() {\r\n\t\tTestCakeSession::write('Some.string', 'value');\r\n\t\tTestCakeSession::write('Some.array', array('key1' => 'value1', 'key2' => 'value2'));\r\n\t\t$this->assertEquals('value', TestCakeSession::read('Some.string'));\r\n\t\t$value = TestCakeSession::consume('Some.string');\r\n\t\t$this->assertEquals('value', $value);\r\n\t\t$this->assertFalse(TestCakeSession::check('Some.string'));\r\n\t\t$value = TestCakeSession::consume('');\r\n\t\t$this->assertNull($value);\r\n\t\t$value = TestCakeSession::consume(null);\r\n\t\t$this->assertNull($value);\r\n\t\t$value = TestCakeSession::consume('Some.array');\r\n\t\t$expected = array('key1' => 'value1', 'key2' => 'value2');\r\n\t\t$this->assertEquals($expected, $value);\r\n\t\t$this->assertFalse(TestCakeSession::check('Some.array'));\r\n\t}\r\n\r\n/**\r\n * testId method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testId() {\r\n\t\tTestCakeSession::destroy();\r\n\r\n\t\t$result = TestCakeSession::id();\r\n\t\t$expected = session_id();\r\n\t\t$this->assertEquals($expected, $result);\r\n\r\n\t\tTestCakeSession::id('MySessionId');\r\n\t\t$result = TestCakeSession::id();\r\n\t\t$this->assertEquals('MySessionId', $result);\r\n\t}\r\n\r\n/**\r\n * testStarted method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testStarted() {\r\n\t\tunset($_SESSION);\r\n\t\t$_SESSION = null;\r\n\r\n\t\t$this->assertFalse(TestCakeSession::started());\r\n\t\t$this->assertTrue(TestCakeSession::start());\r\n\t\t$this->assertTrue(TestCakeSession::started());\r\n\t}\r\n\r\n/**\r\n * testDel method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testDelete() {\r\n\t\t$this->assertTrue(TestCakeSession::write('Delete.me', 'Clearing out'));\r\n\t\t$this->assertTrue(TestCakeSession::delete('Delete.me'));\r\n\t\t$this->assertFalse(TestCakeSession::check('Delete.me'));\r\n\t\t$this->assertTrue(TestCakeSession::check('Delete'));\r\n\r\n\t\t$this->assertTrue(TestCakeSession::write('Clearing.sale', 'everything must go'));\r\n\t\t$this->assertFalse(TestCakeSession::delete(''));\r\n\t\t$this->assertTrue(TestCakeSession::check('Clearing.sale'));\r\n\t\t$this->assertFalse(TestCakeSession::delete(null));\r\n\t\t$this->assertTrue(TestCakeSession::check('Clearing.sale'));\r\n\r\n\t\t$this->assertTrue(TestCakeSession::delete('Clearing'));\r\n\t\t$this->assertFalse(TestCakeSession::check('Clearing.sale'));\r\n\t\t$this->assertFalse(TestCakeSession::check('Clearing'));\r\n\t}\r\n\r\n/**\r\n * test delete\r\n *\r\n * @return void\r\n */\r\n\tpublic function testDeleteEmptyString() {\r\n\t\tTestCakeSession::write('', 'empty string');\r\n\t\t$this->assertTrue(TestCakeSession::delete(''));\r\n\t\t$this->assertFalse(TestCakeSession::check(''));\r\n\t}\r\n\r\n/**\r\n * testClear method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testClear() {\r\n\t\t$this->assertTrue(TestCakeSession::write('Delete.me', 'Clearing out'));\r\n\t\tTestCakeSession::clear(false);\r\n\t\t$this->assertFalse(TestCakeSession::check('Delete.me'));\r\n\t\t$this->assertFalse(TestCakeSession::check('Delete'));\r\n\r\n\t\tTestCakeSession::write('Some.string', 'value');\r\n\t\tTestCakeSession::clear(false);\r\n\t\t$this->assertNull(TestCakeSession::read('Some'));\r\n\r\n\t\tTestCakeSession::write('Some.string.array', array('values'));\r\n\t\tTestCakeSession::clear(false);\r\n\t\t$this->assertFalse(TestCakeSession::read());\r\n\t}\r\n\r\n/**\r\n * testDestroy method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testDestroy() {\r\n\t\tTestCakeSession::write('bulletProof', 'invincible');\r\n\t\t$id = TestCakeSession::id();\r\n\t\tTestCakeSession::destroy();\r\n\r\n\t\t$this->assertFalse(TestCakeSession::check('bulletProof'));\r\n\t\t$this->assertNotEquals(TestCakeSession::id(), $id);\r\n\t}\r\n\r\n/**\r\n * testCheckingSavedEmpty method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCheckingSavedEmpty() {\r\n\t\t$this->assertTrue(TestCakeSession::write('SessionTestCase', 0));\r\n\t\t$this->assertTrue(TestCakeSession::check('SessionTestCase'));\r\n\r\n\t\t$this->assertTrue(TestCakeSession::write('SessionTestCase', '0'));\r\n\t\t$this->assertTrue(TestCakeSession::check('SessionTestCase'));\r\n\r\n\t\t$this->assertTrue(TestCakeSession::write('SessionTestCase', false));\r\n\t\t$this->assertTrue(TestCakeSession::check('SessionTestCase'));\r\n\r\n\t\t$this->assertTrue(TestCakeSession::write('SessionTestCase', null));\r\n\t\t$this->assertFalse(TestCakeSession::check('SessionTestCase'));\r\n\t}\r\n\r\n/**\r\n * testCheckKeyWithSpaces method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCheckKeyWithSpaces() {\r\n\t\t$this->assertTrue(TestCakeSession::write('Session Test', \"test\"));\r\n\t\t$this->assertTrue(TestCakeSession::check('Session Test'));\r\n\t\tTestCakeSession::delete('Session Test');\r\n\r\n\t\t$this->assertTrue(TestCakeSession::write('Session Test.Test Case', \"test\"));\r\n\t\t$this->assertTrue(TestCakeSession::check('Session Test.Test Case'));\r\n\t}\r\n\r\n/**\r\n * testCheckEmpty\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCheckEmpty() {\r\n\t\t$this->assertFalse(TestCakeSession::check(''));\r\n\t\t$this->assertFalse(TestCakeSession::check(null));\r\n\t}\r\n\r\n/**\r\n * test key exploitation\r\n *\r\n * @return void\r\n */\r\n\tpublic function testKeyExploit() {\r\n\t\t$key = \"a'] = 1; phpinfo(); \\$_SESSION['a\";\r\n\t\t$result = TestCakeSession::write($key, 'haxored');\r\n\t\t$this->assertFalse($result);\r\n\r\n\t\t$result = TestCakeSession::read($key);\r\n\t\t$this->assertNull($result);\r\n\t}\r\n\r\n/**\r\n * testReadingSavedEmpty method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testReadingSavedEmpty() {\r\n\t\tTestCakeSession::write('', 'empty string');\r\n\t\t$this->assertTrue(TestCakeSession::check(''));\r\n\t\t$this->assertEquals('empty string', TestCakeSession::read(''));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 0);\r\n\t\t$this->assertEquals(0, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', '0');\r\n\t\t$this->assertEquals('0', TestCakeSession::read('SessionTestCase'));\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase') === 0);\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', false);\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', null);\r\n\t\t$this->assertNull(TestCakeSession::read('SessionTestCase'));\r\n\t}\r\n\r\n/**\r\n * Test te cacheLimiter settings.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCacheLimiter() {\r\n\t\tConfigure::write('Session.cacheLimiter', 'public');\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertSame('public', session_cache_limiter());\r\n\r\n\t\tConfigure::write('Session.cacheLimiter', 'private');\r\n\t\tTestCakeSession::destroy();\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertSame('private', session_cache_limiter());\r\n\t}\r\n\r\n/**\r\n * testCheckUserAgentFalse method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCheckUserAgentFalse() {\r\n\t\tConfigure::write('Session.checkAgent', false);\r\n\t\tTestCakeSession::setUserAgent(md5('http://randomdomainname.com' . Configure::read('Security.salt')));\r\n\t\t$this->assertTrue(TestCakeSession::valid());\r\n\t}\r\n\r\n/**\r\n * testCheckUserAgentTrue method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCheckUserAgentTrue() {\r\n\t\tConfigure::write('Session.checkAgent', true);\r\n\t\tTestCakeSession::$error = false;\r\n\t\t$agent = md5('http://randomdomainname.com' . Configure::read('Security.salt'));\r\n\r\n\t\tTestCakeSession::write('Config.userAgent', md5('Hacking you!'));\r\n\t\tTestCakeSession::setUserAgent($agent);\r\n\t\t$this->assertFalse(TestCakeSession::valid());\r\n\t}\r\n\r\n/**\r\n * testReadAndWriteWithCakeStorage method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testReadAndWriteWithCakeStorage() {\r\n\t\tConfigure::write('Session.defaults', 'cake');\r\n\r\n\t\tTestCakeSession::init();\r\n\t\tTestCakeSession::start();\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 0);\r\n\t\t$this->assertEquals(0, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', '0');\r\n\t\t$this->assertEquals('0', TestCakeSession::read('SessionTestCase'));\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase') === 0);\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', false);\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', null);\r\n\t\t$this->assertEquals(null, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'This is a Test');\r\n\t\t$this->assertEquals('This is a Test', TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'This is a Test');\r\n\t\tTestCakeSession::write('SessionTestCase', 'This was updated');\r\n\t\t$this->assertEquals('This was updated', TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::destroy();\r\n\t\t$this->assertNull(TestCakeSession::read('SessionTestCase'));\r\n\t}\r\n\r\n/**\r\n * test using a handler from app/Model/Datasource/Session.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testUsingAppLibsHandler() {\r\n\t\tApp::build(array(\r\n\t\t\t'Model/Datasource/Session' => array(\r\n\t\t\t\tCAKE . 'Test' . DS . 'test_app' . DS . 'Model' . DS . 'Datasource' . DS . 'Session' . DS\r\n\t\t\t),\r\n\t\t\t'Plugin' => array(CAKE . 'Test' . DS . 'test_app' . DS . 'Plugin' . DS)\r\n\t\t), App::RESET);\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'defaults' => 'cake',\r\n\t\t\t'handler' => array(\r\n\t\t\t\t'engine' => 'TestAppLibSession'\r\n\t\t\t)\r\n\t\t));\r\n\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertTrue(TestCakeSession::started());\r\n\r\n\t\tTestCakeSession::destroy();\r\n\t\t$this->assertFalse(TestCakeSession::started());\r\n\r\n\t\tApp::build();\r\n\t}\r\n\r\n/**\r\n * test using a handler from a plugin.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testUsingPluginHandler() {\r\n\t\tApp::build(array(\r\n\t\t\t'Plugin' => array(CAKE . 'Test' . DS . 'test_app' . DS . 'Plugin' . DS)\r\n\t\t), App::RESET);\r\n\t\tCakePlugin::load('TestPlugin');\r\n\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'defaults' => 'cake',\r\n\t\t\t'handler' => array(\r\n\t\t\t\t'engine' => 'TestPlugin.TestPluginSession'\r\n\t\t\t)\r\n\t\t));\r\n\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertTrue(TestCakeSession::started());\r\n\r\n\t\tTestCakeSession::destroy();\r\n\t\t$this->assertFalse(TestCakeSession::started());\r\n\r\n\t\tApp::build();\r\n\t}\r\n\r\n/**\r\n * testReadAndWriteWithCacheStorage method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testReadAndWriteWithCacheStorage() {\r\n\t\tConfigure::write('Session.defaults', 'cache');\r\n\t\tConfigure::write('Session.handler.engine', 'TestCacheSession');\r\n\r\n\t\tTestCakeSession::init();\r\n\t\tTestCakeSession::destroy();\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 0);\r\n\t\t$this->assertEquals(0, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', '0');\r\n\t\t$this->assertEquals('0', TestCakeSession::read('SessionTestCase'));\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase') === 0);\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', false);\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', null);\r\n\t\t$this->assertEquals(null, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'This is a Test');\r\n\t\t$this->assertEquals('This is a Test', TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'This is a Test');\r\n\t\tTestCakeSession::write('SessionTestCase', 'This was updated');\r\n\t\t$this->assertEquals('This was updated', TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::destroy();\r\n\t\t$this->assertNull(TestCakeSession::read('SessionTestCase'));\r\n\t}\r\n\r\n/**\r\n * test that changing the config name of the cache config works.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testReadAndWriteWithCustomCacheConfig() {\r\n\t\tConfigure::write('Session.defaults', 'cache');\r\n\t\tConfigure::write('Session.handler.engine', 'TestCacheSession');\r\n\t\tConfigure::write('Session.handler.config', 'session_test');\r\n\r\n\t\tCache::config('session_test', array(\r\n\t\t\t'engine' => 'File',\r\n\t\t\t'prefix' => 'session_test_',\r\n\t\t));\r\n\r\n\t\tTestCakeSession::init();\r\n\t\tTestCakeSession::start();\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'Some value');\r\n\t\t$this->assertEquals('Some value', TestCakeSession::read('SessionTestCase'));\r\n\t\t$id = TestCakeSession::id();\r\n\r\n\t\tCache::delete($id, 'session_test');\r\n\t}\r\n\r\n/**\r\n * testReadAndWriteWithDatabaseStorage method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testReadAndWriteWithDatabaseStorage() {\r\n\t\tConfigure::write('Session.defaults', 'database');\r\n\t\tConfigure::write('Session.handler.engine', 'TestDatabaseSession');\r\n\t\tConfigure::write('Session.handler.table', 'sessions');\r\n\t\tConfigure::write('Session.handler.model', 'Session');\r\n\t\tConfigure::write('Session.handler.database', 'test');\r\n\r\n\t\tTestCakeSession::init();\r\n\t\t$this->assertNull(TestCakeSession::id());\r\n\r\n\t\tTestCakeSession::start();\r\n\t\t$expected = session_id();\r\n\t\t$this->assertEquals($expected, TestCakeSession::id());\r\n\r\n\t\tTestCakeSession::renew();\r\n\t\t$this->assertFalse($expected === TestCakeSession::id());\r\n\r\n\t\t$expected = session_id();\r\n\t\t$this->assertEquals($expected, TestCakeSession::id());\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 0);\r\n\t\t$this->assertEquals(0, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', '0');\r\n\t\t$this->assertEquals('0', TestCakeSession::read('SessionTestCase'));\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase') === 0);\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', false);\r\n\t\t$this->assertFalse(TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', null);\r\n\t\t$this->assertEquals(null, TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'This is a Test');\r\n\t\t$this->assertEquals('This is a Test', TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::write('SessionTestCase', 'Some additional data');\r\n\t\t$this->assertEquals('Some additional data', TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tTestCakeSession::destroy();\r\n\t\t$this->assertNull(TestCakeSession::read('SessionTestCase'));\r\n\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'defaults' => 'php'\r\n\t\t));\r\n\t\tTestCakeSession::init();\r\n\t}\r\n\r\n/**\r\n * testSessionTimeout method\r\n *\r\n * @return void\r\n */\r\n\tpublic function testSessionTimeout() {\r\n\t\tConfigure::write('debug', 2);\r\n\t\tConfigure::write('Session.defaults', 'cake');\r\n\t\tConfigure::write('Session.autoRegenerate', false);\r\n\r\n\t\t$timeoutSeconds = Configure::read('Session.timeout') * 60;\r\n\r\n\t\tTestCakeSession::destroy();\r\n\t\tTestCakeSession::write('Test', 'some value');\r\n\r\n\t\t$this->assertWithinMargin(time() + $timeoutSeconds, CakeSession::$sessionTime, 1);\r\n\t\t$this->assertEquals(10, $_SESSION['Config']['countdown']);\r\n\t\t$this->assertWithinMargin(CakeSession::$sessionTime, $_SESSION['Config']['time'], 1);\r\n\t\t$this->assertWithinMargin(time(), CakeSession::$time, 1);\r\n\t\t$this->assertWithinMargin(time() + $timeoutSeconds, $_SESSION['Config']['time'], 1);\r\n\r\n\t\tConfigure::write('Session.harden', true);\r\n\t\tTestCakeSession::destroy();\r\n\r\n\t\tTestCakeSession::write('Test', 'some value');\r\n\t\t$this->assertWithinMargin(time() + $timeoutSeconds, CakeSession::$sessionTime, 1);\r\n\t\t$this->assertEquals(10, $_SESSION['Config']['countdown']);\r\n\t\t$this->assertWithinMargin(CakeSession::$sessionTime, $_SESSION['Config']['time'], 1);\r\n\t\t$this->assertWithinMargin(time(), CakeSession::$time, 1);\r\n\t\t$this->assertWithinMargin(CakeSession::$time + $timeoutSeconds, $_SESSION['Config']['time'], 1);\r\n\t}\r\n\r\n/**\r\n * Test that cookieTimeout matches timeout when unspecified.\r\n *\r\n * @return void\r\n */\r\n\tpublic function testCookieTimeoutFallback() {\r\n\t\t$_SESSION = null;\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'defaults' => 'cake',\r\n\t\t\t'timeout' => 400,\r\n\t\t));\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertEquals(400, Configure::read('Session.cookieTimeout'));\r\n\t\t$this->assertEquals(400, Configure::read('Session.timeout'));\r\n\t\t$this->assertEquals(400 * 60, ini_get('session.cookie_lifetime'));\r\n\t\t$this->assertEquals(400 * 60, ini_get('session.gc_maxlifetime'));\r\n\r\n\t\t$_SESSION = null;\r\n\t\tConfigure::write('Session', array(\r\n\t\t\t'defaults' => 'cake',\r\n\t\t\t'timeout' => 400,\r\n\t\t\t'cookieTimeout' => 600\r\n\t\t));\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertEquals(600, Configure::read('Session.cookieTimeout'));\r\n\t\t$this->assertEquals(400, Configure::read('Session.timeout'));\r\n\t}\r\n\r\n/**\r\n * Proves that invalid sessions will be destroyed and re-created\r\n * if invalid\r\n *\r\n * @return void\r\n */\r\n\tpublic function testInvalidSessionRenew() {\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertNotEmpty($_SESSION['Config']);\r\n\t\t$data = $_SESSION;\r\n\r\n\t\tsession_write_close();\r\n\t\t$_SESSION = null;\r\n\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertEquals($data, $_SESSION);\r\n\t\tTestCakeSession::write('Foo', 'Bar');\r\n\r\n\t\tsession_write_close();\r\n\t\t$_SESSION = null;\r\n\r\n\t\tTestCakeSession::userAgent('bogus!');\r\n\t\tTestCakeSession::start();\r\n\t\t$this->assertNotEquals($data, $_SESSION);\r\n\t\t$this->assertEquals('bogus!', $_SESSION['Config']['userAgent']);\r\n\t}\r\n\r\n}\r\n"
}