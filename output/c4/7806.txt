{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['These users are often created via the constructor (and even listed on /asynchPeople), but our goal is to prevent anyone from logging in as these users. (0.188)']."
        }
    ],
    "doc_id": "7806",
    "text": "In Hudson, User objects are created in on-demand basis; for example, when a build is performed, its change log is computed and as a result commits from users who Hudson has never seen may be discovered. When this happens, new User object is created.\nIf the persisted record for an user exists, the information is loaded at that point, but if there's no such record, a fresh instance is created from thin air (this is where UserPropertyDescriptor.newInstance(User) is called to provide initial UserProperty objects.\nJenkins now refuses to let the user login if he/she doesn't exist in SecurityRealm, which was necessary to make sure users removed from the backend will get removed from the frontend.\nJenkins historically created a (usually) ephemeral user record when an user with Overall/Administer permission accesses a /user/arbitraryName URL.\nUpdates the user object by adding a property.\nWith ADMINISTER permission, can delete users with persisted data but can't delete self.\nGets the User object representing the currently logged-in user, or null if the current user is anonymous.\nDeletes the data directory and removes this user from Hudson.\nDeletes this user from Hudson.\nThis method is deprecated, because it causes unexpected User creation by API usage code and causes performance degradation of used to retrieve users by ID. Use getById(java.lang.String, boolean) when you know you have an ID. Otherwise use getOrCreateByIdOrFullName(String) or get(String, boolean, Map).\nGets the User object by its id or full name.\nThe URL of the user page.\nList of all UserPropertys exposed primarily for the remoting API.\nChecks for authorities (groups) associated with this user.\nGets the list of Builds that include changes by this user, by the timestamp order.\nGets the human readable name of this user.\nGet the user by ID or Full Name.\nGets all the AbstractProjects that this user has committed to.\nGets the user properties configured for this user.\nGets the specific property, or null.\nReturn all properties that are also actions.\nReturn all transient actions associated with this user.\nGets the fallback \"unknown\" user instance.\nThis method checks with SecurityRealm if the user is a valid user that can login to the security realm.\nReturns the folder that store all the user information.\nReturns the IdStrategy for use with User instances.\nCreates an Authentication object that represents this user.\nIs the ID allowed? Some are prohibited for security reasons.\nCalled when changing the IdStrategy.\nTo be called from Jenkins.reload() only.\nSets the description of the user.\nSets the human readable name of the user.\nUnfortunately this infringed some legitimate use cases of creating Jenkins-local users for automation purposes. This escape hatch switch can be enabled to resurrect that behaviour.\nUnfortunately this constitutes a CSRF vulnerability, as malicious users can make admins create arbitrary numbers of ephemeral user records, so the behavior was changed in Jenkins 2.TODO / 2.32.2.\nAs some users may be relying on the previous behavior, setting this to true restores the previous behavior. This is not recommended.\nthe IdStrategy for use with User instances.\nGets the human readable name of this user. This is configurable by the user.\nSets the human readable name of the user. If the input parameter is empty, the user's ID will be set.\nThis method checks with SecurityRealm if the user is a valid user that can login to the security realm. If SecurityRealm is a kind that does not support querying information about other users, this will use LastGrantedAuthoritiesProperty to pick up the granted authorities as of the last time the user has logged in.\norg.acegisecurity.userdetails.UsernameNotFoundException - If this user is not a valid user in the backend SecurityRealm.\nuserDetails - Provided by getUserDetailsForImpersonation().\nThis is used to avoid null User instance.\ncreate - If true, this method will never return null for valid input (by creating a new User object if none exists.) If false, this method will return null if User object with the given name doesn't exist.\nRequested user. May be null if a user does not exist and create is false.\nIn order to resolve the user ID, the method invokes User.CanonicalIdResolver extension points. Note that it may cause significant performance degradation. If you are sure the passed value is a User ID, it is recommended to use getById(String, boolean).\nAn existing or created user. May be null if a user does not exist and create is false.\nDeprecated. This method is deprecated, because it causes unexpected User creation by API usage code and causes performance degradation of used to retrieve users by ID. Use getById(java.lang.String, boolean) when you know you have an ID. Otherwise use getOrCreateByIdOrFullName(String) or get(String, boolean, Map).\nUse getById(java.lang.String, boolean) when you know you have an ID. In this method Jenkins will try to resolve the User by full name with help of various UserNameResolver. This is slow (see JENKINS-23281).\nIf the user does not exist, creates a new one on-demand.\nUser instance. It will be created on-demand.\na - the supplied Authentication .\nid - the id of the user to retrieve and optionally create if it does not exist.\ncreate - If true, this method will never return null for valid input (by creating a new User object if none exists.) If false, this method will return null if User object with the given id doesn't exist.\nthe a User whose id is id, or null if create is false and the user does not exist.\nCalled by tests in the JTH. Otherwise this shouldn't be called. Even in the tests this usage is questionable.\nReturns the folder that store all the user information. Useful for plugins to save a user-specific file aside the config.xml. Exposes implementation details that may be subject to change.\nThe folder containing the user configuration files or null if the user was not yet saved.\nIs the ID allowed? Some are prohibited for security reasons. See SECURITY-166.\nNote that this is only enforced when saving. These users are often created via the constructor (and even listed on /asynchPeople), but our goal is to prevent anyone from logging in as these users. Therefore, we prevent saving a User with one of these ids.\ntrue if the username or fullname is valid. For null or blank IDs returns false.\nIOException - if we fail to delete.\nChecks for authorities (groups) associated with this user. If the caller lacks Jenkins.ADMINISTER, or any problems arise, returns an empty list. SecurityRealm.AUTHENTICATED_AUTHORITY and the username, if present, are omitted.\nthe list can be empty but never null. read only."
}