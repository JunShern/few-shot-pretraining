{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "3280",
    "text": "Imagine you\u2019ve just come back from lunch and a network outage has brought your company to a standstill. You look over to your senior network engineer\u2019s empty desk and remember he\u2019s enjoying a vacation on the pink sands of Bermuda. Your team doesn\u2019t have enough knowledge about the part of the network that\u2019s effected \u2014 only the senior engineer does \u2014 so your team begins sifting and scanning through network data to find the issue.\nThere\u2019s no common knowledge repository. All network diagrams and reports are kept on someone\u2019s personal drive or buried in email threads, making it nearly impossible to troubleshoot an outage in real time.\nThe network hero as a single point of failure. If there\u2019s only one person who has the expertise (the \u201cnetwork hero\u201d) and his or her knowledge is not shared among other team members, network management and troubleshooting becomes exponentially more difficult.\nNo one can know everything. Consider the common issue of a slow application. There could be a number of reasons for slowness, from network latency to an under-powered app server. The network is part of a larger collection of interdependent pieces, and no one engineer can know everything about it all. Knowledge-sharing among engineers and teams is crucial.\nThe goal here isn\u2019t necessarily to hire an entire team of CCIEs (though that would be cool), it\u2019s to arm engineers with the knowledge and tools they need to address incidents and work across knowledge silos. We need to avoid teams being paralyzed because one person is unavailable, like in the case of the vacationing engineer. Or worse, what if the network hero retires or gets another job? All that critical tribal knowledge walks out the door with him. The answer is to break down barriers and make information easily available to create an entire team of network heroes by developing a culture of collaboration and knowledge-sharing.\nNetBrain directly addresses the issue of knowledge-sharing and collaboration both on the incident and infrastructure level. One of the core functions of Executable Runbooks is to enable teams to digitize best practices, policies, procedures and anything else that might be otherwise living in someone\u2019s head, on handwritten notes or in a departmental playbook.\nCodify your troubleshooting tribal knowledge into Executable Runbooks. Making this expertise executable empowers every engineer on your team to be a \u201cNetwork Hero\u201d who can solve the tough problems.\nExecutable Runbooks can be used to automate repetitive tasks, such as network troubleshooting steps and compliance checks \u2014 without having to write a single line of code. Runbooks make knowledge transfer not only possible but quite easy.\nWhen you get down to it, a Runbook is a series of steps or tasks. Exactly what those steps would be depends on what you want to do. Think about our network hero in Bermuda: based on his experience and tribal knowledge, he\u2019d go through a methodical series of steps to pinpoint the issue. Problem is, of course, that only he knows where and what to check for probable causes, and only he knows which steps need to be taken and in what kind of logical, sequential order.\nThat\u2019s where Runbooks come in. Each step he would take is delineated in the Runbook, and the associated task is automatically run with a mouse click. For example, your network hero might first rule out the most common causes \u2014 say, an interface speed or duplex mismatch. If that\u2019s not it, he\u2019d look for other usual suspects like high interface utilization. If he sees something there, he then follows certain steps. If he doesn\u2019t find trouble with high memory of CPU utilization, he takes another troubleshooting route.\nWith Runbooks, all the network hero\u2019s decision-making process is documented in \u201cif-then\u201d branches so the next best steps are automated for anyone on the team to follow. In the Runbook below, each successive step is a Qapp that performs one specific task.\nBuild \u201cif/then\u201d branches into Runbooks to automate next best steps for anyone on the team to follow \u2013 e.g., if errors are increasing on an interface, check for a duplex mismatch.\nOr maybe the next step is to issue various CLI commands to collect and analyze data. Runbooks enable you to automate CLI commands across multiple devices in one fell swoop, and then visualize the output within the context of the problem at hand right on a Dynamic Network Map.\nAutomatically issue CLI commands across multiple devices simultaneously and get the relevant data \u2013 like HSRP active/standby status or QoS queue drops \u2013 displayed right on the map.\nSo, instead of relying on your network hero to be available 24\u00d77, incorporate his or her expertise into automatically executed procedures with runbook automation tools. Runbooks can be customized to any workflow, and \u2014 best of all \u2014 you don\u2019t need to write any complicated Python scripts. The NetBrain drag-and-drop visual programming environment allows you to codify network knowledge into lightweight applications. It\u2019s automation without coding.\nCheck out how easy it is to use and build a Runbook in Matt Speidel\u2019s blog post How Executable Runbooks Work.\nCodifying tribal knowledge is just one way NetBrain automation makes the life of a network engineer easier. Discover others in the on-demand webinar (no registration or form to fill out) 5 Ways to Enhance Your Workflows with Automation."
}