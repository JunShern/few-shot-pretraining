{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": true,
            "reason": "Text contains ['Today I\u2019ll take you in a quick tour on how to use the framework, and then, we\u2019ll build together a fun demo app that demonstrates the effect of combining different behaviors, also the effect of changing magnitudes and settings of the different behavior. (0.191)', 'Each of these provides configuration options and lets you associate one or more dynamic items to the behavior. (0.198)', 'In the below demo application, I only used the above steps, with some extra minor additions to help us feel the effect of changing the multiple configurations. (0.162)']."
        }
    ],
    "doc_id": "2358",
    "text": "During the last month, I learned about the awesome UIKit Dynamic animations framework. It\u2019s a physics-based animation and it\u2019s really fun when you use it wisely in your applications. You can add different physics-based behaviors like collisions, bouncing, gravity .. and a lot more behaviors and settings. Today I\u2019ll take you in a quick tour on how to use the framework, and then, we\u2019ll build together a fun demo app that demonstrates the effect of combining different behaviors, also the effect of changing magnitudes and settings of the different behavior.\nSo, enough talking let\u2019s get our hands dirty!\nUIKit Dynamics is a full real-world physics engine integrated into UIKit. It allows you to create interfaces that feel real by adding behaviors such as gravity, attachments, collision and forces. You define the physical traits that you would like your interface elements to adopt, and the dynamics engine takes care of the rest.\nAdd UIDynamicItem(s) to the animator to be animated, usually UIViews.\nLet\u2019s start with a simple example, the first step from the above end result animation is to only draw a square and use the UIKit Dynamics to make it fall due to gravity pointing downward.\nFirst, let\u2019s draw our first static square at the middle of our view.\nFrom the documentation, \u201ca dynamic animator provides physics-related capabilities and animations for its dynamic items, and provides the context for those animations. It does this by intermediating between the underlying iOS physics engine and dynamic items, via behavior objects you add to the animator\u201d.\nThat\u2019s the class that actually drives everything.\nWhen creating it, you have to specify the top level view of the view hierarchy where you want to animate your views (i.e. any view that this animator will act on, must be subview to this root view).\nYou specify dynamic behaviors using any of the iOS primitive dynamic behavior classes: UIAttachmentBehavior, UICollisionBehavior, UIDynamicItemBehavior, UIGravityBehavior, UIPushBehavior, and UISnapBehavior. Each of these provides configuration options and lets you associate one or more dynamic items to the behavior. To activate a behavior, add it to an animator.\nTo use dynamics, configure one or more dynamic behaviors\u2014including providing each with a set of dynamic items\u2014and then add those behaviors to a dynamic animator.\nUIDyanamicItem is just a protocol, which UIView implements.\nWe can make our square more elastic, by creating/configuring UIDynamicItemBehavior.\nA dynamic item behavior represents a base dynamic animation configuration for one or more dynamic items.\nElasticity: The amount of elasticity applied to collisions for the behavior\u2019s dynamic items.\nFriction: The linear resistance for the behavior\u2019s dynamic items when two slide against each other.\nDensity: The relative mass density of the behavior\u2019s dynamic items.\nResistance: The linear resistance for the behavior\u2019s dynamic items, which reduces their linear velocity over time.\nDon\u2019t confuse UIDynamicItemBehavior with UIDynamicBehavior, which is the parent class of all behaviors.\nIn the below demo application, I only used the above steps, with some extra minor additions to help us feel the effect of changing the multiple configurations.\nConfiguration screen added, it really makes things more fun, you gotta play with it a little.\nIn order to make things neat, I grouped all the square behaviors in one UIDynamicBehavior subclass (SquareBehavior).\nI made use from the UIPushBehavior.\nI made use from the UISnapBehavior.\nMade things more fun by throwing colorful squares from 2 canons ;] placed on the sides of the screen.\nThe demo app is available on Github, feel free clone, try & customize it.\nDetecting collisions between objects and boundaries.\nIllustrating what\u2019s meant by \u201cstasis\u201d, and how to detect it.\nNote on how to avoid memory cycles.\nI\u2019ll be happy answering your questions or inquiries, just write a comment below.\n@a_abdurrahman @NatashaTheRobot never played with UIKitDynamics before the post was a good read & I liked the iterative approach, nice work!\n\u2190 try, try! & try? what\u2019s the difference, and when to use each?\nVery nice tutorial! Two minor issues that I ran into is that I need to connect the IBOutlet to the View, otherwise it would crash on launch. Also, had to call animateSquare() in viewDidLoad() to get it to do it\u2019s thing."
}