{
    "criteria": [
        {
            "criterion": "AllDocuments",
            "passed": true,
            "reason": "All documents pass."
        },
        {
            "criterion": "QuestionAnswerStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "FullyStructured",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamStringsV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStrings",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesStringsV2",
            "passed": true,
            "reason": "Text contains For example."
        },
        {
            "criterion": "ListPrefixV2",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesMinimalEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesSynonymsEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        },
        {
            "criterion": "ExamplesDiverseEmbed",
            "passed": false,
            "reason": "Does not meet criterion."
        }
    ],
    "doc_id": "9022",
    "text": "While this post is titled \u201cThoughts of Virtualizaiton\u201d, the applications described can be easily applied to non-VM type installations.\nVirtualization is a wonderful tool, it enables rapid growth and rapid deployment of new servers and services. However, just like any other platform that tends to grow across the time line, it poses the same annoying issue of managing a large system, especially when dealing with Asterisk based installations.\nLet us imagine the following scenario: A Calling Card company while utilizes 8 different Asterisk application servers, are utilizing a single Database servers cluster and are receiving inbound calls from various sources and load balanced across all Asterisk application servers. What I\u2019ve described above is more or less the practice most (if not) all calling card operators deploy. No matter if the usage is A2Billing, MOR, ASTBILL \u2013 the methodology is more or less the same.\nSSH to all your Asterisk servers.\nTile all consoles on your desktop.\nStart the test \u2013 and hope your eyes are fast enough to capture the right gateway.\nWell, this is the normal practice with most people \u2013 but I have to admit it\u2019s kind of annoying. Now, let\u2019s imagine that we are now building our system from scratch, we\u2019re not using A2Billing or any of the other Open Source products, we simply build our own application framework. So, what do we need to do in order to keep track of our system correctly?\nConsolidate the messages coming from each of your gateways to a single logging facility. The best track would be to utilize some form of Syslog facility. For example, all the scripts and network services that I develop utilize a clear and concise interface to syslog. I usually re-direct the syslog facility that I use to an external server, thus, I get all the logs on a single syslog file system.\nIf you are worried about I/O issues on the syslog server, you can always create a \u201csyslog-proxy\u201d using tools such as memcached or others.\nWhile the syslog facility will include your generating hostname, when duplication VM\u2019s, this would be a really good practice.\nOnce your logs are consolidated to a single environment, it should be fairly simple for you to go about and analyse these in a pre-defined routine. There is little to gain from analysing the logs on-the-fly, but analysing it every 5/10/15 minutes will prove worthwhile.\nAuditing is good \u2013 as long as you keep a clear view of what you audit and what you don\u2019t. Audit key points in your application to a database can save you a whole lot of time of debugging \u2013 just make sure your audit is clear.\nKeep the above in mind and you should be just fine creating any scale of platform."
}